module.exports.getXdfsStr = () => {
    return Promise.resolve(JSON.stringify({ fnDescs: xdfList}));
};

const xdfList = [{"fnName":"addDateInterval","fnDesc":"Add the specified year, month, day interval to start date","category":10,"numArgs":4,"argDescs":[{"argDesc":"start date","typesAccepted":512,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"years","typesAccepted":316,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"months","typesAccepted":316,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"days","typesAccepted":316,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":9,"displayName":"addDateInterval"},{"fnName":"colsDefinedBitmap","fnDesc":"colsDefinedBitmap: Returns a bitmap with where index i = 1 if field i exists ","category":1,"numArgs":1,"argDescs":[{"argDesc":"Operands","typesAccepted":-1,"isSingletonValue":true,"argType":2,"minArgs":1,"maxArgs":64}],"outputType":4,"displayName":"colsDefinedBitmap"},{"fnName":"sumNumeric","fnDesc":"Sums up all values in a set. Casts input and output to numeric2. Use this if double is not precise enough.","category":7,"numArgs":1,"argDescs":[{"argDesc":"Field name to sum over","typesAccepted":524288,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":19,"displayName":"sumNumeric"},{"fnName":"/sharedUDFs/default:logBuckets","fnDesc":"","category":9,"numArgs":1,"argDescs":[{"argDesc":"n","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:logBuckets"},{"fnName":"bitor","fnDesc":"bitwise or: Takes two bit patterns and performs the logical inclusive OR operation on each pair of corresponding bits. bitor(a, b) = a | b","category":1,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2 (b)","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"bitor"},{"fnName":"sub","fnDesc":"sub(a, b, ...) = a - b - ...","category":0,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Additional Operands","typesAccepted":508,"isSingletonValue":true,"argType":2,"minArgs":1,"maxArgs":1023}],"outputType":7,"displayName":"sub"},{"fnName":"le","fnDesc":"le(a, b) -> a <= b","category":6,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":525310,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2 (b)","typesAccepted":525310,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"le"},{"fnName":"/sharedUDFs/default:xmlToJsonWithExtraKeys","fnDesc":"","category":9,"numArgs":6,"argDescs":[{"argDesc":"fullPath","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"xmlStream","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"allPaths","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"withPath","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"matchedPath","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"delimiter","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:xmlToJsonWithExtraKeys"},{"fnName":"log2","fnDesc":"Logarithm base 2","category":0,"numArgs":1,"argDescs":[{"argDesc":"value","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"log2"},{"fnName":"minInteger","fnDesc":"Finds the minimum value in a set.","category":7,"numArgs":1,"argDescs":[{"argDesc":"Field name to compute min value of","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"minInteger"},{"fnName":"cut","fnDesc":"cut(str,fieldNum,delim) -> Pull out field number <fieldNum> from <str> given delimiter <delim>","category":4,"numArgs":3,"argDescs":[{"argDesc":"string to parse","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"field number","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"delimiter","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"cut"},{"fnName":"weekOfYear","fnDesc":"Returns the week of the year of the given date. A week is considered to start on a Monday and week 1 is the first week with >3 days.","category":10,"numArgs":1,"argDescs":[{"argDesc":"date","typesAccepted":512,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"weekOfYear"},{"fnName":"/sharedUDFs/default:now","fnDesc":"","category":9,"numArgs":0,"argDescs":[],"outputType":1,"displayName":"default:now"},{"fnName":"/sharedUDFs/default:standardizeColumnNamesAndTypes","fnDesc":"","category":9,"numArgs":8,"argDescs":[{"argDesc":"fullPath","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"inStream","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"withHeader","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"skipRows","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"field","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"record","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"quote","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"allowMixed","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:standardizeColumnNamesAndTypes"},{"fnName":"/sharedUDFs/default:timeSub","fnDesc":"","category":9,"numArgs":2,"argDescs":[{"argDesc":"col","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"interval","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:timeSub"},{"fnName":"int","fnDesc":"int(x, [base]) -- Cast x to an integer in base [base]","category":8,"numArgs":2,"argDescs":[{"argDesc":"x","typesAccepted":525310,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"base -- optional","typesAccepted":2364,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":4,"displayName":"int"},{"fnName":"atan2","fnDesc":"atan2(y, x) returns principal value of arctangent(y/x)","category":2,"numArgs":2,"argDescs":[{"argDesc":"y","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"x","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"atan2"},{"fnName":"bitrshift","fnDesc":"bit right-shift: Returns 'a' shifted right by 'b' bits. bitrshift(a, b) = a >> b","category":1,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2 (b)","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"bitrshift"},{"fnName":"lastDayOfMonth","fnDesc":"Returns the last date of the month","category":10,"numArgs":1,"argDescs":[{"argDesc":"date","typesAccepted":512,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":9,"displayName":"lastDayOfMonth"},{"fnName":"stripRight","fnDesc":"stripRight(str1) -> Strip trailing whitespace from a string","category":4,"numArgs":2,"argDescs":[{"argDesc":"string","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"delim character","typesAccepted":2050,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"stripRight"},{"fnName":"subInteger","fnDesc":"subInteger(a, b, ...) = a - b - .... Arguments will first get truncated","category":0,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Additional Operands","typesAccepted":508,"isSingletonValue":true,"argType":2,"minArgs":1,"maxArgs":1023}],"outputType":4,"displayName":"subInteger"},{"fnName":"exists","fnDesc":"exists(fieldName) -- does field name exist","category":6,"numArgs":1,"argDescs":[{"argDesc":"fieldName","typesAccepted":-2049,"isSingletonValue":false,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"exists"},{"fnName":"explodeString","fnDesc":"Splits a string based on delim and returns the results as multiple rows","category":4,"numArgs":2,"argDescs":[{"argDesc":"string","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"delim","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"explodeString"},{"fnName":"concat","fnDesc":"concat(str1, str2, ...) -> Concatenate strings","category":4,"numArgs":2,"argDescs":[{"argDesc":"string 1","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Additional Strings","typesAccepted":2,"isSingletonValue":true,"argType":2,"minArgs":1,"maxArgs":1023}],"outputType":1,"displayName":"concat"},{"fnName":"dateAddInterval","fnDesc":"Add years, months, days to a date (can be negative)","category":3,"numArgs":5,"argDescs":[{"argDesc":"date","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"input format","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"years","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"months","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"days","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"dateAddInterval"},{"fnName":"maxString","fnDesc":"Finds the maximum value in a set","category":7,"numArgs":1,"argDescs":[{"argDesc":"Field name to compute max value of","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"maxString"},{"fnName":"genRandom","fnDesc":"Generates a random number per row","category":5,"numArgs":2,"argDescs":[{"argDesc":"start","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"end","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"genRandom"},{"fnName":"cos","fnDesc":"cos(angle) returns the cosine of angle, with angle expressed in radians","category":2,"numArgs":1,"argDescs":[{"argDesc":"angle","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"cos"},{"fnName":"mod","fnDesc":"mod(a, b) is the remainder after calculating a / b","category":0,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2 (b) -- Cannot be zero!!","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"mod"},{"fnName":"stringLPad","fnDesc":"Returns 'str', left-padded with 'pad' to a length of 'len'.If 'str' is longer than 'len', the return value is shortenedto 'len' characters","category":4,"numArgs":3,"argDescs":[{"argDesc":"str","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"len","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"pad","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"stringLPad"},{"fnName":"addIntervalString","fnDesc":"Add an interval formatted as years,months,days,hours,minutes,seconds to timestamp\nSeconds can be float all others must be int","category":10,"numArgs":2,"argDescs":[{"argDesc":"start timestamp","typesAccepted":512,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"interval string","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":9,"displayName":"addIntervalString"},{"fnName":"bool","fnDesc":"bool(x) -- Cast x to a boolean","category":8,"numArgs":1,"argDescs":[{"argDesc":"x","typesAccepted":524798,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"bool"},{"fnName":"convertFromUnixTS","fnDesc":"Converts a unix timestamp (UTC) into a date string","category":10,"numArgs":2,"argDescs":[{"argDesc":"unix timestamp","typesAccepted":1020,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"output format","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"convertFromUnixTS"},{"fnName":"isFloat","fnDesc":"isFloat(fieldName)","category":6,"numArgs":1,"argDescs":[{"argDesc":"fieldName","typesAccepted":-2049,"isSingletonValue":false,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"isFloat"},{"fnName":"xdbHash","fnDesc":"Determines which Xdb hash slot a key will hash to","category":5,"numArgs":1,"argDescs":[{"argDesc":"key","typesAccepted":-2049,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"xdbHash"},{"fnName":"convertDate","fnDesc":"Reformat a date string","category":3,"numArgs":3,"argDescs":[{"argDesc":"date","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"input format","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"output format","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"convertDate"},{"fnName":"dateTrunc","fnDesc":"Returns timestamp truncated to the unit specified by the format model fmt. fmt should be one of [\"YEAR\", \"YYYY\", \"YY\", \"MON\", \"MONTH\", \"MM\", \"DAY\", \"DD\", \"HOUR\", \"MINUTE\", \"SECOND\", \"WEEK\", \"QUARTER\"]","category":10,"numArgs":2,"argDescs":[{"argDesc":"date","typesAccepted":512,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"fmt","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":9,"displayName":"dateTrunc"},{"fnName":"absNumeric","fnDesc":"Takes the absolute value of an integer","category":0,"numArgs":1,"argDescs":[{"argDesc":"value","typesAccepted":524604,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":19,"displayName":"absNumeric"},{"fnName":"len","fnDesc":"Get length of a string","category":4,"numArgs":1,"argDescs":[{"argDesc":"text","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"len"},{"fnName":"genUnique","fnDesc":"Generates a unique integer per row","category":5,"numArgs":0,"argDescs":[],"outputType":4,"displayName":"genUnique"},{"fnName":"/sharedUDFs/default:ingestFromDatabase","fnDesc":"","category":9,"numArgs":3,"argDescs":[{"argDesc":"inFile","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"inStream","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"query","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:ingestFromDatabase"},{"fnName":"/sharedUDFs/default:openExcel","fnDesc":"","category":9,"numArgs":5,"argDescs":[{"argDesc":"fullPath","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"inStream","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"withHeader","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"skipRows","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"sheetIndex","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:openExcel"},{"fnName":"max","fnDesc":"Finds the maximum value in a set","category":7,"numArgs":1,"argDescs":[{"argDesc":"Field name to compute max value of","typesAccepted":-2049,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":15,"displayName":"max"},{"fnName":"stripLeft","fnDesc":"stripLeft(str1) -> Strip leading whitespace from a string. If delim is specified, strips delim instead","category":4,"numArgs":2,"argDescs":[{"argDesc":"string","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"delim character","typesAccepted":2050,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"stripLeft"},{"fnName":"subNumeric","fnDesc":"subNumeric(a, b, ...) = a + b + ...","category":0,"numArgs":2,"argDescs":[{"argDesc":"Operand 1","typesAccepted":524606,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Additional Operands","typesAccepted":524606,"isSingletonValue":true,"argType":2,"minArgs":1,"maxArgs":1023}],"outputType":19,"displayName":"subNumeric"},{"fnName":"ifStr","fnDesc":"ifStr(condition, conditionTrueString, conditionFalseString) -- if condition (a boolean expression) is true, return conditionTrueString, otherwise, return conditionFalseString","category":5,"numArgs":3,"argDescs":[{"argDesc":"condition to test","typesAccepted":524796,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"value returned when condition is true","typesAccepted":2050,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"value returned when condition is false","typesAccepted":2050,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"ifStr"},{"fnName":"log","fnDesc":"Natural logarithm (base e)","category":0,"numArgs":1,"argDescs":[{"argDesc":"value","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"log"},{"fnName":"addNumeric","fnDesc":"addNumeric(a, b, ...) = a + b + ...","category":0,"numArgs":2,"argDescs":[{"argDesc":"Operand 1","typesAccepted":524606,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Additional Operands","typesAccepted":524606,"isSingletonValue":true,"argType":2,"minArgs":1,"maxArgs":1023}],"outputType":19,"displayName":"addNumeric"},{"fnName":"dhtHash","fnDesc":"Generates the hashKey used by the dht","category":5,"numArgs":2,"argDescs":[{"argDesc":"field to compute the hashKeys of","typesAccepted":-2049,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"mod by (default no mod)","typesAccepted":2364,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":4,"displayName":"dhtHash"},{"fnName":"in","fnDesc":"in(a, x1, x2, x3, ..., xn): returns true if a is equal to any value xi where 1 <= i <= n. Otherwise returns false","category":6,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":527358,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"[x1, x2, ..., xn] Must be of same type as operand 1","typesAccepted":527358,"isSingletonValue":true,"argType":2,"minArgs":1,"maxArgs":1023}],"outputType":8,"displayName":"in"},{"fnName":"not","fnDesc":"not(a) -> !a","category":6,"numArgs":1,"argDescs":[{"argDesc":"value","typesAccepted":256,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"not"},{"fnName":"/sharedUDFs/default:toDate","fnDesc":"","category":9,"numArgs":2,"argDescs":[{"argDesc":"colName","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"inputFormat","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:toDate"},{"fnName":"chr","fnDesc":"Returns the ASCII character having the binary equivalent to 'n'. If n is larger than 255 the result is equivalent to chr('n' % 256)","category":4,"numArgs":1,"argDescs":[{"argDesc":"n","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"chr"},{"fnName":"concatDelim","fnDesc":"concatDelim(delim, null_value, include_null, str1, str2) -- Concatenates str1, str2 with delimiter delim replaces FNF with null_value if include_null is set to true","category":4,"numArgs":4,"argDescs":[{"argDesc":"delim","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"null value","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"include null","typesAccepted":256,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Strings to concat","typesAccepted":2050,"isSingletonValue":true,"argType":2,"minArgs":1,"maxArgs":1023}],"outputType":1,"displayName":"concatDelim"},{"fnName":"convertTimezone","fnDesc":"Changes timzeone of a timestamp to a timezone specified bythe offset in hours from UTC","category":10,"numArgs":2,"argDescs":[{"argDesc":"timestamp","typesAccepted":512,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"offset from UTC in hours","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":9,"displayName":"convertTimezone"},{"fnName":"soundEx","fnDesc":"soundEx(name) -- Computes the American Soundex code for a given name","category":4,"numArgs":1,"argDescs":[{"argDesc":"string to soundex","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"soundEx"},{"fnName":"/sharedUDFs/default:parseCsv","fnDesc":"","category":9,"numArgs":0,"argDescs":[],"outputType":1,"displayName":"default:parseCsv"},{"fnName":"add","fnDesc":"add(a, b, ...) = a + b + ...","category":0,"numArgs":2,"argDescs":[{"argDesc":"Operand 1","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Additional Operands","typesAccepted":508,"isSingletonValue":true,"argType":2,"minArgs":1,"maxArgs":1023}],"outputType":7,"displayName":"add"},{"fnName":"/sharedUDFs/default:parseJson","fnDesc":"","category":9,"numArgs":2,"argDescs":[{"argDesc":"fullPath","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"inStream","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:parseJson"},{"fnName":"abs","fnDesc":"Takes the absolute value of a number","category":0,"numArgs":1,"argDescs":[{"argDesc":"value","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"abs"},{"fnName":"levenshtein","fnDesc":"levenshtein(str1, str2) -- Computes the Levenshtein edit distance between strings","category":4,"numArgs":2,"argDescs":[{"argDesc":"string 1","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"string 2","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":2,"displayName":"levenshtein"},{"fnName":"like","fnDesc":"like(string, pattern) -- does pattern match string? pattern may contain the * wild card","category":6,"numArgs":2,"argDescs":[{"argDesc":"string to match","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"pattern (may contain the * wild card)","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"like"},{"fnName":"eqNonNull","fnDesc":"eq(a, b) -> a == b. Returns null if either a or b is null","category":6,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":525310,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2 (b) Must be of same type as operand 1","typesAccepted":525310,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"eqNonNull"},{"fnName":"exp","fnDesc":"exp(x) = e raised to the x power","category":0,"numArgs":1,"argDescs":[{"argDesc":"Operand 1 (x)","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"exp"},{"fnName":"/sharedUDFs/default:dayOfWeek","fnDesc":"","category":9,"numArgs":1,"argDescs":[{"argDesc":"dateStr","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:dayOfWeek"},{"fnName":"bitLength","fnDesc":"Returns the bit length of 'expr'","category":1,"numArgs":1,"argDescs":[{"argDesc":"expr","typesAccepted":-2049,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"bitLength"},{"fnName":"minFloat","fnDesc":"Finds the minimum value in a set.","category":7,"numArgs":1,"argDescs":[{"argDesc":"Field name to compute min value of","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"minFloat"},{"fnName":"/sharedUDFs/default:convertFormats","fnDesc":"","category":9,"numArgs":3,"argDescs":[{"argDesc":"colName","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"outputFormat","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"inputFormat","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:convertFormats"},{"fnName":"and","fnDesc":"and(a, b) -> a && b","category":6,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":2304,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2 (b)","typesAccepted":2304,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"and"},{"fnName":"minString","fnDesc":"Finds the minimum value in a set.","category":7,"numArgs":1,"argDescs":[{"argDesc":"Field name to compute min value of","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"minString"},{"fnName":"strip","fnDesc":"strip(str1) -> Strip leading and trailing whitespace from a string. If delim is specified, strips delim instead","category":4,"numArgs":2,"argDescs":[{"argDesc":"string","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"delim character","typesAccepted":2050,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"strip"},{"fnName":"sum","fnDesc":"Sums the values in a set.","category":7,"numArgs":1,"argDescs":[{"argDesc":"Field name to sum over","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"sum"},{"fnName":"/sharedUDFs/default:weekOfYear","fnDesc":"","category":9,"numArgs":1,"argDescs":[{"argDesc":"dateStr","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:weekOfYear"},{"fnName":"/sharedUDFs/default:convertExcelTime","fnDesc":"","category":9,"numArgs":2,"argDescs":[{"argDesc":"colName","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"outputFormat","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:convertExcelTime"},{"fnName":"find","fnDesc":"find(source, strToFind, beg, end) -> returns the first index of strToFind between indices beg and end in source (case-sensitive). Returns -1 if not found. ","category":4,"numArgs":4,"argDescs":[{"argDesc":"string to search","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"string to find","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"starting index","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"ending index (use 0 to mean no ending index)","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"find"},{"fnName":"string","fnDesc":"string(x) -- Cast x to a string","category":8,"numArgs":1,"argDescs":[{"argDesc":"x","typesAccepted":525310,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"string"},{"fnName":"datePart","fnDesc":"Returns a part of a date\nY = year\nQ = quarter\nM = month\nD = day\nW = day of week","category":10,"numArgs":2,"argDescs":[{"argDesc":"date","typesAccepted":512,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"part","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"datePart"},{"fnName":"lower","fnDesc":"lower(str) -- convert to lower case","category":4,"numArgs":1,"argDescs":[{"argDesc":"string to convert","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"lower"},{"fnName":"pow","fnDesc":"pow(x, y) = x raised to the y power","category":0,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (x)","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2 (y)","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"pow"},{"fnName":"stringsPosCompare","fnDesc":"stringsPosCompare(str1, str2, delim, min_diff, max_diff) -- Splits str1, str2 by delim and returns True if differenceis in between min_diff and max_diff, else False","category":4,"numArgs":5,"argDescs":[{"argDesc":"string1","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"string2","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"delim","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"min_diff(inclusive)","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"max_diff(exclusive), should be greater than min_diff","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"stringsPosCompare"},{"fnName":"contains","fnDesc":"contains(string, pattern, [ignoreCase]) -- does string contain pattern? (case-sensitive)","category":6,"numArgs":3,"argDescs":[{"argDesc":"string to match","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"pattern","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"ignoreCase -- optional (defaults to false)","typesAccepted":2304,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":8,"displayName":"contains"},{"fnName":"maxNumeric","fnDesc":"Finds the maximum value in a set","category":7,"numArgs":1,"argDescs":[{"argDesc":"Field name to compute max value of","typesAccepted":524288,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":19,"displayName":"maxNumeric"},{"fnName":"min","fnDesc":"Finds the minimum value in a set.","category":7,"numArgs":1,"argDescs":[{"argDesc":"Field name to compute min value of","typesAccepted":-2049,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":15,"displayName":"min"},{"fnName":"multNumeric","fnDesc":"multNumeric(a, b, ...) = a + b + ...","category":0,"numArgs":2,"argDescs":[{"argDesc":"Operand 1","typesAccepted":524606,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Additional Operands","typesAccepted":524606,"isSingletonValue":true,"argType":2,"minArgs":1,"maxArgs":1023}],"outputType":19,"displayName":"multNumeric"},{"fnName":"sinh","fnDesc":"sinh(angle) returns the hyperbolic sine of angle, with angle expressed in radians","category":2,"numArgs":1,"argDescs":[{"argDesc":"angle","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"sinh"},{"fnName":"/sharedUDFs/default:genLineNumber","fnDesc":"","category":9,"numArgs":3,"argDescs":[{"argDesc":"fullPath","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"inStream","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"header","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:genLineNumber"},{"fnName":"octetLength","fnDesc":"Returns the byte length of 'expr'","category":1,"numArgs":1,"argDescs":[{"argDesc":"expr","typesAccepted":-2049,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"octetLength"},{"fnName":"/sharedUDFs/default:timeAdd","fnDesc":"","category":9,"numArgs":2,"argDescs":[{"argDesc":"col","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"interval","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:timeAdd"},{"fnName":"asin","fnDesc":"asin(value) returns the arcsine of value, in radians","category":2,"numArgs":1,"argDescs":[{"argDesc":"value","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"asin"},{"fnName":"divNumeric","fnDesc":"divNumeric(a, b) = a / b","category":0,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":524606,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2 (b) -- Cannot be zero!!","typesAccepted":524606,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":19,"displayName":"divNumeric"},{"fnName":"/sharedUDFs/default:coalesce","fnDesc":"","category":9,"numArgs":-1,"argDescs":[{"argDesc":"*args","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:coalesce"},{"fnName":"div","fnDesc":"div(a, b) = a / b","category":0,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2 (b) -- Cannot be zero!!","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"div"},{"fnName":"wordCount","fnDesc":"Get number of words","category":4,"numArgs":1,"argDescs":[{"argDesc":"text","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"wordCount"},{"fnName":"cosh","fnDesc":"cosh(angle) returns the hyperbolic cosine of angle, with angle expressed in radians","category":2,"numArgs":1,"argDescs":[{"argDesc":"angle","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"cosh"},{"fnName":"countChar","fnDesc":"Get number of occurrences of a character","category":4,"numArgs":2,"argDescs":[{"argDesc":"Column name","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Character or String to count occurrences of","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"countChar"},{"fnName":"asinh","fnDesc":"asinh(value) returns the hyperbolic arcsine of value, in radians","category":2,"numArgs":1,"argDescs":[{"argDesc":"value","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"asinh"},{"fnName":"timestamp","fnDesc":"Cast field to a timestamp. Numeric values will be treated as milliseconds since epoch. Strings will be interpreted using default format \"%Y-%m-%dT%H:%M:%SZ\"","category":8,"numArgs":1,"argDescs":[{"argDesc":"field","typesAccepted":525310,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":9,"displayName":"timestamp"},{"fnName":"/sharedUDFs/default:splitWithDelim","fnDesc":"","category":9,"numArgs":3,"argDescs":[{"argDesc":"txt","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"index","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"delim","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:splitWithDelim"},{"fnName":"atanh","fnDesc":"atanh(value) returns the hyperbolic arctangent of value, in radians","category":2,"numArgs":1,"argDescs":[{"argDesc":"value","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"atanh"},{"fnName":"sumInteger","fnDesc":"Sums up all values in a set. Casts input and output to integers. Use this if double is not precise enough.","category":7,"numArgs":1,"argDescs":[{"argDesc":"Field name to sum over","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"sumInteger"},{"fnName":"ceil","fnDesc":"ceil(x) = smallest integer greater than or equal to x","category":0,"numArgs":1,"argDescs":[{"argDesc":"value","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"ceil"},{"fnName":"bitlshift","fnDesc":"bit left-shift: Returns 'a' shifted left by 'b' bits. bitlshift(a, b) = a << b","category":1,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2 (b)","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"bitlshift"},{"fnName":"ifTimestamp","fnDesc":"ifTimestamp(condition, conditionTrueTs, conditionFalseTs) -- if condition (a boolean expression) is true, return conditionTrueTs, otherwise, return conditionFalseTs","category":5,"numArgs":3,"argDescs":[{"argDesc":"condition to test","typesAccepted":524796,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"value returned when condition is true","typesAccepted":2560,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"value returned when condition is false","typesAccepted":2560,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":9,"displayName":"ifTimestamp"},{"fnName":"floatCompare","fnDesc":"Compares floating point numbers with custom precision amount. floatCompare(a,b,d) returns 0 if a is within d of b, returns -1 if a < b, or returns 1 if a > b.","category":0,"numArgs":3,"argDescs":[{"argDesc":"Operand 1","typesAccepted":192,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2","typesAccepted":192,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Precision","typesAccepted":192,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"floatCompare"},{"fnName":"between","fnDesc":"between(x, a, b) -> a <= x <= b","category":6,"numArgs":3,"argDescs":[{"argDesc":"Value to check (x)","typesAccepted":1022,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Left value (a)","typesAccepted":1022,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Right value (b)","typesAccepted":1022,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"between"},{"fnName":"lt","fnDesc":"lt(a, b) -> a < b","category":6,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":525310,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2 (b)","typesAccepted":525310,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"lt"},{"fnName":"dateDiff","fnDesc":"Returns the number of days from start date to end date","category":10,"numArgs":2,"argDescs":[{"argDesc":"start date","typesAccepted":512,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"end date","typesAccepted":512,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"dateDiff"},{"fnName":"gt","fnDesc":"gt(a, b) -> a > b","category":6,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":525310,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2 (b)","typesAccepted":525310,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"gt"},{"fnName":"degrees","fnDesc":"Convert radians to degrees","category":2,"numArgs":1,"argDescs":[{"argDesc":"Radians to convert","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"degrees"},{"fnName":"ifNumeric","fnDesc":"ifNumeric(condition, conditionTrueInt, conditionFalseInt) -- if condition (a boolean expression) is true, return conditionTrueInt, otherwise, return conditionFalseInt","category":5,"numArgs":3,"argDescs":[{"argDesc":"condition to test","typesAccepted":524796,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"value returned when condition is true","typesAccepted":526336,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"value returned when condition is false","typesAccepted":526336,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":19,"displayName":"ifNumeric"},{"fnName":"radians","fnDesc":"Convert degrees to radians","category":2,"numArgs":1,"argDescs":[{"argDesc":"Degrees to convert","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"radians"},{"fnName":"timePart","fnDesc":"Returns a part of a timestamp\nH = hour\nM = minute\nS = second","category":10,"numArgs":2,"argDescs":[{"argDesc":"timestamp","typesAccepted":512,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"part","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"timePart"},{"fnName":"/sharedUDFs/default:md5sum","fnDesc":"","category":9,"numArgs":1,"argDescs":[{"argDesc":"col","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:md5sum"},{"fnName":"/sharedUDFs/default:toUTCTimestamp","fnDesc":"","category":9,"numArgs":2,"argDescs":[{"argDesc":"colName","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"tzstr","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:toUTCTimestamp"},{"fnName":"if","fnDesc":"if(condition, conditionTrueValue, conditionFalseValue) -- if condition (a boolean expression) is true, return conditionTrueValue, otherwise, return conditionFalseValue","category":5,"numArgs":3,"argDescs":[{"argDesc":"condition to test","typesAccepted":524796,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"value returned when condition is true","typesAccepted":2556,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"value returned when condition is false","typesAccepted":2556,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"if"},{"fnName":"addInteger","fnDesc":"addInteger(a, b, ...) = a + b + .... Arguments will first get truncated then add up","category":0,"numArgs":2,"argDescs":[{"argDesc":"Operand 1","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Additional Operands","typesAccepted":508,"isSingletonValue":true,"argType":2,"minArgs":1,"maxArgs":1023}],"outputType":4,"displayName":"addInteger"},{"fnName":"listAgg","fnDesc":"Concatenates all strings of a column in order","category":7,"numArgs":2,"argDescs":[{"argDesc":"Field name to concatenate over","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"delim","typesAccepted":2,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"listAgg"},{"fnName":"maxFloat","fnDesc":"Finds the maximum value in a set","category":7,"numArgs":1,"argDescs":[{"argDesc":"Field name to compute max value of","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"maxFloat"},{"fnName":"eq","fnDesc":"eq(a, b) -> a == b","category":6,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":527358,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2 (b) Must be of same type as operand 1","typesAccepted":527358,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"eq"},{"fnName":"rfind","fnDesc":"rfind(source, strToFind, beg, end) -> returns the last index of strToFind between indexes beg and end in source (case-sensitive). Returns -1 if not found. ","category":4,"numArgs":4,"argDescs":[{"argDesc":"string to search","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"string to find","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"starting index","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"ending index (use 0 to mean no ending index)","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"rfind"},{"fnName":"roundNumeric","fnDesc":"round to a number of decimal places","category":0,"numArgs":2,"argDescs":[{"argDesc":"value","typesAccepted":524606,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"decimal places","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":19,"displayName":"roundNumeric"},{"fnName":"sqrt","fnDesc":"Square root","category":0,"numArgs":1,"argDescs":[{"argDesc":"value","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"sqrt"},{"fnName":"/sharedUDFs/default:parseParquet","fnDesc":"","category":9,"numArgs":5,"argDescs":[{"argDesc":"inputPath","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"inputStream","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"mode","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"columns","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"parquetParser","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:parseParquet"},{"fnName":"ascii","fnDesc":"Returns the numeric value of the first character of 'str'","category":4,"numArgs":1,"argDescs":[{"argDesc":"str","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"ascii"},{"fnName":"initCap","fnDesc":"Returns 'str', with the first letter of each word in uppercase,all other letters in lowercase. Words are delimited by whitespace.","category":4,"numArgs":1,"argDescs":[{"argDesc":"str","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"initCap"},{"fnName":"neq","fnDesc":"neq(a, b) -> a != b","category":6,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":527358,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2 (b) Must be of same type as operand 1","typesAccepted":527358,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"neq"},{"fnName":"findInSet","fnDesc":"findInSet(str,element) -> Find index of element in comma delimited str. 1-indexed.","category":4,"numArgs":2,"argDescs":[{"argDesc":"string","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"element","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"findInSet"},{"fnName":"/sharedUDFs/default:convertFromUnixTS","fnDesc":"","category":9,"numArgs":2,"argDescs":[{"argDesc":"colName","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"outputFormat","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:convertFromUnixTS"},{"fnName":"dateAddYear","fnDesc":"Add a number of years to a date (can be negative)","category":3,"numArgs":3,"argDescs":[{"argDesc":"date","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"input format","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"years","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"dateAddYear"},{"fnName":"maxInteger","fnDesc":"Finds the maximum value in a set","category":7,"numArgs":1,"argDescs":[{"argDesc":"Field name to compute max value of","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"maxInteger"},{"fnName":"or","fnDesc":"or(a, b) -> a || b","category":6,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":2304,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2 (b)","typesAccepted":2304,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"or"},{"fnName":"regex","fnDesc":"regex(string, regex)","category":6,"numArgs":2,"argDescs":[{"argDesc":"String to match","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Regular expression","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"regex"},{"fnName":"startsWith","fnDesc":"startsWith(string, pattern, [ignoreCase]) -- does string start with pattern? (case-sensitive)","category":6,"numArgs":3,"argDescs":[{"argDesc":"string to match","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"pattern","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"ignoreCase -- optional (defaults to false)","typesAccepted":2304,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":8,"displayName":"startsWith"},{"fnName":"ge","fnDesc":"ge(a, b) -> a >= b","category":6,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":525310,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2 (b)","typesAccepted":525310,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"ge"},{"fnName":"substring","fnDesc":"substring(str, startIdx, endIdx) -> creates a substring from <str> that starts at startIdx (inclusive) and ends at endIdx (exclusive). This command is the equivalent of the python command str[startIdx:endIdx]. To get str[startIdx:] equivalent, use substring(str, startIdx, 0). To get str[:endIdx] equivalent, use substring(str, 0, endIdx). To index back from the end of the string, use negative index values.","category":4,"numArgs":3,"argDescs":[{"argDesc":"string to parse","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"start index","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"end index","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"substring"},{"fnName":"addTimeInterval","fnDesc":"Add the specified hour, miniutes, second, interval to start time","category":10,"numArgs":4,"argDescs":[{"argDesc":"start timestamp","typesAccepted":512,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"hour","typesAccepted":316,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"minute","typesAccepted":316,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"second","typesAccepted":316,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":9,"displayName":"addTimeInterval"},{"fnName":"dateAddDay","fnDesc":"Add a number of days to a date (can be negative)","category":3,"numArgs":3,"argDescs":[{"argDesc":"date","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"input format","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"days","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"dateAddDay"},{"fnName":"endsWith","fnDesc":"endsWith(string, pattern, [ignoreCase]) -- does string end with pattern? (case-sensitive)","category":6,"numArgs":3,"argDescs":[{"argDesc":"string to match","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"pattern","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"ignoreCase -- optional (defaults to false)","typesAccepted":2304,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":8,"displayName":"endsWith"},{"fnName":"repeat","fnDesc":"repeat(str, numTimes) -> repeats str for numTimes times. E.g. repeat(\"Hello\", 3) will result in HelloHelloHello.","category":4,"numArgs":2,"argDescs":[{"argDesc":"string to repeat","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"number of times","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"repeat"},{"fnName":"float","fnDesc":"float(x) -- Cast x to a float","category":8,"numArgs":1,"argDescs":[{"argDesc":"x","typesAccepted":525310,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"float"},{"fnName":"sin","fnDesc":"sin(angle) returns the sine of angle, with angle expressed in radians","category":2,"numArgs":1,"argDescs":[{"argDesc":"angle","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"sin"},{"fnName":"dateAddMonth","fnDesc":"Add a number of months to a date (can be negative)","category":3,"numArgs":3,"argDescs":[{"argDesc":"date","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"input format","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"months","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"dateAddMonth"},{"fnName":"ifInt","fnDesc":"ifInt(condition, conditionTrueInt, conditionFalseInt) -- if condition (a boolean expression) is true, return conditionTrueInt, otherwise, return conditionFalseInt","category":5,"numArgs":3,"argDescs":[{"argDesc":"condition to test","typesAccepted":524796,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"value returned when condition is true","typesAccepted":2364,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"value returned when condition is false","typesAccepted":2364,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"ifInt"},{"fnName":"isInteger","fnDesc":"isInteger(fieldName)","category":6,"numArgs":1,"argDescs":[{"argDesc":"fieldName","typesAccepted":-2049,"isSingletonValue":false,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"isInteger"},{"fnName":"isNull","fnDesc":"returns true if the field has a null value","category":6,"numArgs":1,"argDescs":[{"argDesc":"fieldName","typesAccepted":-2049,"isSingletonValue":false,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"isNull"},{"fnName":"/sharedUDFs/default:multiJoin","fnDesc":"","category":9,"numArgs":-1,"argDescs":[{"argDesc":"*arg","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:multiJoin"},{"fnName":"tanh","fnDesc":"tanh(angle) returns the hyperbolic tangent of angle, with angle expressed in radians","category":2,"numArgs":1,"argDescs":[{"argDesc":"angle","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"tanh"},{"fnName":"isBoolean","fnDesc":"isBoolean(fieldName)","category":6,"numArgs":1,"argDescs":[{"argDesc":"fieldName","typesAccepted":-2049,"isSingletonValue":false,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"isBoolean"},{"fnName":"/sharedUDFs/default:dayOfYear","fnDesc":"","category":9,"numArgs":1,"argDescs":[{"argDesc":"dateStr","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:dayOfYear"},{"fnName":"log10","fnDesc":"Logarithm base 10","category":0,"numArgs":1,"argDescs":[{"argDesc":"value","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"log10"},{"fnName":"replace","fnDesc":"replace(origStr, searchStr, replaceStr, [ignoreCase]) -> Search and replace all instances of searchStr appearing in origStr with replaceStr (case-sensitive)","category":4,"numArgs":4,"argDescs":[{"argDesc":"Original string to search","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Search string","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Replace string","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"ignoreCase -- optional (defaults to false)","typesAccepted":2304,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"replace"},{"fnName":"/sharedUDFs/default:genLineNumberWithHeader","fnDesc":"","category":9,"numArgs":2,"argDescs":[{"argDesc":"fullPath","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"inStream","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:genLineNumberWithHeader"},{"fnName":"count","fnDesc":"Counts the occurrences of a field","category":7,"numArgs":1,"argDescs":[{"argDesc":"Field name to count occurrences of","typesAccepted":-2049,"isSingletonValue":false,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"count"},{"fnName":"convertToUnixTS","fnDesc":"Converts a date string to a unix timestamp (UTC)","category":3,"numArgs":2,"argDescs":[{"argDesc":"date","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"input format","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"convertToUnixTS"},{"fnName":"upper","fnDesc":"upper(str) -- convert to upper case","category":4,"numArgs":1,"argDescs":[{"argDesc":"string to convert","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"upper"},{"fnName":"/sharedUDFs/default:ingestFromDB","fnDesc":"","category":9,"numArgs":2,"argDescs":[{"argDesc":"query","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"configStream","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:ingestFromDB"},{"fnName":"bitCount","fnDesc":"bitCount: Returns count of 1's in the binary representation of input value e.g. bitCount(3) = 2","category":1,"numArgs":1,"argDescs":[{"argDesc":"value","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"bitCount"},{"fnName":"dayOfYear","fnDesc":"Returns the day number of the year","category":10,"numArgs":1,"argDescs":[{"argDesc":"date","typesAccepted":512,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"dayOfYear"},{"fnName":"tan","fnDesc":"tan(angle) returns the tangent of angle, with angle expressed in radians","category":2,"numArgs":1,"argDescs":[{"argDesc":"angle","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"tan"},{"fnName":"avgNumeric","fnDesc":"Computes the average (mean) value in a set.","category":7,"numArgs":1,"argDescs":[{"argDesc":"Field name to compute average (mean) value of","typesAccepted":524604,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":19,"displayName":"avgNumeric"},{"fnName":"bitxor","fnDesc":"bitwise exclusive or: Takes two bit patterns and performs the logical exclusive OR operation on each pair of corresponding bits. bitxor(a, b) = a ^ b","category":1,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2 (b)","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"bitxor"},{"fnName":"floor","fnDesc":"floor(x) = largest integer less than or equal to x","category":0,"numArgs":1,"argDescs":[{"argDesc":"value","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"floor"},{"fnName":"isString","fnDesc":"isString(fieldName)","category":6,"numArgs":1,"argDescs":[{"argDesc":"fieldName","typesAccepted":-2049,"isSingletonValue":false,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"isString"},{"fnName":"/sharedUDFs/default:openExcelWithHeader","fnDesc":"","category":9,"numArgs":2,"argDescs":[{"argDesc":"fullPath","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"inStream","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:openExcelWithHeader"},{"fnName":"isInf","fnDesc":"Checks if float value is infinity","category":6,"numArgs":1,"argDescs":[{"argDesc":"Float value to check","typesAccepted":128,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"isInf"},{"fnName":"stringReverse","fnDesc":"Returns 'str' reversed","category":4,"numArgs":1,"argDescs":[{"argDesc":"str","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"stringReverse"},{"fnName":"acos","fnDesc":"acos(value) returns the arccosine of value, in radians","category":2,"numArgs":1,"argDescs":[{"argDesc":"value","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"acos"},{"fnName":"acosh","fnDesc":"acosh(value) returns the hyperbolic arccosine of value, in radians","category":2,"numArgs":1,"argDescs":[{"argDesc":"value","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"acosh"},{"fnName":"formatNumber","fnDesc":"Formats the number 'n' to a format like '#,###,###.##', rounded to 'd' decimal places.","category":4,"numArgs":2,"argDescs":[{"argDesc":"n","typesAccepted":524796,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"d","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"formatNumber"},{"fnName":"monthsBetween","fnDesc":"returns number of months between dates date1 and date2. If date1 is later than date2, then the result is positive. If date1 is earlier than date2, then the result is negative. If date1 and date2 are either the same days of the month or both last days of months, then the result is always an integer. Otherwise calculates the fractional portion of the result based on a 31-day month and considers the difference in time components date1 and date2.","category":10,"numArgs":2,"argDescs":[{"argDesc":"date1","typesAccepted":512,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"date2","typesAccepted":512,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"monthsBetween"},{"fnName":"pi","fnDesc":"returns the value of pi","category":2,"numArgs":0,"argDescs":[],"outputType":7,"displayName":"pi"},{"fnName":"/sharedUDFs/default:normalize","fnDesc":"","category":9,"numArgs":4,"argDescs":[{"argDesc":"colName","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"minValue","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"maxValue","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"numRows","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:normalize"},{"fnName":"minTimestamp","fnDesc":"Finds the minimum value in a set.","category":7,"numArgs":1,"argDescs":[{"argDesc":"Field name to compute min value of","typesAccepted":512,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":9,"displayName":"minTimestamp"},{"fnName":"/sharedUDFs/default:convertToUnixTS","fnDesc":"","category":9,"numArgs":2,"argDescs":[{"argDesc":"colName","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"inputFormat","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:convertToUnixTS"},{"fnName":"atan","fnDesc":"atan(value) returns the arctangent of value, in radians","category":2,"numArgs":1,"argDescs":[{"argDesc":"value","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"atan"},{"fnName":"bitand","fnDesc":"bitwise and: Takes two bit patterns and performs the logical inclusive AND operation on each pair of corresponding bits. bitand(a, b) = a & b","category":1,"numArgs":2,"argDescs":[{"argDesc":"Operand 1 (a)","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Operand 2 (b)","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"bitand"},{"fnName":"dateDiffDay","fnDesc":"Returns the difference in days between dateEnd and dateStart","category":3,"numArgs":3,"argDescs":[{"argDesc":"dateStart","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"dateEnd","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"input format","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"dateDiffDay"},{"fnName":"nextDay","fnDesc":"Returns the first date which is later than start_date and named as indicated.","category":10,"numArgs":2,"argDescs":[{"argDesc":"start_date","typesAccepted":512,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"day_of_week","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":9,"displayName":"nextDay"},{"fnName":"mult","fnDesc":"mult(a, b, ...) = a * b * ...","category":0,"numArgs":2,"argDescs":[{"argDesc":"Operand 1","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Additional Operands","typesAccepted":508,"isSingletonValue":true,"argType":2,"minArgs":1,"maxArgs":1023}],"outputType":7,"displayName":"mult"},{"fnName":"/sharedUDFs/default:convertNewLineJsonToArrayJson","fnDesc":"","category":9,"numArgs":2,"argDescs":[{"argDesc":"fullPath","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"inStream","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:convertNewLineJsonToArrayJson"},{"fnName":"/sharedUDFs/default:extractJsonRecords","fnDesc":"","category":9,"numArgs":3,"argDescs":[{"argDesc":"fullPath","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"inStream","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1},{"argDesc":"structsToExtract","typesAccepted":-2049,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":1,"displayName":"default:extractJsonRecords"},{"fnName":"absInt","fnDesc":"Takes the absolute value of an integer","category":0,"numArgs":1,"argDescs":[{"argDesc":"value","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":4,"displayName":"absInt"},{"fnName":"avg","fnDesc":"Computes the average (mean) value in a set.","category":7,"numArgs":1,"argDescs":[{"argDesc":"Field name to compute average (mean) value of","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":7,"displayName":"avg"},{"fnName":"money","fnDesc":"money(x) -- Cast x to a money","category":8,"numArgs":1,"argDescs":[{"argDesc":"x","typesAccepted":525310,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":19,"displayName":"money"},{"fnName":"maxTimestamp","fnDesc":"Finds the maximum value in a set","category":7,"numArgs":1,"argDescs":[{"argDesc":"Field name to compute max value of","typesAccepted":512,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":9,"displayName":"maxTimestamp"},{"fnName":"round","fnDesc":"round to a number of decimal places (default: 0)","category":0,"numArgs":2,"argDescs":[{"argDesc":"value","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"decimal places","typesAccepted":316,"isSingletonValue":true,"argType":0,"minArgs":0,"maxArgs":1}],"outputType":7,"displayName":"round"},{"fnName":"stringRPad","fnDesc":"Returns 'str', right-padded with 'pad' to a length of 'len'.If 'str' is longer than 'len', the return value is shortenedto 'len' characters","category":4,"numArgs":3,"argDescs":[{"argDesc":"str","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"len","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"pad","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"stringRPad"},{"fnName":"multInteger","fnDesc":"multInteger(a, b, ...) = a * b * .... Arguments will first get truncated","category":0,"numArgs":2,"argDescs":[{"argDesc":"Operand 1","typesAccepted":508,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"Additional Operands","typesAccepted":508,"isSingletonValue":true,"argType":2,"minArgs":1,"maxArgs":1023}],"outputType":4,"displayName":"multInteger"},{"fnName":"isNumeric","fnDesc":"isNumeric(fieldName)","category":6,"numArgs":1,"argDescs":[{"argDesc":"fieldName","typesAccepted":-2049,"isSingletonValue":false,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":8,"displayName":"isNumeric"},{"fnName":"minNumeric","fnDesc":"Finds the minimum value in a set","category":7,"numArgs":1,"argDescs":[{"argDesc":"Field name to compute min value of","typesAccepted":524288,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":19,"displayName":"minNumeric"},{"fnName":"substringIndex","fnDesc":"substringIndex(str, delim, idx) -> returns a substring from <str> before count occurrences of delimiter delim. If count is positive, everything to the left of the final delimiter (counting from left) is returned. If count is negative, everything to the right of the final delimiter (counting from the right) is returned. The search is case sensitive.","category":4,"numArgs":3,"argDescs":[{"argDesc":"string to parse","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"delimiter","typesAccepted":2,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1},{"argDesc":"index","typesAccepted":316,"isSingletonValue":true,"argType":1,"minArgs":1,"maxArgs":1}],"outputType":1,"displayName":"substringIndex"}];