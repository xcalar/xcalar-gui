# Remember to squash all subfolders
# Remember to change include paths in all .html files

import os, shutil, fnmatch, re, tempfile, sys
from glob import glob

def catFilesTogether():
    sortSubfolder = ["assets/js/constructor"]
    jsRoot = "assets/js/"

    for f in os.listdir(jsRoot):
        if os.path.isdir(jsRoot+f):
            subFolder = jsRoot + f
            if f == "thrift" or f == "unused" or f == "worker":
                continue
            print("Squashing all js files in: "+subFolder)
            outFile = open(jsRoot+"/"+f+".js", "w")
            fileList = []
            if subFolder in sortSubfolder:
                print("Sorting: " + subFolder)
                fileList = sorted([y for x in os.walk(subFolder) for y in glob(os.path.join(x[0], "*.js"))])
            else:
                fileList = [y for x in os.walk(subFolder) for y in glob(os.path.join(x[0], "*.js"))]
            for file in fileList:
                if os.path.isfile(file):
                    inFile = open(file, "r")
                    for line in inFile:
                        outFile.write(line+"\n")
            shutil.rmtree(subFolder)
            outFile.close()

def replacePathsInHtml():
    root = "."
    filesToReplace = []
    for rt, subdirs, files in os.walk(root):
        for f in fnmatch.filter(files, "*.html"):
            if rt[-1] == "/":
                htmlCandidate = rt + f
            else:
                htmlCandidate = rt+"/"+f
            if htmlCandidate.find("3rd/") == 0:
                continue
            filesToReplace.append(htmlCandidate)

    for f in filesToReplace:
        print("Replacing includes in: " + f)
        original = open(f, "r")
        fh, abs_path = tempfile.mkstemp()
        newFile = open(abs_path, "w")
        seenBefore = dict()
        for line in original:
            matches = re.match('(.*\/js)(\/[^\/]+)(\/.*)(\.js".*)', line)
            if matches and not matches.group(2) == "/thrift":
                if matches.group(2) in seenBefore:
                    # This file has already been included before.
                    # Just skip this line
                    continue
                else :
                    #replace with new string
                    newString = matches.group(1) + matches.group(2) + \
                                matches.group(4)
                    newFile.write(newString+"\n")
                    seenBefore[matches.group(2)] = True
            else:
                #leave line as is and write
                newFile.write(line)

        os.close(fh)
        original.close()
        os.remove(f)
        newFile.close()
        shutil.move(abs_path, f)

def genSearchInsight(searchLocation):
    print("Generating SearchInsight.htm from " + searchLocation)
    newFile = searchLocation.split(".")[0]+"Insight.htm"
    insertions = "site/partials/mcf.html"
    code = open(searchLocation, "r").read()
    insert = open(insertions, "r").read()
    fout = open(newFile, "w")

    # Read the file and write it out line by line until we see the style tag
    # That's where we insert our stuff

    found = False
    fout.write("<!-- This file is autogenerated. Do not modify -->\n");
    for line in code.split("\r\n"):
        if not found and (line).find("<style>") > -1:
            fout.write(insert+"\n")
            found = True
        fout.write(line+"\n")
    fout.close()

    # Copy to assets
    # shutil.copyfile(newFile, newFile[newFile.find("/")+1:])


if __name__ == "__main__":
    print(sys.argv)
    if len(sys.argv) < 2 or not sys.argv[1] == "debug":
        catFilesTogether()
        replacePathsInHtml()
    searchFilePath = "assets/help/user/Content/Search.htm"
    #if os.path.isfile(searchFilePath):
    genSearchInsight(searchFilePath)
