// source: xcalar/compute/localtypes/Table.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var xcalar_compute_localtypes_Workbook_pb = require('../../../xcalar/compute/localtypes/Workbook_pb.js');
goog.object.extend(proto, xcalar_compute_localtypes_Workbook_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var xcalar_compute_localtypes_ColumnAttribute_pb = require('../../../xcalar/compute/localtypes/ColumnAttribute_pb.js');
goog.object.extend(proto, xcalar_compute_localtypes_ColumnAttribute_pb);
goog.exportSymbol('proto.xcalar.compute.localtypes.Table.IndexRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Table.ListTablesRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Table.ListTablesResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Table.PublishRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Table.PublishResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Table.TableAggregatedStats', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Table.TableAttributes', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Table.TableMetaRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Table.TableMetaResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Table.TableSchema', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Table.TableStatsPerNode', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.Table.UnpublishRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Table.IndexRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Table.IndexRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.Table.IndexRequest.displayName = 'proto.xcalar.compute.localtypes.Table.IndexRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Table.PublishRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Table.PublishRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.Table.PublishRequest.displayName = 'proto.xcalar.compute.localtypes.Table.PublishRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Table.PublishResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Table.PublishResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.Table.PublishResponse.displayName = 'proto.xcalar.compute.localtypes.Table.PublishResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Table.UnpublishRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Table.UnpublishRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.Table.UnpublishRequest.displayName = 'proto.xcalar.compute.localtypes.Table.UnpublishRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Table.ListTablesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Table.ListTablesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.Table.ListTablesRequest.displayName = 'proto.xcalar.compute.localtypes.Table.ListTablesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Table.ListTablesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Table.ListTablesResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Table.ListTablesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.Table.ListTablesResponse.displayName = 'proto.xcalar.compute.localtypes.Table.ListTablesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Table.TableStatsPerNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.Table.TableStatsPerNode.displayName = 'proto.xcalar.compute.localtypes.Table.TableStatsPerNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Table.TableAttributes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Table.TableAttributes.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Table.TableAttributes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.Table.TableAttributes.displayName = 'proto.xcalar.compute.localtypes.Table.TableAttributes';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Table.TableAggregatedStats.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Table.TableAggregatedStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.Table.TableAggregatedStats.displayName = 'proto.xcalar.compute.localtypes.Table.TableAggregatedStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Table.TableSchema = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.Table.TableSchema.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Table.TableSchema, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.Table.TableSchema.displayName = 'proto.xcalar.compute.localtypes.Table.TableSchema';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Table.TableMetaRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Table.TableMetaRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.Table.TableMetaRequest.displayName = 'proto.xcalar.compute.localtypes.Table.TableMetaRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.Table.TableMetaResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.Table.TableMetaResponse.displayName = 'proto.xcalar.compute.localtypes.Table.TableMetaResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Table.IndexRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Table.IndexRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Table.IndexRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.IndexRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keyName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Table.IndexRequest}
 */
proto.xcalar.compute.localtypes.Table.IndexRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Table.IndexRequest;
  return proto.xcalar.compute.localtypes.Table.IndexRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Table.IndexRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Table.IndexRequest}
 */
proto.xcalar.compute.localtypes.Table.IndexRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Table.IndexRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Table.IndexRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Table.IndexRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.IndexRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeyName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Table.IndexRequest.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.Table.IndexRequest} returns this
 */
proto.xcalar.compute.localtypes.Table.IndexRequest.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string key_name = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Table.IndexRequest.prototype.getKeyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.Table.IndexRequest} returns this
 */
proto.xcalar.compute.localtypes.Table.IndexRequest.prototype.setKeyName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Table.PublishRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Table.PublishRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Table.PublishRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.PublishRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f),
    tableName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Table.PublishRequest}
 */
proto.xcalar.compute.localtypes.Table.PublishRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Table.PublishRequest;
  return proto.xcalar.compute.localtypes.Table.PublishRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Table.PublishRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Table.PublishRequest}
 */
proto.xcalar.compute.localtypes.Table.PublishRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Table.PublishRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Table.PublishRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Table.PublishRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.PublishRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 1;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Table.PublishRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 1));
};


/**
 * @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value
 * @return {!proto.xcalar.compute.localtypes.Table.PublishRequest} returns this
*/
proto.xcalar.compute.localtypes.Table.PublishRequest.prototype.setScope = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.Table.PublishRequest} returns this
 */
proto.xcalar.compute.localtypes.Table.PublishRequest.prototype.clearScope = function() {
  return this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Table.PublishRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string table_name = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Table.PublishRequest.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.Table.PublishRequest} returns this
 */
proto.xcalar.compute.localtypes.Table.PublishRequest.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Table.PublishResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Table.PublishResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Table.PublishResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.PublishResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fullyQualTableName: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Table.PublishResponse}
 */
proto.xcalar.compute.localtypes.Table.PublishResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Table.PublishResponse;
  return proto.xcalar.compute.localtypes.Table.PublishResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Table.PublishResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Table.PublishResponse}
 */
proto.xcalar.compute.localtypes.Table.PublishResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullyQualTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Table.PublishResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Table.PublishResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Table.PublishResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.PublishResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFullyQualTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string fully_qual_table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Table.PublishResponse.prototype.getFullyQualTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.Table.PublishResponse} returns this
 */
proto.xcalar.compute.localtypes.Table.PublishResponse.prototype.setFullyQualTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Table.UnpublishRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Table.UnpublishRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Table.UnpublishRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.UnpublishRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f),
    tableName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Table.UnpublishRequest}
 */
proto.xcalar.compute.localtypes.Table.UnpublishRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Table.UnpublishRequest;
  return proto.xcalar.compute.localtypes.Table.UnpublishRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Table.UnpublishRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Table.UnpublishRequest}
 */
proto.xcalar.compute.localtypes.Table.UnpublishRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Table.UnpublishRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Table.UnpublishRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Table.UnpublishRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.UnpublishRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 1;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Table.UnpublishRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 1));
};


/**
 * @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value
 * @return {!proto.xcalar.compute.localtypes.Table.UnpublishRequest} returns this
*/
proto.xcalar.compute.localtypes.Table.UnpublishRequest.prototype.setScope = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.Table.UnpublishRequest} returns this
 */
proto.xcalar.compute.localtypes.Table.UnpublishRequest.prototype.clearScope = function() {
  return this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Table.UnpublishRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string table_name = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Table.UnpublishRequest.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.Table.UnpublishRequest} returns this
 */
proto.xcalar.compute.localtypes.Table.UnpublishRequest.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Table.ListTablesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Table.ListTablesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Table.ListTablesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.ListTablesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f),
    pattern: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Table.ListTablesRequest}
 */
proto.xcalar.compute.localtypes.Table.ListTablesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Table.ListTablesRequest;
  return proto.xcalar.compute.localtypes.Table.ListTablesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Table.ListTablesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Table.ListTablesRequest}
 */
proto.xcalar.compute.localtypes.Table.ListTablesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPattern(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Table.ListTablesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Table.ListTablesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Table.ListTablesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.ListTablesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
  f = message.getPattern();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 1;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Table.ListTablesRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 1));
};


/**
 * @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value
 * @return {!proto.xcalar.compute.localtypes.Table.ListTablesRequest} returns this
*/
proto.xcalar.compute.localtypes.Table.ListTablesRequest.prototype.setScope = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.Table.ListTablesRequest} returns this
 */
proto.xcalar.compute.localtypes.Table.ListTablesRequest.prototype.clearScope = function() {
  return this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Table.ListTablesRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string pattern = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Table.ListTablesRequest.prototype.getPattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.Table.ListTablesRequest} returns this
 */
proto.xcalar.compute.localtypes.Table.ListTablesRequest.prototype.setPattern = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Table.ListTablesResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Table.ListTablesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Table.ListTablesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Table.ListTablesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.ListTablesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f),
    tableNamesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    tableMetaMapMap: (f = msg.getTableMetaMapMap()) ? f.toObject(includeInstance, proto.xcalar.compute.localtypes.Table.TableMetaResponse.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Table.ListTablesResponse}
 */
proto.xcalar.compute.localtypes.Table.ListTablesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Table.ListTablesResponse;
  return proto.xcalar.compute.localtypes.Table.ListTablesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Table.ListTablesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Table.ListTablesResponse}
 */
proto.xcalar.compute.localtypes.Table.ListTablesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTableNames(value);
      break;
    case 3:
      var value = msg.getTableMetaMapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.xcalar.compute.localtypes.Table.TableMetaResponse.deserializeBinaryFromReader, "", new proto.xcalar.compute.localtypes.Table.TableMetaResponse());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Table.ListTablesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Table.ListTablesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Table.ListTablesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.ListTablesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
  f = message.getTableNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTableMetaMapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.xcalar.compute.localtypes.Table.TableMetaResponse.serializeBinaryToWriter);
  }
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 1;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Table.ListTablesResponse.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 1));
};


/**
 * @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value
 * @return {!proto.xcalar.compute.localtypes.Table.ListTablesResponse} returns this
*/
proto.xcalar.compute.localtypes.Table.ListTablesResponse.prototype.setScope = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.Table.ListTablesResponse} returns this
 */
proto.xcalar.compute.localtypes.Table.ListTablesResponse.prototype.clearScope = function() {
  return this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Table.ListTablesResponse.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string table_names = 2;
 * @return {!Array<string>}
 */
proto.xcalar.compute.localtypes.Table.ListTablesResponse.prototype.getTableNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.xcalar.compute.localtypes.Table.ListTablesResponse} returns this
 */
proto.xcalar.compute.localtypes.Table.ListTablesResponse.prototype.setTableNamesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Table.ListTablesResponse} returns this
 */
proto.xcalar.compute.localtypes.Table.ListTablesResponse.prototype.addTableNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.Table.ListTablesResponse} returns this
 */
proto.xcalar.compute.localtypes.Table.ListTablesResponse.prototype.clearTableNamesList = function() {
  return this.setTableNamesList([]);
};


/**
 * map<string, TableMetaResponse> table_meta_map = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.xcalar.compute.localtypes.Table.TableMetaResponse>}
 */
proto.xcalar.compute.localtypes.Table.ListTablesResponse.prototype.getTableMetaMapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.xcalar.compute.localtypes.Table.TableMetaResponse>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.xcalar.compute.localtypes.Table.TableMetaResponse));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.xcalar.compute.localtypes.Table.ListTablesResponse} returns this
 */
proto.xcalar.compute.localtypes.Table.ListTablesResponse.prototype.clearTableMetaMapMap = function() {
  this.getTableMetaMapMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Table.TableStatsPerNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Table.TableStatsPerNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getFieldWithDefault(msg, 1, ""),
    numRows: jspb.Message.getFieldWithDefault(msg, 2, 0),
    numPages: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numSlots: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sizeInBytes: jspb.Message.getFieldWithDefault(msg, 5, 0),
    rowsPerSlotMap: (f = msg.getRowsPerSlotMap()) ? f.toObject(includeInstance, undefined) : [],
    pagesPerSlotMap: (f = msg.getPagesPerSlotMap()) ? f.toObject(includeInstance, undefined) : [],
    pagesConsumedInBytes: jspb.Message.getFieldWithDefault(msg, 8, 0),
    pagesAllocatedInBytes: jspb.Message.getFieldWithDefault(msg, 9, 0),
    pagesSent: jspb.Message.getFieldWithDefault(msg, 10, 0),
    pagesReceived: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Table.TableStatsPerNode}
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Table.TableStatsPerNode;
  return proto.xcalar.compute.localtypes.Table.TableStatsPerNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Table.TableStatsPerNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Table.TableStatsPerNode}
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumRows(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumPages(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumSlots(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSizeInBytes(value);
      break;
    case 6:
      var value = msg.getRowsPerSlotMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint64, null, 0, 0);
         });
      break;
    case 7:
      var value = msg.getPagesPerSlotMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint64, null, 0, 0);
         });
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPagesConsumedInBytes(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPagesAllocatedInBytes(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPagesSent(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPagesReceived(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Table.TableStatsPerNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Table.TableStatsPerNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumRows();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getNumPages();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNumSlots();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSizeInBytes();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getRowsPerSlotMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getPagesPerSlotMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(7, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint64);
  }
  f = message.getPagesConsumedInBytes();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
  f = message.getPagesAllocatedInBytes();
  if (f !== 0) {
    writer.writeUint64(
      9,
      f
    );
  }
  f = message.getPagesSent();
  if (f !== 0) {
    writer.writeUint64(
      10,
      f
    );
  }
  f = message.getPagesReceived();
  if (f !== 0) {
    writer.writeUint64(
      11,
      f
    );
  }
};


/**
 * optional string status = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableStatsPerNode} returns this
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 num_rows = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.getNumRows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableStatsPerNode} returns this
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.setNumRows = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 num_pages = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.getNumPages = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableStatsPerNode} returns this
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.setNumPages = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 num_slots = 4;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.getNumSlots = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableStatsPerNode} returns this
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.setNumSlots = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 size_in_bytes = 5;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.getSizeInBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableStatsPerNode} returns this
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.setSizeInBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * map<uint32, uint64> rows_per_slot = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.getRowsPerSlotMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.xcalar.compute.localtypes.Table.TableStatsPerNode} returns this
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.clearRowsPerSlotMap = function() {
  this.getRowsPerSlotMap().clear();
  return this;};


/**
 * map<uint32, uint64> pages_per_slot = 7;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.getPagesPerSlotMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 7, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.xcalar.compute.localtypes.Table.TableStatsPerNode} returns this
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.clearPagesPerSlotMap = function() {
  this.getPagesPerSlotMap().clear();
  return this;};


/**
 * optional uint64 pages_consumed_in_bytes = 8;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.getPagesConsumedInBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableStatsPerNode} returns this
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.setPagesConsumedInBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional uint64 pages_allocated_in_bytes = 9;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.getPagesAllocatedInBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableStatsPerNode} returns this
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.setPagesAllocatedInBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional uint64 pages_sent = 10;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.getPagesSent = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableStatsPerNode} returns this
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.setPagesSent = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional uint64 pages_received = 11;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.getPagesReceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableStatsPerNode} returns this
 */
proto.xcalar.compute.localtypes.Table.TableStatsPerNode.prototype.setPagesReceived = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Table.TableAttributes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Table.TableAttributes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.toObject = function(includeInstance, msg) {
  var f, obj = {
    tableName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tableId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    xdbId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    state: jspb.Message.getFieldWithDefault(msg, 4, ""),
    pinned: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    shared: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    datasetsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    resultSetIdsList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Table.TableAttributes}
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Table.TableAttributes;
  return proto.xcalar.compute.localtypes.Table.TableAttributes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Table.TableAttributes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Table.TableAttributes}
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTableId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setXdbId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPinned(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShared(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addDatasets(value);
      break;
    case 8:
      var value = /** @type {!Array<number>} */ (reader.readPackedFixed64());
      msg.setResultSetIdsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Table.TableAttributes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Table.TableAttributes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTableId();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getXdbId();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPinned();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getShared();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getDatasetsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getResultSetIdsList();
  if (f.length > 0) {
    writer.writePackedFixed64(
      8,
      f
    );
  }
};


/**
 * optional string table_name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableAttributes} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 table_id = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.getTableId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableAttributes} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.setTableId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 xdb_id = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.getXdbId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableAttributes} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.setXdbId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string state = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableAttributes} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool pinned = 5;
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.getPinned = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableAttributes} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.setPinned = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool shared = 6;
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.getShared = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableAttributes} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.setShared = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * repeated string datasets = 7;
 * @return {!Array<string>}
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.getDatasetsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableAttributes} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.setDatasetsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Table.TableAttributes} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.addDatasets = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.Table.TableAttributes} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.clearDatasetsList = function() {
  return this.setDatasetsList([]);
};


/**
 * repeated fixed64 result_set_ids = 8;
 * @return {!Array<number>}
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.getResultSetIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableAttributes} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.setResultSetIdsList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Table.TableAttributes} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.addResultSetIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.Table.TableAttributes} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAttributes.prototype.clearResultSetIdsList = function() {
  return this.setResultSetIdsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Table.TableAggregatedStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Table.TableAggregatedStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalRecordsCount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    totalSizeInBytes: jspb.Message.getFieldWithDefault(msg, 2, 0),
    rowsPerNodeList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    sizeInBytesPerNodeList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Table.TableAggregatedStats}
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Table.TableAggregatedStats;
  return proto.xcalar.compute.localtypes.Table.TableAggregatedStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Table.TableAggregatedStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Table.TableAggregatedStats}
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalRecordsCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalSizeInBytes(value);
      break;
    case 3:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setRowsPerNodeList(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint64());
      msg.setSizeInBytesPerNodeList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Table.TableAggregatedStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Table.TableAggregatedStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalRecordsCount();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getTotalSizeInBytes();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRowsPerNodeList();
  if (f.length > 0) {
    writer.writePackedUint64(
      3,
      f
    );
  }
  f = message.getSizeInBytesPerNodeList();
  if (f.length > 0) {
    writer.writePackedUint64(
      4,
      f
    );
  }
};


/**
 * optional uint64 total_records_count = 1;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.prototype.getTotalRecordsCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableAggregatedStats} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.prototype.setTotalRecordsCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 total_size_in_bytes = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.prototype.getTotalSizeInBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableAggregatedStats} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.prototype.setTotalSizeInBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated uint64 rows_per_node = 3;
 * @return {!Array<number>}
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.prototype.getRowsPerNodeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableAggregatedStats} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.prototype.setRowsPerNodeList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Table.TableAggregatedStats} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.prototype.addRowsPerNode = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.Table.TableAggregatedStats} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.prototype.clearRowsPerNodeList = function() {
  return this.setRowsPerNodeList([]);
};


/**
 * repeated uint64 size_in_bytes_per_node = 4;
 * @return {!Array<number>}
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.prototype.getSizeInBytesPerNodeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableAggregatedStats} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.prototype.setSizeInBytesPerNodeList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.Table.TableAggregatedStats} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.prototype.addSizeInBytesPerNode = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.Table.TableAggregatedStats} returns this
 */
proto.xcalar.compute.localtypes.Table.TableAggregatedStats.prototype.clearSizeInBytesPerNodeList = function() {
  return this.setSizeInBytesPerNodeList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.Table.TableSchema.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Table.TableSchema.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Table.TableSchema.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Table.TableSchema} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.TableSchema.toObject = function(includeInstance, msg) {
  var f, obj = {
    columnAttributesList: jspb.Message.toObjectList(msg.getColumnAttributesList(),
    xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.toObject, includeInstance),
    keyAttributesList: jspb.Message.toObjectList(msg.getKeyAttributesList(),
    xcalar_compute_localtypes_ColumnAttribute_pb.KeyAttributeProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Table.TableSchema}
 */
proto.xcalar.compute.localtypes.Table.TableSchema.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Table.TableSchema;
  return proto.xcalar.compute.localtypes.Table.TableSchema.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Table.TableSchema} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Table.TableSchema}
 */
proto.xcalar.compute.localtypes.Table.TableSchema.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto;
      reader.readMessage(value,xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.deserializeBinaryFromReader);
      msg.addColumnAttributes(value);
      break;
    case 2:
      var value = new xcalar_compute_localtypes_ColumnAttribute_pb.KeyAttributeProto;
      reader.readMessage(value,xcalar_compute_localtypes_ColumnAttribute_pb.KeyAttributeProto.deserializeBinaryFromReader);
      msg.addKeyAttributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Table.TableSchema.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Table.TableSchema.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Table.TableSchema} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.TableSchema.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColumnAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.serializeBinaryToWriter
    );
  }
  f = message.getKeyAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      xcalar_compute_localtypes_ColumnAttribute_pb.KeyAttributeProto.serializeBinaryToWriter
    );
  }
};


/**
 * repeated xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto column_attributes = 1;
 * @return {!Array<!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto>}
 */
proto.xcalar.compute.localtypes.Table.TableSchema.prototype.getColumnAttributesList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto, 1));
};


/**
 * @param {!Array<!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto>} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableSchema} returns this
*/
proto.xcalar.compute.localtypes.Table.TableSchema.prototype.setColumnAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto}
 */
proto.xcalar.compute.localtypes.Table.TableSchema.prototype.addColumnAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.Table.TableSchema} returns this
 */
proto.xcalar.compute.localtypes.Table.TableSchema.prototype.clearColumnAttributesList = function() {
  return this.setColumnAttributesList([]);
};


/**
 * repeated xcalar.compute.localtypes.ColumnAttribute.KeyAttributeProto key_attributes = 2;
 * @return {!Array<!proto.xcalar.compute.localtypes.ColumnAttribute.KeyAttributeProto>}
 */
proto.xcalar.compute.localtypes.Table.TableSchema.prototype.getKeyAttributesList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.ColumnAttribute.KeyAttributeProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, xcalar_compute_localtypes_ColumnAttribute_pb.KeyAttributeProto, 2));
};


/**
 * @param {!Array<!proto.xcalar.compute.localtypes.ColumnAttribute.KeyAttributeProto>} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableSchema} returns this
*/
proto.xcalar.compute.localtypes.Table.TableSchema.prototype.setKeyAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.ColumnAttribute.KeyAttributeProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.ColumnAttribute.KeyAttributeProto}
 */
proto.xcalar.compute.localtypes.Table.TableSchema.prototype.addKeyAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.xcalar.compute.localtypes.ColumnAttribute.KeyAttributeProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.Table.TableSchema} returns this
 */
proto.xcalar.compute.localtypes.Table.TableSchema.prototype.clearKeyAttributesList = function() {
  return this.setKeyAttributesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Table.TableMetaRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Table.TableMetaRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Table.TableMetaRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.TableMetaRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f),
    tableName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    includePerNodeStats: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Table.TableMetaRequest}
 */
proto.xcalar.compute.localtypes.Table.TableMetaRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Table.TableMetaRequest;
  return proto.xcalar.compute.localtypes.Table.TableMetaRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Table.TableMetaRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Table.TableMetaRequest}
 */
proto.xcalar.compute.localtypes.Table.TableMetaRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTableName(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIncludePerNodeStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Table.TableMetaRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Table.TableMetaRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Table.TableMetaRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.TableMetaRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
  f = message.getTableName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIncludePerNodeStats();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 1;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.Table.TableMetaRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 1));
};


/**
 * @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableMetaRequest} returns this
*/
proto.xcalar.compute.localtypes.Table.TableMetaRequest.prototype.setScope = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.Table.TableMetaRequest} returns this
 */
proto.xcalar.compute.localtypes.Table.TableMetaRequest.prototype.clearScope = function() {
  return this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Table.TableMetaRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string table_name = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Table.TableMetaRequest.prototype.getTableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableMetaRequest} returns this
 */
proto.xcalar.compute.localtypes.Table.TableMetaRequest.prototype.setTableName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bool include_per_node_stats = 3;
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Table.TableMetaRequest.prototype.getIncludePerNodeStats = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableMetaRequest} returns this
 */
proto.xcalar.compute.localtypes.Table.TableMetaRequest.prototype.setIncludePerNodeStats = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.Table.TableMetaResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.Table.TableMetaResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    attributes: (f = msg.getAttributes()) && proto.xcalar.compute.localtypes.Table.TableAttributes.toObject(includeInstance, f),
    schema: (f = msg.getSchema()) && proto.xcalar.compute.localtypes.Table.TableSchema.toObject(includeInstance, f),
    aggregatedStats: (f = msg.getAggregatedStats()) && proto.xcalar.compute.localtypes.Table.TableAggregatedStats.toObject(includeInstance, f),
    statsPerNodeMap: (f = msg.getStatsPerNodeMap()) ? f.toObject(includeInstance, proto.xcalar.compute.localtypes.Table.TableStatsPerNode.toObject) : [],
    status: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.Table.TableMetaResponse}
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.Table.TableMetaResponse;
  return proto.xcalar.compute.localtypes.Table.TableMetaResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.Table.TableMetaResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.Table.TableMetaResponse}
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.Table.TableAttributes;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Table.TableAttributes.deserializeBinaryFromReader);
      msg.setAttributes(value);
      break;
    case 2:
      var value = new proto.xcalar.compute.localtypes.Table.TableSchema;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Table.TableSchema.deserializeBinaryFromReader);
      msg.setSchema(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.Table.TableAggregatedStats;
      reader.readMessage(value,proto.xcalar.compute.localtypes.Table.TableAggregatedStats.deserializeBinaryFromReader);
      msg.setAggregatedStats(value);
      break;
    case 4:
      var value = msg.getStatsPerNodeMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.xcalar.compute.localtypes.Table.TableStatsPerNode.deserializeBinaryFromReader, "", new proto.xcalar.compute.localtypes.Table.TableStatsPerNode());
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.Table.TableMetaResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.Table.TableMetaResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAttributes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.Table.TableAttributes.serializeBinaryToWriter
    );
  }
  f = message.getSchema();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.xcalar.compute.localtypes.Table.TableSchema.serializeBinaryToWriter
    );
  }
  f = message.getAggregatedStats();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.Table.TableAggregatedStats.serializeBinaryToWriter
    );
  }
  f = message.getStatsPerNodeMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.xcalar.compute.localtypes.Table.TableStatsPerNode.serializeBinaryToWriter);
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional TableAttributes attributes = 1;
 * @return {?proto.xcalar.compute.localtypes.Table.TableAttributes}
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.prototype.getAttributes = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Table.TableAttributes} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Table.TableAttributes, 1));
};


/**
 * @param {?proto.xcalar.compute.localtypes.Table.TableAttributes|undefined} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableMetaResponse} returns this
*/
proto.xcalar.compute.localtypes.Table.TableMetaResponse.prototype.setAttributes = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.Table.TableMetaResponse} returns this
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.prototype.clearAttributes = function() {
  return this.setAttributes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.prototype.hasAttributes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TableSchema schema = 2;
 * @return {?proto.xcalar.compute.localtypes.Table.TableSchema}
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.prototype.getSchema = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Table.TableSchema} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Table.TableSchema, 2));
};


/**
 * @param {?proto.xcalar.compute.localtypes.Table.TableSchema|undefined} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableMetaResponse} returns this
*/
proto.xcalar.compute.localtypes.Table.TableMetaResponse.prototype.setSchema = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.Table.TableMetaResponse} returns this
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.prototype.clearSchema = function() {
  return this.setSchema(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.prototype.hasSchema = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TableAggregatedStats aggregated_stats = 3;
 * @return {?proto.xcalar.compute.localtypes.Table.TableAggregatedStats}
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.prototype.getAggregatedStats = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Table.TableAggregatedStats} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.Table.TableAggregatedStats, 3));
};


/**
 * @param {?proto.xcalar.compute.localtypes.Table.TableAggregatedStats|undefined} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableMetaResponse} returns this
*/
proto.xcalar.compute.localtypes.Table.TableMetaResponse.prototype.setAggregatedStats = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.Table.TableMetaResponse} returns this
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.prototype.clearAggregatedStats = function() {
  return this.setAggregatedStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.prototype.hasAggregatedStats = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, TableStatsPerNode> stats_per_node = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.xcalar.compute.localtypes.Table.TableStatsPerNode>}
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.prototype.getStatsPerNodeMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.xcalar.compute.localtypes.Table.TableStatsPerNode>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.xcalar.compute.localtypes.Table.TableStatsPerNode));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.xcalar.compute.localtypes.Table.TableMetaResponse} returns this
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.prototype.clearStatsPerNodeMap = function() {
  this.getStatsPerNodeMap().clear();
  return this;};


/**
 * optional string status = 5;
 * @return {string}
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.Table.TableMetaResponse} returns this
 */
proto.xcalar.compute.localtypes.Table.TableMetaResponse.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


goog.object.extend(exports, proto.xcalar.compute.localtypes.Table);
