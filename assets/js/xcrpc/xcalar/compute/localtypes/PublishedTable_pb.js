// source: xcalar/compute/localtypes/PublishedTable.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var xcalar_compute_localtypes_ColumnAttribute_pb = require('../../../xcalar/compute/localtypes/ColumnAttribute_pb.js');
goog.object.extend(proto, xcalar_compute_localtypes_ColumnAttribute_pb);
var xcalar_compute_localtypes_Workbook_pb = require('../../../xcalar/compute/localtypes/Workbook_pb.js');
goog.object.extend(proto, xcalar_compute_localtypes_Workbook_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.Column', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.GroupByEval', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.MapEval', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.SelectRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.PublishedTable.SelectResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.Column = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.Column, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.PublishedTable.Column.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.Column';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.MapEval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.PublishedTable.MapEval.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.MapEval';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.GroupByEval, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.GroupByEval';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.SelectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.SelectRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.SelectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.SelectResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest.displayName = 'proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.Column.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.Column} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourcename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    destname: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.Column}
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.Column;
  return proto.xcalar.compute.localtypes.PublishedTable.Column.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.Column} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.Column}
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDestname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.Column.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.Column} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourcename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDestname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string sourceName = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.prototype.getSourcename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.Column} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.prototype.setSourcename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string destName = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.prototype.getDestname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.Column} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.Column.prototype.setDestname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.MapEval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.MapEval} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.toObject = function(includeInstance, msg) {
  var f, obj = {
    evalstring: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newfield: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.MapEval}
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.MapEval;
  return proto.xcalar.compute.localtypes.PublishedTable.MapEval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.MapEval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.MapEval}
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvalstring(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewfield(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.MapEval.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.MapEval} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvalstring();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewfield();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string evalString = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.prototype.getEvalstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.MapEval} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.prototype.setEvalstring = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string newField = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.prototype.getNewfield = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.MapEval} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.MapEval.prototype.setNewfield = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.toObject = function(includeInstance, msg) {
  var f, obj = {
    evalstring: jspb.Message.getFieldWithDefault(msg, 1, ""),
    newfield: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval}
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.GroupByEval;
  return proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval}
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEvalstring(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewfield(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvalstring();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNewfield();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string evalString = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.prototype.getEvalstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.prototype.setEvalstring = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string newField = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.prototype.getNewfield = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.prototype.setNewfield = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.repeatedFields_ = [6,7,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dest: jspb.Message.getFieldWithDefault(msg, 2, ""),
    minbatchid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxbatchid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    filterstring: jspb.Message.getFieldWithDefault(msg, 5, ""),
    mapsList: jspb.Message.toObjectList(msg.getMapsList(),
    proto.xcalar.compute.localtypes.PublishedTable.MapEval.toObject, includeInstance),
    groupbysList: jspb.Message.toObjectList(msg.getGroupbysList(),
    proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.toObject, includeInstance),
    groupkeysList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    proto.xcalar.compute.localtypes.PublishedTable.Column.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.SelectRequest;
  return proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDest(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinbatchid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxbatchid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilterstring(value);
      break;
    case 6:
      var value = new proto.xcalar.compute.localtypes.PublishedTable.MapEval;
      reader.readMessage(value,proto.xcalar.compute.localtypes.PublishedTable.MapEval.deserializeBinaryFromReader);
      msg.addMaps(value);
      break;
    case 7:
      var value = new proto.xcalar.compute.localtypes.PublishedTable.GroupByEval;
      reader.readMessage(value,proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.deserializeBinaryFromReader);
      msg.addGroupbys(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addGroupkeys(value);
      break;
    case 9:
      var value = new proto.xcalar.compute.localtypes.PublishedTable.Column;
      reader.readMessage(value,proto.xcalar.compute.localtypes.PublishedTable.Column.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDest();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMinbatchid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getMaxbatchid();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getFilterstring();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMapsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.xcalar.compute.localtypes.PublishedTable.MapEval.serializeBinaryToWriter
    );
  }
  f = message.getGroupbysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.xcalar.compute.localtypes.PublishedTable.GroupByEval.serializeBinaryToWriter
    );
  }
  f = message.getGroupkeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.xcalar.compute.localtypes.PublishedTable.Column.serializeBinaryToWriter
    );
  }
};


/**
 * optional string source = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setSource = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string dest = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getDest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setDest = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 minBatchId = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getMinbatchid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setMinbatchid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 maxBatchId = 4;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getMaxbatchid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setMaxbatchid = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string filterString = 5;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getFilterstring = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setFilterstring = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated MapEval maps = 6;
 * @return {!Array<!proto.xcalar.compute.localtypes.PublishedTable.MapEval>}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getMapsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.PublishedTable.MapEval>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.PublishedTable.MapEval, 6));
};


/**
 * @param {!Array<!proto.xcalar.compute.localtypes.PublishedTable.MapEval>} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} returns this
*/
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setMapsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.MapEval=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.MapEval}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.addMaps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.xcalar.compute.localtypes.PublishedTable.MapEval, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.clearMapsList = function() {
  return this.setMapsList([]);
};


/**
 * repeated GroupByEval groupBys = 7;
 * @return {!Array<!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval>}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getGroupbysList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.PublishedTable.GroupByEval, 7));
};


/**
 * @param {!Array<!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval>} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} returns this
*/
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setGroupbysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.GroupByEval}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.addGroupbys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.xcalar.compute.localtypes.PublishedTable.GroupByEval, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.clearGroupbysList = function() {
  return this.setGroupbysList([]);
};


/**
 * repeated string groupKeys = 8;
 * @return {!Array<string>}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getGroupkeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setGroupkeysList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.addGroupkeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.clearGroupkeysList = function() {
  return this.setGroupkeysList([]);
};


/**
 * repeated Column columns = 9;
 * @return {!Array<!proto.xcalar.compute.localtypes.PublishedTable.Column>}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.PublishedTable.Column>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.PublishedTable.Column, 9));
};


/**
 * @param {!Array<!proto.xcalar.compute.localtypes.PublishedTable.Column>} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} returns this
*/
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.setColumnsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.Column=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.Column}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.xcalar.compute.localtypes.PublishedTable.Column, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectRequest} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectRequest.prototype.clearColumnsList = function() {
  return this.setColumnsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tablename: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectResponse}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.SelectResponse;
  return proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectResponse}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTablename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.SelectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTablename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string tableName = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.prototype.getTablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.SelectResponse} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.SelectResponse.prototype.setTablename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    namepattern: jspb.Message.getFieldWithDefault(msg, 1, ""),
    updatestartbatchid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxupdatecount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxselectcount: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest;
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamepattern(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdatestartbatchid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxupdatecount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxselectcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamepattern();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUpdatestartbatchid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMaxupdatecount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getMaxselectcount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string namePattern = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.getNamepattern = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.setNamepattern = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 updateStartBatchId = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.getUpdatestartbatchid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.setUpdatestartbatchid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 maxUpdateCount = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.getMaxupdatecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.setMaxupdatecount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 maxSelectCount = 4;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.getMaxselectcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesRequest.prototype.setMaxselectcount = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    tablesList: jspb.Message.toObjectList(msg.getTablesList(),
    proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse;
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.deserializeBinaryFromReader);
      msg.addTables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    srctablename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    batchid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    startts: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numrows: jspb.Message.getFieldWithDefault(msg, 4, 0),
    numinserts: jspb.Message.getFieldWithDefault(msg, 5, 0),
    numupdates: jspb.Message.getFieldWithDefault(msg, 6, 0),
    numdeletes: jspb.Message.getFieldWithDefault(msg, 7, 0),
    size: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo;
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrctablename(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBatchid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStartts(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumrows(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNuminserts(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumupdates(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumdeletes(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSrctablename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBatchid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getStartts();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNumrows();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getNuminserts();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getNumupdates();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getNumdeletes();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional string srcTableName = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.getSrctablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.setSrctablename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 batchId = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.getBatchid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.setBatchid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 startTS = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.getStartts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.setStartts = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 numRows = 4;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.getNumrows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.setNumrows = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 numInserts = 5;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.getNuminserts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.setNuminserts = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 numUpdates = 6;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.getNumupdates = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.setNumupdates = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint64 numDeletes = 7;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.getNumdeletes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.setNumdeletes = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint64 size = 8;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    dsttablename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    minbatchid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxbatchid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo;
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDsttablename(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinbatchid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxbatchid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDsttablename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMinbatchid();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMaxbatchid();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string dstTableName = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.prototype.getDsttablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.prototype.setDsttablename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 minBatchId = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.prototype.getMinbatchid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.prototype.setMinbatchid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 maxBatchId = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.prototype.getMaxbatchid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.prototype.setMaxbatchid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.toObject(includeInstance, f),
    uptimems: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sizeestimate: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo;
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto;
      reader.readMessage(value,xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUptimems(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSizeestimate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.serializeBinaryToWriter
    );
  }
  f = message.getUptimems();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getSizeestimate();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto key = 1;
 * @return {?proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.getKey = function() {
  return /** @type{?proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto, 1));
};


/**
 * @param {?proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto|undefined} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo} returns this
*/
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 uptimeMS = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.getUptimems = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.setUptimems = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 sizeEstimate = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.getSizeestimate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.prototype.setSizeestimate = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.repeatedFields_ = [12,13,14,15,16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    numpersistedupdates: jspb.Message.getFieldWithDefault(msg, 2, 0),
    sizetotal: jspb.Message.getFieldWithDefault(msg, 3, 0),
    numrowstotal: jspb.Message.getFieldWithDefault(msg, 4, 0),
    oldestbatchid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    nextbatchid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    srctablename: jspb.Message.getFieldWithDefault(msg, 7, ""),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    restoring: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    useridname: jspb.Message.getFieldWithDefault(msg, 10, ""),
    sessionname: jspb.Message.getFieldWithDefault(msg, 11, ""),
    keysList: jspb.Message.toObjectList(msg.getKeysList(),
    xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.toObject, includeInstance),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.toObject, includeInstance),
    updatesList: jspb.Message.toObjectList(msg.getUpdatesList(),
    proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.toObject, includeInstance),
    selectsList: jspb.Message.toObjectList(msg.getSelectsList(),
    proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.toObject, includeInstance),
    indexesList: jspb.Message.toObjectList(msg.getIndexesList(),
    proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo;
  return proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumpersistedupdates(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSizetotal(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumrowstotal(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOldestbatchid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setNextbatchid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSrctablename(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRestoring(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUseridname(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionname(value);
      break;
    case 12:
      var value = new xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto;
      reader.readMessage(value,xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    case 13:
      var value = new xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto;
      reader.readMessage(value,xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    case 14:
      var value = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.deserializeBinaryFromReader);
      msg.addUpdates(value);
      break;
    case 15:
      var value = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.deserializeBinaryFromReader);
      msg.addSelects(value);
      break;
    case 16:
      var value = new proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo;
      reader.readMessage(value,proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.deserializeBinaryFromReader);
      msg.addIndexes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumpersistedupdates();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSizetotal();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getNumrowstotal();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getOldestbatchid();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getNextbatchid();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getSrctablename();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getRestoring();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getUseridname();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSessionname();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.serializeBinaryToWriter
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto.serializeBinaryToWriter
    );
  }
  f = message.getUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo.serializeBinaryToWriter
    );
  }
  f = message.getSelectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo.serializeBinaryToWriter
    );
  }
  f = message.getIndexesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 numPersistedUpdates = 2;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getNumpersistedupdates = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setNumpersistedupdates = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 sizeTotal = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getSizetotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setSizetotal = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 numRowsTotal = 4;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getNumrowstotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setNumrowstotal = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 oldestBatchId = 5;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getOldestbatchid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setOldestbatchid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 nextBatchId = 6;
 * @return {number}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getNextbatchid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setNextbatchid = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string srcTableName = 7;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getSrctablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setSrctablename = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional bool active = 8;
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool restoring = 9;
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getRestoring = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setRestoring = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional string userIdName = 10;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getUseridname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setUseridname = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string sessionName = 11;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getSessionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setSessionname = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * repeated xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto keys = 12;
 * @return {!Array<!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto>}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getKeysList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto, 12));
};


/**
 * @param {!Array<!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto>} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
*/
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};


/**
 * repeated xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto values = 13;
 * @return {!Array<!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto>}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, xcalar_compute_localtypes_ColumnAttribute_pb.ColumnAttributeProto, 13));
};


/**
 * @param {!Array<!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto>} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
*/
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.xcalar.compute.localtypes.ColumnAttribute.ColumnAttributeProto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};


/**
 * repeated UpdateInfo updates = 14;
 * @return {!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo>}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getUpdatesList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo, 14));
};


/**
 * @param {!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo>} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
*/
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setUpdatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.addUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.UpdateInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.clearUpdatesList = function() {
  return this.setUpdatesList([]);
};


/**
 * repeated SelectInfo selects = 15;
 * @return {!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo>}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getSelectsList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo, 15));
};


/**
 * @param {!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo>} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
*/
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setSelectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.addSelects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.SelectInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.clearSelectsList = function() {
  return this.setSelectsList([]);
};


/**
 * repeated IndexInfo indexes = 16;
 * @return {!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo>}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.getIndexesList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo, 16));
};


/**
 * @param {!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo>} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
*/
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.setIndexesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.addIndexes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.IndexInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo.prototype.clearIndexesList = function() {
  return this.setIndexesList([]);
};


/**
 * repeated TableInfo tables = 1;
 * @return {!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo>}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.prototype.getTablesList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo, 1));
};


/**
 * @param {!Array<!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo>} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse} returns this
*/
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.prototype.setTablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo}
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.prototype.addTables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.TableInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ListTablesResponse.prototype.clearTablesList = function() {
  return this.setTablesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    publishedtablename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest}
 */
proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest;
  return proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest}
 */
proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPublishedtablename(value);
      break;
    case 2:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublishedtablename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
};


/**
 * optional string publishedTableName = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest.prototype.getPublishedtablename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest.prototype.setPublishedtablename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 2;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 2));
};


/**
 * @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest} returns this
*/
proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest.prototype.setScope = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest} returns this
 */
proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest.prototype.clearScope = function() {
  return this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.PublishedTable.ChangeOwnerRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.xcalar.compute.localtypes.PublishedTable);
