// source: xcalar/compute/localtypes/KvStore.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var xcalar_compute_localtypes_Workbook_pb = require('../../../xcalar/compute/localtypes/Workbook_pb.js');
goog.object.extend(proto, xcalar_compute_localtypes_Workbook_pb);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.AppendRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.KeyValue', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.ListRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.ListResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.LookupRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.LookupResponse', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.ScopedKey', null, global);
goog.exportSymbol('proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.ScopedKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.KvStore.ScopedKey.displayName = 'proto.xcalar.compute.localtypes.KvStore.ScopedKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.KeyValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.KvStore.KeyValue.displayName = 'proto.xcalar.compute.localtypes.KvStore.KeyValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.LookupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.KvStore.LookupRequest.displayName = 'proto.xcalar.compute.localtypes.KvStore.LookupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.LookupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.KvStore.LookupResponse.displayName = 'proto.xcalar.compute.localtypes.KvStore.LookupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.displayName = 'proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.displayName = 'proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.displayName = 'proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.AppendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.KvStore.AppendRequest.displayName = 'proto.xcalar.compute.localtypes.KvStore.AppendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.displayName = 'proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.ListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.KvStore.ListRequest.displayName = 'proto.xcalar.compute.localtypes.KvStore.ListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.xcalar.compute.localtypes.KvStore.ListResponse.repeatedFields_, null);
};
goog.inherits(proto.xcalar.compute.localtypes.KvStore.ListResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.xcalar.compute.localtypes.KvStore.ListResponse.displayName = 'proto.xcalar.compute.localtypes.KvStore.ListResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.ScopedKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.ScopedKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.ScopedKey}
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.ScopedKey;
  return proto.xcalar.compute.localtypes.KvStore.ScopedKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.ScopedKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.ScopedKey}
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.KvStore.ScopedKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.ScopedKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 1;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 1));
};


/**
 * @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.ScopedKey} returns this
*/
proto.xcalar.compute.localtypes.KvStore.ScopedKey.prototype.setScope = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.KvStore.ScopedKey} returns this
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.prototype.clearScope = function() {
  return this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.ScopedKey} returns this
 */
proto.xcalar.compute.localtypes.KvStore.ScopedKey.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.KeyValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.KeyValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.KeyValue}
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.KeyValue;
  return proto.xcalar.compute.localtypes.KvStore.KeyValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.KeyValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.KeyValue}
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.KvStore.KeyValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.KeyValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.KeyValue} returns this
 */
proto.xcalar.compute.localtypes.KvStore.KeyValue.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.LookupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.LookupRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.xcalar.compute.localtypes.KvStore.ScopedKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.LookupRequest}
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.LookupRequest;
  return proto.xcalar.compute.localtypes.KvStore.LookupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.LookupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.LookupRequest}
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.KvStore.ScopedKey;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.ScopedKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.KvStore.LookupRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.LookupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.KvStore.ScopedKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional ScopedKey key = 1;
 * @return {?proto.xcalar.compute.localtypes.KvStore.ScopedKey}
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.prototype.getKey = function() {
  return /** @type{?proto.xcalar.compute.localtypes.KvStore.ScopedKey} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.ScopedKey, 1));
};


/**
 * @param {?proto.xcalar.compute.localtypes.KvStore.ScopedKey|undefined} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.LookupRequest} returns this
*/
proto.xcalar.compute.localtypes.KvStore.LookupRequest.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.KvStore.LookupRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.KvStore.LookupRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.LookupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.LookupResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && proto.xcalar.compute.localtypes.KvStore.KeyValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.LookupResponse}
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.LookupResponse;
  return proto.xcalar.compute.localtypes.KvStore.LookupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.LookupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.LookupResponse}
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.KvStore.KeyValue;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.KeyValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.KvStore.LookupResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.LookupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.KvStore.KeyValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional KeyValue value = 1;
 * @return {?proto.xcalar.compute.localtypes.KvStore.KeyValue}
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.prototype.getValue = function() {
  return /** @type{?proto.xcalar.compute.localtypes.KvStore.KeyValue} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.KeyValue, 1));
};


/**
 * @param {?proto.xcalar.compute.localtypes.KvStore.KeyValue|undefined} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.LookupResponse} returns this
*/
proto.xcalar.compute.localtypes.KvStore.LookupResponse.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.KvStore.LookupResponse} returns this
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.KvStore.LookupResponse.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.xcalar.compute.localtypes.KvStore.ScopedKey.toObject(includeInstance, f),
    persist: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    value: (f = msg.getValue()) && proto.xcalar.compute.localtypes.KvStore.KeyValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest;
  return proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.KvStore.ScopedKey;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.ScopedKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPersist(value);
      break;
    case 3:
      var value = new proto.xcalar.compute.localtypes.KvStore.KeyValue;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.KeyValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.KvStore.ScopedKey.serializeBinaryToWriter
    );
  }
  f = message.getPersist();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.xcalar.compute.localtypes.KvStore.KeyValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional ScopedKey key = 1;
 * @return {?proto.xcalar.compute.localtypes.KvStore.ScopedKey}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.getKey = function() {
  return /** @type{?proto.xcalar.compute.localtypes.KvStore.ScopedKey} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.ScopedKey, 1));
};


/**
 * @param {?proto.xcalar.compute.localtypes.KvStore.ScopedKey|undefined} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest} returns this
*/
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool persist = 2;
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.getPersist = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.setPersist = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional KeyValue value = 3;
 * @return {?proto.xcalar.compute.localtypes.KvStore.KeyValue}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.getValue = function() {
  return /** @type{?proto.xcalar.compute.localtypes.KvStore.KeyValue} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.KeyValue, 3));
};


/**
 * @param {?proto.xcalar.compute.localtypes.KvStore.KeyValue|undefined} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest} returns this
*/
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.KvStore.AddOrReplaceRequest.prototype.hasValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.repeatedFields_ = [1,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    keysList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f),
    persist: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.xcalar.compute.localtypes.KvStore.KeyValue.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest}
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest;
  return proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest}
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeys(value);
      break;
    case 2:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPersist(value);
      break;
    case 4:
      var value = new proto.xcalar.compute.localtypes.KvStore.KeyValue;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.KeyValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
  f = message.getPersist();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.xcalar.compute.localtypes.KvStore.KeyValue.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string keys = 1;
 * @return {!Array<string>}
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.prototype.getKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.prototype.setKeysList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.prototype.addKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 2;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 2));
};


/**
 * @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest} returns this
*/
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.prototype.setScope = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.prototype.clearScope = function() {
  return this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool persist = 3;
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.prototype.getPersist = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.prototype.setPersist = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * repeated KeyValue values = 4;
 * @return {!Array<!proto.xcalar.compute.localtypes.KvStore.KeyValue>}
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.xcalar.compute.localtypes.KvStore.KeyValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.xcalar.compute.localtypes.KvStore.KeyValue, 4));
};


/**
 * @param {!Array<!proto.xcalar.compute.localtypes.KvStore.KeyValue>} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest} returns this
*/
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.xcalar.compute.localtypes.KvStore.KeyValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.KvStore.KeyValue}
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.xcalar.compute.localtypes.KvStore.KeyValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.MultiAddOrReplaceRequest.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.xcalar.compute.localtypes.KvStore.ScopedKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest}
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest;
  return proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest}
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.KvStore.ScopedKey;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.ScopedKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.KvStore.ScopedKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional ScopedKey key = 1;
 * @return {?proto.xcalar.compute.localtypes.KvStore.ScopedKey}
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.prototype.getKey = function() {
  return /** @type{?proto.xcalar.compute.localtypes.KvStore.ScopedKey} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.ScopedKey, 1));
};


/**
 * @param {?proto.xcalar.compute.localtypes.KvStore.ScopedKey|undefined} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest} returns this
*/
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.KvStore.DeleteKeyRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.AppendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.AppendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.xcalar.compute.localtypes.KvStore.ScopedKey.toObject(includeInstance, f),
    suffix: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.AppendRequest}
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.AppendRequest;
  return proto.xcalar.compute.localtypes.KvStore.AppendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.AppendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.AppendRequest}
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.xcalar.compute.localtypes.KvStore.ScopedKey;
      reader.readMessage(value,proto.xcalar.compute.localtypes.KvStore.ScopedKey.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSuffix(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.KvStore.AppendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.AppendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.xcalar.compute.localtypes.KvStore.ScopedKey.serializeBinaryToWriter
    );
  }
  f = message.getSuffix();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional ScopedKey key = 1;
 * @return {?proto.xcalar.compute.localtypes.KvStore.ScopedKey}
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.prototype.getKey = function() {
  return /** @type{?proto.xcalar.compute.localtypes.KvStore.ScopedKey} */ (
    jspb.Message.getWrapperField(this, proto.xcalar.compute.localtypes.KvStore.ScopedKey, 1));
};


/**
 * @param {?proto.xcalar.compute.localtypes.KvStore.ScopedKey|undefined} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.AppendRequest} returns this
*/
proto.xcalar.compute.localtypes.KvStore.AppendRequest.prototype.setKey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.KvStore.AppendRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.prototype.clearKey = function() {
  return this.setKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string suffix = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.prototype.getSuffix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.AppendRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.AppendRequest.prototype.setSuffix = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f),
    persist: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    countsecondarypairs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    keycompare: jspb.Message.getFieldWithDefault(msg, 4, ""),
    valuecompare: jspb.Message.getFieldWithDefault(msg, 5, ""),
    valuereplace: jspb.Message.getFieldWithDefault(msg, 6, ""),
    keysecondary: jspb.Message.getFieldWithDefault(msg, 7, ""),
    valuesecondary: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest;
  return proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPersist(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCountsecondarypairs(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeycompare(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setValuecompare(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setValuereplace(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeysecondary(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setValuesecondary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
  f = message.getPersist();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCountsecondarypairs();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getKeycompare();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getValuecompare();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getValuereplace();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getKeysecondary();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getValuesecondary();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 1;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 1));
};


/**
 * @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest} returns this
*/
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.setScope = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.clearScope = function() {
  return this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool persist = 2;
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.getPersist = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.setPersist = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 countSecondaryPairs = 3;
 * @return {number}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.getCountsecondarypairs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.setCountsecondarypairs = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string keyCompare = 4;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.getKeycompare = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.setKeycompare = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string valueCompare = 5;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.getValuecompare = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.setValuecompare = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string valueReplace = 6;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.getValuereplace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.setValuereplace = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string keySecondary = 7;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.getKeysecondary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.setKeysecondary = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string valueSecondary = 8;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.getValuesecondary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.SetIfEqualRequest.prototype.setValuesecondary = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.ListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.ListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    scope: (f = msg.getScope()) && xcalar_compute_localtypes_Workbook_pb.WorkbookScope.toObject(includeInstance, f),
    keyregex: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.ListRequest}
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.ListRequest;
  return proto.xcalar.compute.localtypes.KvStore.ListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.ListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.ListRequest}
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new xcalar_compute_localtypes_Workbook_pb.WorkbookScope;
      reader.readMessage(value,xcalar_compute_localtypes_Workbook_pb.WorkbookScope.deserializeBinaryFromReader);
      msg.setScope(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyregex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.KvStore.ListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.ListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScope();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      xcalar_compute_localtypes_Workbook_pb.WorkbookScope.serializeBinaryToWriter
    );
  }
  f = message.getKeyregex();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional xcalar.compute.localtypes.Workbook.WorkbookScope scope = 1;
 * @return {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope}
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.prototype.getScope = function() {
  return /** @type{?proto.xcalar.compute.localtypes.Workbook.WorkbookScope} */ (
    jspb.Message.getWrapperField(this, xcalar_compute_localtypes_Workbook_pb.WorkbookScope, 1));
};


/**
 * @param {?proto.xcalar.compute.localtypes.Workbook.WorkbookScope|undefined} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.ListRequest} returns this
*/
proto.xcalar.compute.localtypes.KvStore.ListRequest.prototype.setScope = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.xcalar.compute.localtypes.KvStore.ListRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.prototype.clearScope = function() {
  return this.setScope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string keyRegex = 2;
 * @return {string}
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.prototype.getKeyregex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.ListRequest} returns this
 */
proto.xcalar.compute.localtypes.KvStore.ListRequest.prototype.setKeyregex = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.xcalar.compute.localtypes.KvStore.ListResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.xcalar.compute.localtypes.KvStore.ListResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    keysList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.xcalar.compute.localtypes.KvStore.ListResponse}
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.xcalar.compute.localtypes.KvStore.ListResponse;
  return proto.xcalar.compute.localtypes.KvStore.ListResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.xcalar.compute.localtypes.KvStore.ListResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.xcalar.compute.localtypes.KvStore.ListResponse}
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.xcalar.compute.localtypes.KvStore.ListResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.xcalar.compute.localtypes.KvStore.ListResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string keys = 1;
 * @return {!Array<string>}
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.prototype.getKeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.xcalar.compute.localtypes.KvStore.ListResponse} returns this
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.prototype.setKeysList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.xcalar.compute.localtypes.KvStore.ListResponse} returns this
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.prototype.addKeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.xcalar.compute.localtypes.KvStore.ListResponse} returns this
 */
proto.xcalar.compute.localtypes.KvStore.ListResponse.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};


goog.object.extend(exports, proto.xcalar.compute.localtypes.KvStore);
