//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


UdfTypeT = {
  'UdfTypePython' : 1
};
UdfModuleSrcT = function(args) {
  this.type = null;
  this.moduleName = null;
  this.sourceSize = null;
  this.source = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.moduleName !== undefined && args.moduleName !== null) {
      this.moduleName = args.moduleName;
    }
    if (args.sourceSize !== undefined && args.sourceSize !== null) {
      this.sourceSize = args.sourceSize;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
  }
};
UdfModuleSrcT.prototype = {};
UdfModuleSrcT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.moduleName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.sourceSize = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UdfModuleSrcT.prototype.write = function(output) {
  output.writeStructBegin('UdfModuleSrcT');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 1);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.moduleName !== null && this.moduleName !== undefined) {
    output.writeFieldBegin('moduleName', Thrift.Type.STRING, 2);
    output.writeString(this.moduleName);
    output.writeFieldEnd();
  }
  if (this.sourceSize !== null && this.sourceSize !== undefined) {
    output.writeFieldBegin('sourceSize', Thrift.Type.I64, 3);
    output.writeI64(this.sourceSize);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 4);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

