//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


XcalarApiWorkbookScopeT = {
  'XcalarApiWorkbookScopeInvalid' : 0,
  'XcalarApiWorkbookScopeGlobal' : 1,
  'XcalarApiWorkbookScopeUser' : 2,
  'XcalarApiWorkbookScopeSession' : 3
};
XcalarApiTopRequestTypeT = {
  'XcalarApiTopRequestTypeInvalid' : 0,
  'GetCpuAndNetworkTopStats' : 1,
  'GetAllTopStats' : 2
};
RuntimeTypeT = {
  'Latency' : 0,
  'Throughput' : 1,
  'Immediate' : 2,
  'Invalid' : 3
};
XcalarApiException = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
Thrift.inherits(XcalarApiException, Thrift.TException);
XcalarApiException.prototype.name = 'XcalarApiException';
XcalarApiException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiException.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiException');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarEvalArgDescT = function(args) {
  this.argDesc = null;
  this.typesAccepted = null;
  this.isSingletonValue = null;
  this.argType = null;
  this.minArgs = null;
  this.maxArgs = null;
  if (args) {
    if (args.argDesc !== undefined && args.argDesc !== null) {
      this.argDesc = args.argDesc;
    }
    if (args.typesAccepted !== undefined && args.typesAccepted !== null) {
      this.typesAccepted = args.typesAccepted;
    }
    if (args.isSingletonValue !== undefined && args.isSingletonValue !== null) {
      this.isSingletonValue = args.isSingletonValue;
    }
    if (args.argType !== undefined && args.argType !== null) {
      this.argType = args.argType;
    }
    if (args.minArgs !== undefined && args.minArgs !== null) {
      this.minArgs = args.minArgs;
    }
    if (args.maxArgs !== undefined && args.maxArgs !== null) {
      this.maxArgs = args.maxArgs;
    }
  }
};
XcalarEvalArgDescT.prototype = {};
XcalarEvalArgDescT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.argDesc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.typesAccepted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isSingletonValue = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.argType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.minArgs = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.maxArgs = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarEvalArgDescT.prototype.write = function(output) {
  output.writeStructBegin('XcalarEvalArgDescT');
  if (this.argDesc !== null && this.argDesc !== undefined) {
    output.writeFieldBegin('argDesc', Thrift.Type.STRING, 1);
    output.writeString(this.argDesc);
    output.writeFieldEnd();
  }
  if (this.typesAccepted !== null && this.typesAccepted !== undefined) {
    output.writeFieldBegin('typesAccepted', Thrift.Type.I64, 2);
    output.writeI64(this.typesAccepted);
    output.writeFieldEnd();
  }
  if (this.isSingletonValue !== null && this.isSingletonValue !== undefined) {
    output.writeFieldBegin('isSingletonValue', Thrift.Type.BOOL, 3);
    output.writeBool(this.isSingletonValue);
    output.writeFieldEnd();
  }
  if (this.argType !== null && this.argType !== undefined) {
    output.writeFieldBegin('argType', Thrift.Type.I32, 4);
    output.writeI32(this.argType);
    output.writeFieldEnd();
  }
  if (this.minArgs !== null && this.minArgs !== undefined) {
    output.writeFieldBegin('minArgs', Thrift.Type.I32, 5);
    output.writeI32(this.minArgs);
    output.writeFieldEnd();
  }
  if (this.maxArgs !== null && this.maxArgs !== undefined) {
    output.writeFieldBegin('maxArgs', Thrift.Type.I32, 6);
    output.writeI32(this.maxArgs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarEvalFnDescT = function(args) {
  this.fnName = null;
  this.fnDesc = null;
  this.category = null;
  this.numArgs = null;
  this.argDescs = null;
  this.outputType = null;
  if (args) {
    if (args.fnName !== undefined && args.fnName !== null) {
      this.fnName = args.fnName;
    }
    if (args.fnDesc !== undefined && args.fnDesc !== null) {
      this.fnDesc = args.fnDesc;
    }
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
    if (args.numArgs !== undefined && args.numArgs !== null) {
      this.numArgs = args.numArgs;
    }
    if (args.argDescs !== undefined && args.argDescs !== null) {
      this.argDescs = Thrift.copyList(args.argDescs, [XcalarEvalArgDescT]);
    }
    if (args.outputType !== undefined && args.outputType !== null) {
      this.outputType = args.outputType;
    }
  }
};
XcalarEvalFnDescT.prototype = {};
XcalarEvalFnDescT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fnDesc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.category = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.numArgs = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.argDescs = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new XcalarEvalArgDescT();
          elem6.read(input);
          this.argDescs.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.outputType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarEvalFnDescT.prototype.write = function(output) {
  output.writeStructBegin('XcalarEvalFnDescT');
  if (this.fnName !== null && this.fnName !== undefined) {
    output.writeFieldBegin('fnName', Thrift.Type.STRING, 1);
    output.writeString(this.fnName);
    output.writeFieldEnd();
  }
  if (this.fnDesc !== null && this.fnDesc !== undefined) {
    output.writeFieldBegin('fnDesc', Thrift.Type.STRING, 2);
    output.writeString(this.fnDesc);
    output.writeFieldEnd();
  }
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.I32, 3);
    output.writeI32(this.category);
    output.writeFieldEnd();
  }
  if (this.numArgs !== null && this.numArgs !== undefined) {
    output.writeFieldBegin('numArgs', Thrift.Type.I32, 4);
    output.writeI32(this.numArgs);
    output.writeFieldEnd();
  }
  if (this.argDescs !== null && this.argDescs !== undefined) {
    output.writeFieldBegin('argDescs', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.argDescs.length);
    for (var iter7 in this.argDescs)
    {
      if (this.argDescs.hasOwnProperty(iter7))
      {
        iter7 = this.argDescs[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.outputType !== null && this.outputType !== undefined) {
    output.writeFieldBegin('outputType', Thrift.Type.I32, 6);
    output.writeI32(this.outputType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DfFieldAttrHeaderT = function(args) {
  this.name = null;
  this.type = null;
  this.valueArrayIndex = null;
  this.ordering = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.valueArrayIndex !== undefined && args.valueArrayIndex !== null) {
      this.valueArrayIndex = args.valueArrayIndex;
    }
    if (args.ordering !== undefined && args.ordering !== null) {
      this.ordering = args.ordering;
    }
  }
};
DfFieldAttrHeaderT.prototype = {};
DfFieldAttrHeaderT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.valueArrayIndex = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ordering = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DfFieldAttrHeaderT.prototype.write = function(output) {
  output.writeStructBegin('DfFieldAttrHeaderT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.valueArrayIndex !== null && this.valueArrayIndex !== undefined) {
    output.writeFieldBegin('valueArrayIndex', Thrift.Type.I32, 3);
    output.writeI32(this.valueArrayIndex);
    output.writeFieldEnd();
  }
  if (this.ordering !== null && this.ordering !== undefined) {
    output.writeFieldBegin('ordering', Thrift.Type.STRING, 4);
    output.writeString(this.ordering);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTimeT = function(args) {
  this.milliseconds = null;
  if (args) {
    if (args.milliseconds !== undefined && args.milliseconds !== null) {
      this.milliseconds = args.milliseconds;
    }
  }
};
XcalarApiTimeT.prototype = {};
XcalarApiTimeT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.milliseconds = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTimeT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTimeT');
  if (this.milliseconds !== null && this.milliseconds !== undefined) {
    output.writeFieldBegin('milliseconds', Thrift.Type.I64, 1);
    output.writeI64(this.milliseconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiColumnT = function(args) {
  this.sourceColumn = null;
  this.destColumn = null;
  this.columnType = null;
  if (args) {
    if (args.sourceColumn !== undefined && args.sourceColumn !== null) {
      this.sourceColumn = args.sourceColumn;
    }
    if (args.destColumn !== undefined && args.destColumn !== null) {
      this.destColumn = args.destColumn;
    }
    if (args.columnType !== undefined && args.columnType !== null) {
      this.columnType = args.columnType;
    }
  }
};
XcalarApiColumnT.prototype = {};
XcalarApiColumnT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sourceColumn = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.destColumn = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.columnType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiColumnT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiColumnT');
  if (this.sourceColumn !== null && this.sourceColumn !== undefined) {
    output.writeFieldBegin('sourceColumn', Thrift.Type.STRING, 1);
    output.writeString(this.sourceColumn);
    output.writeFieldEnd();
  }
  if (this.destColumn !== null && this.destColumn !== undefined) {
    output.writeFieldBegin('destColumn', Thrift.Type.STRING, 2);
    output.writeString(this.destColumn);
    output.writeFieldEnd();
  }
  if (this.columnType !== null && this.columnType !== undefined) {
    output.writeFieldBegin('columnType', Thrift.Type.STRING, 3);
    output.writeString(this.columnType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFileAttrT = function(args) {
  this.isDirectory = null;
  this.size = null;
  this.mtime = null;
  if (args) {
    if (args.isDirectory !== undefined && args.isDirectory !== null) {
      this.isDirectory = args.isDirectory;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.mtime !== undefined && args.mtime !== null) {
      this.mtime = args.mtime;
    }
  }
};
XcalarApiFileAttrT.prototype = {};
XcalarApiFileAttrT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.isDirectory = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.mtime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFileAttrT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFileAttrT');
  if (this.isDirectory !== null && this.isDirectory !== undefined) {
    output.writeFieldBegin('isDirectory', Thrift.Type.BOOL, 1);
    output.writeBool(this.isDirectory);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 2);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  if (this.mtime !== null && this.mtime !== undefined) {
    output.writeFieldBegin('mtime', Thrift.Type.I64, 3);
    output.writeI64(this.mtime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFileT = function(args) {
  this.attr = null;
  this.name = null;
  if (args) {
    if (args.attr !== undefined && args.attr !== null) {
      this.attr = new XcalarApiFileAttrT(args.attr);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
XcalarApiFileT.prototype = {};
XcalarApiFileT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.attr = new XcalarApiFileAttrT();
        this.attr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFileT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFileT');
  if (this.attr !== null && this.attr !== undefined) {
    output.writeFieldBegin('attr', Thrift.Type.STRUCT, 1);
    this.attr.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListFilesOutputT = function(args) {
  this.numFiles = null;
  this.files = null;
  if (args) {
    if (args.numFiles !== undefined && args.numFiles !== null) {
      this.numFiles = args.numFiles;
    }
    if (args.files !== undefined && args.files !== null) {
      this.files = Thrift.copyList(args.files, [XcalarApiFileT]);
    }
  }
};
XcalarApiListFilesOutputT.prototype = {};
XcalarApiListFilesOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numFiles = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.files = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new XcalarApiFileT();
          elem14.read(input);
          this.files.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListFilesOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListFilesOutputT');
  if (this.numFiles !== null && this.numFiles !== undefined) {
    output.writeFieldBegin('numFiles', Thrift.Type.I64, 1);
    output.writeI64(this.numFiles);
    output.writeFieldEnd();
  }
  if (this.files !== null && this.files !== undefined) {
    output.writeFieldBegin('files', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.files.length);
    for (var iter15 in this.files)
    {
      if (this.files.hasOwnProperty(iter15))
      {
        iter15 = this.files[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListXdfsInputT = function(args) {
  this.fnNamePattern = null;
  this.categoryPattern = null;
  if (args) {
    if (args.fnNamePattern !== undefined && args.fnNamePattern !== null) {
      this.fnNamePattern = args.fnNamePattern;
    }
    if (args.categoryPattern !== undefined && args.categoryPattern !== null) {
      this.categoryPattern = args.categoryPattern;
    }
  }
};
XcalarApiListXdfsInputT.prototype = {};
XcalarApiListXdfsInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fnNamePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.categoryPattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListXdfsInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListXdfsInputT');
  if (this.fnNamePattern !== null && this.fnNamePattern !== undefined) {
    output.writeFieldBegin('fnNamePattern', Thrift.Type.STRING, 1);
    output.writeString(this.fnNamePattern);
    output.writeFieldEnd();
  }
  if (this.categoryPattern !== null && this.categoryPattern !== undefined) {
    output.writeFieldBegin('categoryPattern', Thrift.Type.STRING, 2);
    output.writeString(this.categoryPattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUdfErrorT = function(args) {
  this.message = null;
  this.traceback = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.traceback !== undefined && args.traceback !== null) {
      this.traceback = args.traceback;
    }
  }
};
XcalarApiUdfErrorT.prototype = {};
XcalarApiUdfErrorT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.traceback = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUdfErrorT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUdfErrorT');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.traceback !== null && this.traceback !== undefined) {
    output.writeFieldBegin('traceback', Thrift.Type.STRING, 2);
    output.writeString(this.traceback);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUdfAddUpdateOutputT = function(args) {
  this.status = null;
  this.moduleName = null;
  this.error = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.moduleName !== undefined && args.moduleName !== null) {
      this.moduleName = args.moduleName;
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = new XcalarApiUdfErrorT(args.error);
    }
  }
};
XcalarApiUdfAddUpdateOutputT.prototype = {};
XcalarApiUdfAddUpdateOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.moduleName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new XcalarApiUdfErrorT();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUdfAddUpdateOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUdfAddUpdateOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.moduleName !== null && this.moduleName !== undefined) {
    output.writeFieldBegin('moduleName', Thrift.Type.STRING, 2);
    output.writeString(this.moduleName);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 3);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUdfGetInputT = function(args) {
  this.moduleName = null;
  if (args) {
    if (args.moduleName !== undefined && args.moduleName !== null) {
      this.moduleName = args.moduleName;
    }
  }
};
XcalarApiUdfGetInputT.prototype = {};
XcalarApiUdfGetInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.moduleName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUdfGetInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUdfGetInputT');
  if (this.moduleName !== null && this.moduleName !== undefined) {
    output.writeFieldBegin('moduleName', Thrift.Type.STRING, 1);
    output.writeString(this.moduleName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUdfGetResInputT = function(args) {
  this.scope = null;
  this.moduleName = null;
  if (args) {
    if (args.scope !== undefined && args.scope !== null) {
      this.scope = args.scope;
    }
    if (args.moduleName !== undefined && args.moduleName !== null) {
      this.moduleName = args.moduleName;
    }
  }
};
XcalarApiUdfGetResInputT.prototype = {};
XcalarApiUdfGetResInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.moduleName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUdfGetResInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUdfGetResInputT');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 1);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.moduleName !== null && this.moduleName !== undefined) {
    output.writeFieldBegin('moduleName', Thrift.Type.STRING, 2);
    output.writeString(this.moduleName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUdfGetResOutputT = function(args) {
  this.udfResPath = null;
  if (args) {
    if (args.udfResPath !== undefined && args.udfResPath !== null) {
      this.udfResPath = args.udfResPath;
    }
  }
};
XcalarApiUdfGetResOutputT.prototype = {};
XcalarApiUdfGetResOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.udfResPath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUdfGetResOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUdfGetResOutputT');
  if (this.udfResPath !== null && this.udfResPath !== undefined) {
    output.writeFieldBegin('udfResPath', Thrift.Type.STRING, 1);
    output.writeString(this.udfResPath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUdfDeleteInputT = function(args) {
  this.moduleName = null;
  if (args) {
    if (args.moduleName !== undefined && args.moduleName !== null) {
      this.moduleName = args.moduleName;
    }
  }
};
XcalarApiUdfDeleteInputT.prototype = {};
XcalarApiUdfDeleteInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.moduleName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUdfDeleteInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUdfDeleteInputT');
  if (this.moduleName !== null && this.moduleName !== undefined) {
    output.writeFieldBegin('moduleName', Thrift.Type.STRING, 1);
    output.writeString(this.moduleName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListXdfsOutputT = function(args) {
  this.numXdfs = null;
  this.fnDescs = null;
  if (args) {
    if (args.numXdfs !== undefined && args.numXdfs !== null) {
      this.numXdfs = args.numXdfs;
    }
    if (args.fnDescs !== undefined && args.fnDescs !== null) {
      this.fnDescs = Thrift.copyList(args.fnDescs, [XcalarEvalFnDescT]);
    }
  }
};
XcalarApiListXdfsOutputT.prototype = {};
XcalarApiListXdfsOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numXdfs = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.fnDescs = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new XcalarEvalFnDescT();
          elem22.read(input);
          this.fnDescs.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListXdfsOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListXdfsOutputT');
  if (this.numXdfs !== null && this.numXdfs !== undefined) {
    output.writeFieldBegin('numXdfs', Thrift.Type.I32, 1);
    output.writeI32(this.numXdfs);
    output.writeFieldEnd();
  }
  if (this.fnDescs !== null && this.fnDescs !== undefined) {
    output.writeFieldBegin('fnDescs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.fnDescs.length);
    for (var iter23 in this.fnDescs)
    {
      if (this.fnDescs.hasOwnProperty(iter23))
      {
        iter23 = this.fnDescs[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyValuePairT = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
XcalarApiKeyValuePairT.prototype = {};
XcalarApiKeyValuePairT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyValuePairT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyValuePairT');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyAddOrReplaceInputT = function(args) {
  this.scope = null;
  this.persist = null;
  this.kvPair = null;
  if (args) {
    if (args.scope !== undefined && args.scope !== null) {
      this.scope = args.scope;
    }
    if (args.persist !== undefined && args.persist !== null) {
      this.persist = args.persist;
    }
    if (args.kvPair !== undefined && args.kvPair !== null) {
      this.kvPair = new XcalarApiKeyValuePairT(args.kvPair);
    }
  }
};
XcalarApiKeyAddOrReplaceInputT.prototype = {};
XcalarApiKeyAddOrReplaceInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.persist = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.kvPair = new XcalarApiKeyValuePairT();
        this.kvPair.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyAddOrReplaceInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyAddOrReplaceInputT');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 1);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.persist !== null && this.persist !== undefined) {
    output.writeFieldBegin('persist', Thrift.Type.BOOL, 2);
    output.writeBool(this.persist);
    output.writeFieldEnd();
  }
  if (this.kvPair !== null && this.kvPair !== undefined) {
    output.writeFieldBegin('kvPair', Thrift.Type.STRUCT, 3);
    this.kvPair.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyAppendInputT = function(args) {
  this.scope = null;
  this.key = null;
  this.suffix = null;
  if (args) {
    if (args.scope !== undefined && args.scope !== null) {
      this.scope = args.scope;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.suffix !== undefined && args.suffix !== null) {
      this.suffix = args.suffix;
    }
  }
};
XcalarApiKeyAppendInputT.prototype = {};
XcalarApiKeyAppendInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.suffix = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyAppendInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyAppendInputT');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 1);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.suffix !== null && this.suffix !== undefined) {
    output.writeFieldBegin('suffix', Thrift.Type.STRING, 3);
    output.writeString(this.suffix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeySetIfEqualInputT = function(args) {
  this.scope = null;
  this.persist = null;
  this.countSecondaryPairs = null;
  this.keyCompare = null;
  this.valueCompare = null;
  this.valueReplace = null;
  this.keySecondary = null;
  this.valueSecondary = null;
  if (args) {
    if (args.scope !== undefined && args.scope !== null) {
      this.scope = args.scope;
    }
    if (args.persist !== undefined && args.persist !== null) {
      this.persist = args.persist;
    }
    if (args.countSecondaryPairs !== undefined && args.countSecondaryPairs !== null) {
      this.countSecondaryPairs = args.countSecondaryPairs;
    }
    if (args.keyCompare !== undefined && args.keyCompare !== null) {
      this.keyCompare = args.keyCompare;
    }
    if (args.valueCompare !== undefined && args.valueCompare !== null) {
      this.valueCompare = args.valueCompare;
    }
    if (args.valueReplace !== undefined && args.valueReplace !== null) {
      this.valueReplace = args.valueReplace;
    }
    if (args.keySecondary !== undefined && args.keySecondary !== null) {
      this.keySecondary = args.keySecondary;
    }
    if (args.valueSecondary !== undefined && args.valueSecondary !== null) {
      this.valueSecondary = args.valueSecondary;
    }
  }
};
XcalarApiKeySetIfEqualInputT.prototype = {};
XcalarApiKeySetIfEqualInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.persist = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.countSecondaryPairs = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.keyCompare = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.valueCompare = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.valueReplace = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.keySecondary = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.valueSecondary = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeySetIfEqualInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeySetIfEqualInputT');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 1);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.persist !== null && this.persist !== undefined) {
    output.writeFieldBegin('persist', Thrift.Type.BOOL, 2);
    output.writeBool(this.persist);
    output.writeFieldEnd();
  }
  if (this.countSecondaryPairs !== null && this.countSecondaryPairs !== undefined) {
    output.writeFieldBegin('countSecondaryPairs', Thrift.Type.I32, 3);
    output.writeI32(this.countSecondaryPairs);
    output.writeFieldEnd();
  }
  if (this.keyCompare !== null && this.keyCompare !== undefined) {
    output.writeFieldBegin('keyCompare', Thrift.Type.STRING, 4);
    output.writeString(this.keyCompare);
    output.writeFieldEnd();
  }
  if (this.valueCompare !== null && this.valueCompare !== undefined) {
    output.writeFieldBegin('valueCompare', Thrift.Type.STRING, 5);
    output.writeString(this.valueCompare);
    output.writeFieldEnd();
  }
  if (this.valueReplace !== null && this.valueReplace !== undefined) {
    output.writeFieldBegin('valueReplace', Thrift.Type.STRING, 6);
    output.writeString(this.valueReplace);
    output.writeFieldEnd();
  }
  if (this.keySecondary !== null && this.keySecondary !== undefined) {
    output.writeFieldBegin('keySecondary', Thrift.Type.STRING, 7);
    output.writeString(this.keySecondary);
    output.writeFieldEnd();
  }
  if (this.valueSecondary !== null && this.valueSecondary !== undefined) {
    output.writeFieldBegin('valueSecondary', Thrift.Type.STRING, 8);
    output.writeString(this.valueSecondary);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyLookupInputT = function(args) {
  this.scope = null;
  this.key = null;
  if (args) {
    if (args.scope !== undefined && args.scope !== null) {
      this.scope = args.scope;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
XcalarApiKeyLookupInputT.prototype = {};
XcalarApiKeyLookupInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyLookupInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyLookupInputT');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 1);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyLookupOutputT = function(args) {
  this.value = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
XcalarApiKeyLookupOutputT.prototype = {};
XcalarApiKeyLookupOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyLookupOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyLookupOutputT');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 1);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyListInputT = function(args) {
  this.scope = null;
  this.keyRegex = null;
  if (args) {
    if (args.scope !== undefined && args.scope !== null) {
      this.scope = args.scope;
    }
    if (args.keyRegex !== undefined && args.keyRegex !== null) {
      this.keyRegex = args.keyRegex;
    }
  }
};
XcalarApiKeyListInputT.prototype = {};
XcalarApiKeyListInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.keyRegex = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyListInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyListInputT');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 1);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.keyRegex !== null && this.keyRegex !== undefined) {
    output.writeFieldBegin('keyRegex', Thrift.Type.STRING, 2);
    output.writeString(this.keyRegex);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyListOutputT = function(args) {
  this.numKeys = null;
  this.keys = null;
  if (args) {
    if (args.numKeys !== undefined && args.numKeys !== null) {
      this.numKeys = args.numKeys;
    }
    if (args.keys !== undefined && args.keys !== null) {
      this.keys = Thrift.copyList(args.keys, [null]);
    }
  }
};
XcalarApiKeyListOutputT.prototype = {};
XcalarApiKeyListOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numKeys = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.keys = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readString().value;
          this.keys.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyListOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyListOutputT');
  if (this.numKeys !== null && this.numKeys !== undefined) {
    output.writeFieldBegin('numKeys', Thrift.Type.I32, 1);
    output.writeI32(this.numKeys);
    output.writeFieldEnd();
  }
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.keys.length);
    for (var iter31 in this.keys)
    {
      if (this.keys.hasOwnProperty(iter31))
      {
        iter31 = this.keys[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyDeleteInputT = function(args) {
  this.scope = null;
  this.key = null;
  if (args) {
    if (args.scope !== undefined && args.scope !== null) {
      this.scope = args.scope;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
  }
};
XcalarApiKeyDeleteInputT.prototype = {};
XcalarApiKeyDeleteInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.scope = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyDeleteInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyDeleteInputT');
  if (this.scope !== null && this.scope !== undefined) {
    output.writeFieldBegin('scope', Thrift.Type.I32, 1);
    output.writeI32(this.scope);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 2);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTableInputT = function(args) {
  this.tableName = null;
  this.tableId = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.tableId !== undefined && args.tableId !== null) {
      this.tableId = args.tableId;
    }
  }
};
XcalarApiTableInputT.prototype = {};
XcalarApiTableInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTableInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTableInputT');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.tableId !== null && this.tableId !== undefined) {
    output.writeFieldBegin('tableId', Thrift.Type.STRING, 2);
    output.writeString(this.tableId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataSourceArgsT = function(args) {
  this.targetName = null;
  this.path = null;
  this.fileNamePattern = null;
  this.recursive = null;
  if (args) {
    if (args.targetName !== undefined && args.targetName !== null) {
      this.targetName = args.targetName;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
    if (args.fileNamePattern !== undefined && args.fileNamePattern !== null) {
      this.fileNamePattern = args.fileNamePattern;
    }
    if (args.recursive !== undefined && args.recursive !== null) {
      this.recursive = args.recursive;
    }
  }
};
DataSourceArgsT.prototype = {};
DataSourceArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.targetName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fileNamePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.recursive = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataSourceArgsT.prototype.write = function(output) {
  output.writeStructBegin('DataSourceArgsT');
  if (this.targetName !== null && this.targetName !== undefined) {
    output.writeFieldBegin('targetName', Thrift.Type.STRING, 1);
    output.writeString(this.targetName);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 2);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.fileNamePattern !== null && this.fileNamePattern !== undefined) {
    output.writeFieldBegin('fileNamePattern', Thrift.Type.STRING, 3);
    output.writeString(this.fileNamePattern);
    output.writeFieldEnd();
  }
  if (this.recursive !== null && this.recursive !== undefined) {
    output.writeFieldBegin('recursive', Thrift.Type.BOOL, 4);
    output.writeBool(this.recursive);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ParseArgsT = function(args) {
  this.parserFnName = null;
  this.parserArgJson = null;
  this.fileNameFieldName = null;
  this.recordNumFieldName = null;
  this.allowRecordErrors = null;
  this.allowFileErrors = null;
  this.schema = null;
  if (args) {
    if (args.parserFnName !== undefined && args.parserFnName !== null) {
      this.parserFnName = args.parserFnName;
    }
    if (args.parserArgJson !== undefined && args.parserArgJson !== null) {
      this.parserArgJson = args.parserArgJson;
    }
    if (args.fileNameFieldName !== undefined && args.fileNameFieldName !== null) {
      this.fileNameFieldName = args.fileNameFieldName;
    }
    if (args.recordNumFieldName !== undefined && args.recordNumFieldName !== null) {
      this.recordNumFieldName = args.recordNumFieldName;
    }
    if (args.allowRecordErrors !== undefined && args.allowRecordErrors !== null) {
      this.allowRecordErrors = args.allowRecordErrors;
    }
    if (args.allowFileErrors !== undefined && args.allowFileErrors !== null) {
      this.allowFileErrors = args.allowFileErrors;
    }
    if (args.schema !== undefined && args.schema !== null) {
      this.schema = Thrift.copyList(args.schema, [XcalarApiColumnT]);
    }
  }
};
ParseArgsT.prototype = {};
ParseArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.parserFnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parserArgJson = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fileNameFieldName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.recordNumFieldName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.allowRecordErrors = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.allowFileErrors = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.schema = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new XcalarApiColumnT();
          elem38.read(input);
          this.schema.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ParseArgsT.prototype.write = function(output) {
  output.writeStructBegin('ParseArgsT');
  if (this.parserFnName !== null && this.parserFnName !== undefined) {
    output.writeFieldBegin('parserFnName', Thrift.Type.STRING, 1);
    output.writeString(this.parserFnName);
    output.writeFieldEnd();
  }
  if (this.parserArgJson !== null && this.parserArgJson !== undefined) {
    output.writeFieldBegin('parserArgJson', Thrift.Type.STRING, 2);
    output.writeString(this.parserArgJson);
    output.writeFieldEnd();
  }
  if (this.fileNameFieldName !== null && this.fileNameFieldName !== undefined) {
    output.writeFieldBegin('fileNameFieldName', Thrift.Type.STRING, 3);
    output.writeString(this.fileNameFieldName);
    output.writeFieldEnd();
  }
  if (this.recordNumFieldName !== null && this.recordNumFieldName !== undefined) {
    output.writeFieldBegin('recordNumFieldName', Thrift.Type.STRING, 4);
    output.writeString(this.recordNumFieldName);
    output.writeFieldEnd();
  }
  if (this.allowRecordErrors !== null && this.allowRecordErrors !== undefined) {
    output.writeFieldBegin('allowRecordErrors', Thrift.Type.BOOL, 5);
    output.writeBool(this.allowRecordErrors);
    output.writeFieldEnd();
  }
  if (this.allowFileErrors !== null && this.allowFileErrors !== undefined) {
    output.writeFieldBegin('allowFileErrors', Thrift.Type.BOOL, 6);
    output.writeBool(this.allowFileErrors);
    output.writeFieldEnd();
  }
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.schema.length);
    for (var iter39 in this.schema)
    {
      if (this.schema.hasOwnProperty(iter39))
      {
        iter39 = this.schema[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDfLoadArgsT = function(args) {
  this.sourceArgsList = null;
  this.parseArgs = null;
  this.size = null;
  if (args) {
    if (args.sourceArgsList !== undefined && args.sourceArgsList !== null) {
      this.sourceArgsList = Thrift.copyList(args.sourceArgsList, [DataSourceArgsT]);
    }
    if (args.parseArgs !== undefined && args.parseArgs !== null) {
      this.parseArgs = new ParseArgsT(args.parseArgs);
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
  }
};
XcalarApiDfLoadArgsT.prototype = {};
XcalarApiDfLoadArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.sourceArgsList = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new DataSourceArgsT();
          elem46.read(input);
          this.sourceArgsList.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.parseArgs = new ParseArgsT();
        this.parseArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDfLoadArgsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDfLoadArgsT');
  if (this.sourceArgsList !== null && this.sourceArgsList !== undefined) {
    output.writeFieldBegin('sourceArgsList', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.sourceArgsList.length);
    for (var iter47 in this.sourceArgsList)
    {
      if (this.sourceArgsList.hasOwnProperty(iter47))
      {
        iter47 = this.sourceArgsList[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.parseArgs !== null && this.parseArgs !== undefined) {
    output.writeFieldBegin('parseArgs', Thrift.Type.STRUCT, 2);
    this.parseArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 3);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetT = function(args) {
  this.loadArgs = null;
  this.datasetId = null;
  this.name = null;
  this.loadIsComplete = null;
  this.isListable = null;
  this.udfName = null;
  if (args) {
    if (args.loadArgs !== undefined && args.loadArgs !== null) {
      this.loadArgs = new XcalarApiDfLoadArgsT(args.loadArgs);
    }
    if (args.datasetId !== undefined && args.datasetId !== null) {
      this.datasetId = args.datasetId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.loadIsComplete !== undefined && args.loadIsComplete !== null) {
      this.loadIsComplete = args.loadIsComplete;
    }
    if (args.isListable !== undefined && args.isListable !== null) {
      this.isListable = args.isListable;
    }
    if (args.udfName !== undefined && args.udfName !== null) {
      this.udfName = args.udfName;
    }
  }
};
XcalarApiDatasetT.prototype = {};
XcalarApiDatasetT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loadArgs = new XcalarApiDfLoadArgsT();
        this.loadArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.datasetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.loadIsComplete = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isListable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.udfName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDatasetT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDatasetT');
  if (this.loadArgs !== null && this.loadArgs !== undefined) {
    output.writeFieldBegin('loadArgs', Thrift.Type.STRUCT, 1);
    this.loadArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.datasetId !== null && this.datasetId !== undefined) {
    output.writeFieldBegin('datasetId', Thrift.Type.STRING, 2);
    output.writeString(this.datasetId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.loadIsComplete !== null && this.loadIsComplete !== undefined) {
    output.writeFieldBegin('loadIsComplete', Thrift.Type.BOOL, 4);
    output.writeBool(this.loadIsComplete);
    output.writeFieldEnd();
  }
  if (this.isListable !== null && this.isListable !== undefined) {
    output.writeFieldBegin('isListable', Thrift.Type.BOOL, 5);
    output.writeBool(this.isListable);
    output.writeFieldEnd();
  }
  if (this.udfName !== null && this.udfName !== undefined) {
    output.writeFieldBegin('udfName', Thrift.Type.STRING, 6);
    output.writeString(this.udfName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiColumnInfoT = function(args) {
  this.name = null;
  this.type = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
XcalarApiColumnInfoT.prototype = {};
XcalarApiColumnInfoT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiColumnInfoT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiColumnInfoT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetsInfoT = function(args) {
  this.datasetName = null;
  this.downSampled = null;
  this.totalNumErrors = null;
  this.datasetSize = null;
  this.numColumns = null;
  this.columns = null;
  if (args) {
    if (args.datasetName !== undefined && args.datasetName !== null) {
      this.datasetName = args.datasetName;
    }
    if (args.downSampled !== undefined && args.downSampled !== null) {
      this.downSampled = args.downSampled;
    }
    if (args.totalNumErrors !== undefined && args.totalNumErrors !== null) {
      this.totalNumErrors = args.totalNumErrors;
    }
    if (args.datasetSize !== undefined && args.datasetSize !== null) {
      this.datasetSize = args.datasetSize;
    }
    if (args.numColumns !== undefined && args.numColumns !== null) {
      this.numColumns = args.numColumns;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [XcalarApiColumnInfoT]);
    }
  }
};
XcalarApiDatasetsInfoT.prototype = {};
XcalarApiDatasetsInfoT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.datasetName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.downSampled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.totalNumErrors = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.datasetSize = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.numColumns = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.columns = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new XcalarApiColumnInfoT();
          elem54.read(input);
          this.columns.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDatasetsInfoT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDatasetsInfoT');
  if (this.datasetName !== null && this.datasetName !== undefined) {
    output.writeFieldBegin('datasetName', Thrift.Type.STRING, 1);
    output.writeString(this.datasetName);
    output.writeFieldEnd();
  }
  if (this.downSampled !== null && this.downSampled !== undefined) {
    output.writeFieldBegin('downSampled', Thrift.Type.BOOL, 2);
    output.writeBool(this.downSampled);
    output.writeFieldEnd();
  }
  if (this.totalNumErrors !== null && this.totalNumErrors !== undefined) {
    output.writeFieldBegin('totalNumErrors', Thrift.Type.I64, 3);
    output.writeI64(this.totalNumErrors);
    output.writeFieldEnd();
  }
  if (this.datasetSize !== null && this.datasetSize !== undefined) {
    output.writeFieldBegin('datasetSize', Thrift.Type.I64, 4);
    output.writeI64(this.datasetSize);
    output.writeFieldEnd();
  }
  if (this.numColumns !== null && this.numColumns !== undefined) {
    output.writeFieldBegin('numColumns', Thrift.Type.I64, 5);
    output.writeI64(this.numColumns);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter55 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter55))
      {
        iter55 = this.columns[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUdfLoadArgsT = function(args) {
  this.fullyQualifiedFnName = null;
  if (args) {
    if (args.fullyQualifiedFnName !== undefined && args.fullyQualifiedFnName !== null) {
      this.fullyQualifiedFnName = args.fullyQualifiedFnName;
    }
  }
};
XcalarApiUdfLoadArgsT.prototype = {};
XcalarApiUdfLoadArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fullyQualifiedFnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUdfLoadArgsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUdfLoadArgsT');
  if (this.fullyQualifiedFnName !== null && this.fullyQualifiedFnName !== undefined) {
    output.writeFieldBegin('fullyQualifiedFnName', Thrift.Type.STRING, 1);
    output.writeString(this.fullyQualifiedFnName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListFilesInputT = function(args) {
  this.sourceArgs = null;
  if (args) {
    if (args.sourceArgs !== undefined && args.sourceArgs !== null) {
      this.sourceArgs = new DataSourceArgsT(args.sourceArgs);
    }
  }
};
XcalarApiListFilesInputT.prototype = {};
XcalarApiListFilesInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sourceArgs = new DataSourceArgsT();
        this.sourceArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListFilesInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListFilesInputT');
  if (this.sourceArgs !== null && this.sourceArgs !== undefined) {
    output.writeFieldBegin('sourceArgs', Thrift.Type.STRUCT, 1);
    this.sourceArgs.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListExportTargetsInputT = function(args) {
  this.targetTypePattern = null;
  this.targetNamePattern = null;
  if (args) {
    if (args.targetTypePattern !== undefined && args.targetTypePattern !== null) {
      this.targetTypePattern = args.targetTypePattern;
    }
    if (args.targetNamePattern !== undefined && args.targetNamePattern !== null) {
      this.targetNamePattern = args.targetNamePattern;
    }
  }
};
XcalarApiListExportTargetsInputT.prototype = {};
XcalarApiListExportTargetsInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.targetTypePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.targetNamePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListExportTargetsInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListExportTargetsInputT');
  if (this.targetTypePattern !== null && this.targetTypePattern !== undefined) {
    output.writeFieldBegin('targetTypePattern', Thrift.Type.STRING, 1);
    output.writeString(this.targetTypePattern);
    output.writeFieldEnd();
  }
  if (this.targetNamePattern !== null && this.targetNamePattern !== undefined) {
    output.writeFieldBegin('targetNamePattern', Thrift.Type.STRING, 2);
    output.writeString(this.targetNamePattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListExportTargetsOutputT = function(args) {
  this.numTargets = null;
  this.targets = null;
  if (args) {
    if (args.numTargets !== undefined && args.numTargets !== null) {
      this.numTargets = args.numTargets;
    }
    if (args.targets !== undefined && args.targets !== null) {
      this.targets = Thrift.copyList(args.targets, [ExExportTargetT]);
    }
  }
};
XcalarApiListExportTargetsOutputT.prototype = {};
XcalarApiListExportTargetsOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numTargets = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.targets = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ExExportTargetT();
          elem62.read(input);
          this.targets.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListExportTargetsOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListExportTargetsOutputT');
  if (this.numTargets !== null && this.numTargets !== undefined) {
    output.writeFieldBegin('numTargets', Thrift.Type.I64, 1);
    output.writeI64(this.numTargets);
    output.writeFieldEnd();
  }
  if (this.targets !== null && this.targets !== undefined) {
    output.writeFieldBegin('targets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.targets.length);
    for (var iter63 in this.targets)
    {
      if (this.targets.hasOwnProperty(iter63))
      {
        iter63 = this.targets[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiExportColumnT = function(args) {
  this.columnName = null;
  this.headerName = null;
  if (args) {
    if (args.columnName !== undefined && args.columnName !== null) {
      this.columnName = args.columnName;
    }
    if (args.headerName !== undefined && args.headerName !== null) {
      this.headerName = args.headerName;
    }
  }
};
XcalarApiExportColumnT.prototype = {};
XcalarApiExportColumnT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.columnName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.headerName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiExportColumnT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiExportColumnT');
  if (this.columnName !== null && this.columnName !== undefined) {
    output.writeFieldBegin('columnName', Thrift.Type.STRING, 1);
    output.writeString(this.columnName);
    output.writeFieldEnd();
  }
  if (this.headerName !== null && this.headerName !== undefined) {
    output.writeFieldBegin('headerName', Thrift.Type.STRING, 2);
    output.writeString(this.headerName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiExportInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.columns = null;
  this.driverName = null;
  this.driverParams = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.dest !== undefined && args.dest !== null) {
      this.dest = args.dest;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [XcalarApiExportColumnT]);
    }
    if (args.driverName !== undefined && args.driverName !== null) {
      this.driverName = args.driverName;
    }
    if (args.driverParams !== undefined && args.driverParams !== null) {
      this.driverParams = args.driverParams;
    }
  }
};
XcalarApiExportInputT.prototype = {};
XcalarApiExportInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.columns = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new XcalarApiExportColumnT();
          elem70.read(input);
          this.columns.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.driverName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.driverParams = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiExportInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiExportInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter71 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter71))
      {
        iter71 = this.columns[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.driverName !== null && this.driverName !== undefined) {
    output.writeFieldBegin('driverName', Thrift.Type.STRING, 4);
    output.writeString(this.driverName);
    output.writeFieldEnd();
  }
  if (this.driverParams !== null && this.driverParams !== undefined) {
    output.writeFieldBegin('driverParams', Thrift.Type.STRING, 5);
    output.writeString(this.driverParams);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAppSetInputT = function(args) {
  this.name = null;
  this.hostType = null;
  this.duty = null;
  this.execStr = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.hostType !== undefined && args.hostType !== null) {
      this.hostType = args.hostType;
    }
    if (args.duty !== undefined && args.duty !== null) {
      this.duty = args.duty;
    }
    if (args.execStr !== undefined && args.execStr !== null) {
      this.execStr = args.execStr;
    }
  }
};
XcalarApiAppSetInputT.prototype = {};
XcalarApiAppSetInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.hostType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.duty = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.execStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAppSetInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAppSetInputT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.hostType !== null && this.hostType !== undefined) {
    output.writeFieldBegin('hostType', Thrift.Type.STRING, 2);
    output.writeString(this.hostType);
    output.writeFieldEnd();
  }
  if (this.duty !== null && this.duty !== undefined) {
    output.writeFieldBegin('duty', Thrift.Type.STRING, 3);
    output.writeString(this.duty);
    output.writeFieldEnd();
  }
  if (this.execStr !== null && this.execStr !== undefined) {
    output.writeFieldBegin('execStr', Thrift.Type.STRING, 4);
    output.writeString(this.execStr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAppRunInputT = function(args) {
  this.name = null;
  this.isGlobal = null;
  this.inStr = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.isGlobal !== undefined && args.isGlobal !== null) {
      this.isGlobal = args.isGlobal;
    }
    if (args.inStr !== undefined && args.inStr !== null) {
      this.inStr = args.inStr;
    }
  }
};
XcalarApiAppRunInputT.prototype = {};
XcalarApiAppRunInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isGlobal = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.inStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAppRunInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAppRunInputT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.isGlobal !== null && this.isGlobal !== undefined) {
    output.writeFieldBegin('isGlobal', Thrift.Type.BOOL, 2);
    output.writeBool(this.isGlobal);
    output.writeFieldEnd();
  }
  if (this.inStr !== null && this.inStr !== undefined) {
    output.writeFieldBegin('inStr', Thrift.Type.STRING, 4);
    output.writeString(this.inStr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAppRunOutputT = function(args) {
  this.appGroupId = null;
  if (args) {
    if (args.appGroupId !== undefined && args.appGroupId !== null) {
      this.appGroupId = args.appGroupId;
    }
  }
};
XcalarApiAppRunOutputT.prototype = {};
XcalarApiAppRunOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.appGroupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAppRunOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAppRunOutputT');
  if (this.appGroupId !== null && this.appGroupId !== undefined) {
    output.writeFieldBegin('appGroupId', Thrift.Type.STRING, 1);
    output.writeString(this.appGroupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAppReapInputT = function(args) {
  this.appGroupId = null;
  this.cancel = null;
  if (args) {
    if (args.appGroupId !== undefined && args.appGroupId !== null) {
      this.appGroupId = args.appGroupId;
    }
    if (args.cancel !== undefined && args.cancel !== null) {
      this.cancel = args.cancel;
    }
  }
};
XcalarApiAppReapInputT.prototype = {};
XcalarApiAppReapInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.appGroupId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.cancel = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAppReapInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAppReapInputT');
  if (this.appGroupId !== null && this.appGroupId !== undefined) {
    output.writeFieldBegin('appGroupId', Thrift.Type.STRING, 1);
    output.writeString(this.appGroupId);
    output.writeFieldEnd();
  }
  if (this.cancel !== null && this.cancel !== undefined) {
    output.writeFieldBegin('cancel', Thrift.Type.BOOL, 2);
    output.writeBool(this.cancel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAppReapOutputT = function(args) {
  this.outStr = null;
  this.errStr = null;
  if (args) {
    if (args.outStr !== undefined && args.outStr !== null) {
      this.outStr = args.outStr;
    }
    if (args.errStr !== undefined && args.errStr !== null) {
      this.errStr = args.errStr;
    }
  }
};
XcalarApiAppReapOutputT.prototype = {};
XcalarApiAppReapOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.outStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.errStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAppReapOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAppReapOutputT');
  if (this.outStr !== null && this.outStr !== undefined) {
    output.writeFieldBegin('outStr', Thrift.Type.STRING, 1);
    output.writeString(this.outStr);
    output.writeFieldEnd();
  }
  if (this.errStr !== null && this.errStr !== undefined) {
    output.writeFieldBegin('errStr', Thrift.Type.STRING, 2);
    output.writeString(this.errStr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiEvalT = function(args) {
  this.evalString = null;
  this.newField = null;
  if (args) {
    if (args.evalString !== undefined && args.evalString !== null) {
      this.evalString = args.evalString;
    }
    if (args.newField !== undefined && args.newField !== null) {
      this.newField = args.newField;
    }
  }
};
XcalarApiEvalT.prototype = {};
XcalarApiEvalT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.evalString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.newField = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiEvalT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiEvalT');
  if (this.evalString !== null && this.evalString !== undefined) {
    output.writeFieldBegin('evalString', Thrift.Type.STRING, 1);
    output.writeString(this.evalString);
    output.writeFieldEnd();
  }
  if (this.newField !== null && this.newField !== undefined) {
    output.writeFieldBegin('newField', Thrift.Type.STRING, 2);
    output.writeString(this.newField);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiKeyT = function(args) {
  this.name = null;
  this.type = null;
  this.keyFieldName = null;
  this.ordering = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.keyFieldName !== undefined && args.keyFieldName !== null) {
      this.keyFieldName = args.keyFieldName;
    }
    if (args.ordering !== undefined && args.ordering !== null) {
      this.ordering = args.ordering;
    }
  }
};
XcalarApiKeyT.prototype = {};
XcalarApiKeyT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.keyFieldName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ordering = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiKeyT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiKeyT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.keyFieldName !== null && this.keyFieldName !== undefined) {
    output.writeFieldBegin('keyFieldName', Thrift.Type.STRING, 3);
    output.writeString(this.keyFieldName);
    output.writeFieldEnd();
  }
  if (this.ordering !== null && this.ordering !== undefined) {
    output.writeFieldBegin('ordering', Thrift.Type.STRING, 4);
    output.writeString(this.ordering);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDriverInputT = function(args) {
  this.inputJson = null;
  if (args) {
    if (args.inputJson !== undefined && args.inputJson !== null) {
      this.inputJson = args.inputJson;
    }
  }
};
XcalarApiDriverInputT.prototype = {};
XcalarApiDriverInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.inputJson = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDriverInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDriverInputT');
  if (this.inputJson !== null && this.inputJson !== undefined) {
    output.writeFieldBegin('inputJson', Thrift.Type.STRING, 1);
    output.writeString(this.inputJson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDriverOutputT = function(args) {
  this.outputJson = null;
  if (args) {
    if (args.outputJson !== undefined && args.outputJson !== null) {
      this.outputJson = args.outputJson;
    }
  }
};
XcalarApiDriverOutputT.prototype = {};
XcalarApiDriverOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.outputJson = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDriverOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDriverOutputT');
  if (this.outputJson !== null && this.outputJson !== undefined) {
    output.writeFieldBegin('outputJson', Thrift.Type.STRING, 1);
    output.writeString(this.outputJson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTargetInputT = function(args) {
  this.inputJson = null;
  if (args) {
    if (args.inputJson !== undefined && args.inputJson !== null) {
      this.inputJson = args.inputJson;
    }
  }
};
XcalarApiTargetInputT.prototype = {};
XcalarApiTargetInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.inputJson = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTargetInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTargetInputT');
  if (this.inputJson !== null && this.inputJson !== undefined) {
    output.writeFieldBegin('inputJson', Thrift.Type.STRING, 1);
    output.writeString(this.inputJson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTargetOutputT = function(args) {
  this.outputJson = null;
  if (args) {
    if (args.outputJson !== undefined && args.outputJson !== null) {
      this.outputJson = args.outputJson;
    }
  }
};
XcalarApiTargetOutputT.prototype = {};
XcalarApiTargetOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.outputJson = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTargetOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTargetOutputT');
  if (this.outputJson !== null && this.outputJson !== undefined) {
    output.writeFieldBegin('outputJson', Thrift.Type.STRING, 1);
    output.writeString(this.outputJson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiPreviewInputT = function(args) {
  this.inputJson = null;
  if (args) {
    if (args.inputJson !== undefined && args.inputJson !== null) {
      this.inputJson = args.inputJson;
    }
  }
};
XcalarApiPreviewInputT.prototype = {};
XcalarApiPreviewInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.inputJson = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiPreviewInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiPreviewInputT');
  if (this.inputJson !== null && this.inputJson !== undefined) {
    output.writeFieldBegin('inputJson', Thrift.Type.STRING, 1);
    output.writeString(this.inputJson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiPreviewOutputT = function(args) {
  this.outputJson = null;
  if (args) {
    if (args.outputJson !== undefined && args.outputJson !== null) {
      this.outputJson = args.outputJson;
    }
  }
};
XcalarApiPreviewOutputT.prototype = {};
XcalarApiPreviewOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.outputJson = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiPreviewOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiPreviewOutputT');
  if (this.outputJson !== null && this.outputJson !== undefined) {
    output.writeFieldBegin('outputJson', Thrift.Type.STRING, 1);
    output.writeString(this.outputJson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiBulkLoadInputT = function(args) {
  this.dest = null;
  this.loadArgs = null;
  this.dagNodeId = null;
  if (args) {
    if (args.dest !== undefined && args.dest !== null) {
      this.dest = args.dest;
    }
    if (args.loadArgs !== undefined && args.loadArgs !== null) {
      this.loadArgs = new XcalarApiDfLoadArgsT(args.loadArgs);
    }
    if (args.dagNodeId !== undefined && args.dagNodeId !== null) {
      this.dagNodeId = args.dagNodeId;
    }
  }
};
XcalarApiBulkLoadInputT.prototype = {};
XcalarApiBulkLoadInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.loadArgs = new XcalarApiDfLoadArgsT();
        this.loadArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dagNodeId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiBulkLoadInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiBulkLoadInputT');
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 1);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.loadArgs !== null && this.loadArgs !== undefined) {
    output.writeFieldBegin('loadArgs', Thrift.Type.STRUCT, 2);
    this.loadArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.dagNodeId !== null && this.dagNodeId !== undefined) {
    output.writeFieldBegin('dagNodeId', Thrift.Type.STRING, 3);
    output.writeString(this.dagNodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetCreateInputT = function(args) {
  this.dest = null;
  this.loadArgs = null;
  this.dagNodeId = null;
  if (args) {
    if (args.dest !== undefined && args.dest !== null) {
      this.dest = args.dest;
    }
    if (args.loadArgs !== undefined && args.loadArgs !== null) {
      this.loadArgs = new XcalarApiDfLoadArgsT(args.loadArgs);
    }
    if (args.dagNodeId !== undefined && args.dagNodeId !== null) {
      this.dagNodeId = args.dagNodeId;
    }
  }
};
XcalarApiDatasetCreateInputT.prototype = {};
XcalarApiDatasetCreateInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.loadArgs = new XcalarApiDfLoadArgsT();
        this.loadArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dagNodeId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDatasetCreateInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDatasetCreateInputT');
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 1);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.loadArgs !== null && this.loadArgs !== undefined) {
    output.writeFieldBegin('loadArgs', Thrift.Type.STRUCT, 2);
    this.loadArgs.write(output);
    output.writeFieldEnd();
  }
  if (this.dagNodeId !== null && this.dagNodeId !== undefined) {
    output.writeFieldBegin('dagNodeId', Thrift.Type.STRING, 3);
    output.writeString(this.dagNodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiIndexInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.key = null;
  this.prefix = null;
  this.dhtName = null;
  this.delaySort = null;
  this.broadcast = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.dest !== undefined && args.dest !== null) {
      this.dest = args.dest;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = Thrift.copyList(args.key, [XcalarApiKeyT]);
    }
    if (args.prefix !== undefined && args.prefix !== null) {
      this.prefix = args.prefix;
    }
    if (args.dhtName !== undefined && args.dhtName !== null) {
      this.dhtName = args.dhtName;
    }
    if (args.delaySort !== undefined && args.delaySort !== null) {
      this.delaySort = args.delaySort;
    }
    if (args.broadcast !== undefined && args.broadcast !== null) {
      this.broadcast = args.broadcast;
    }
  }
};
XcalarApiIndexInputT.prototype = {};
XcalarApiIndexInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.key = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new XcalarApiKeyT();
          elem78.read(input);
          this.key.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.prefix = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.dhtName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.delaySort = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.broadcast = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiIndexInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiIndexInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.key.length);
    for (var iter79 in this.key)
    {
      if (this.key.hasOwnProperty(iter79))
      {
        iter79 = this.key[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.prefix !== null && this.prefix !== undefined) {
    output.writeFieldBegin('prefix', Thrift.Type.STRING, 4);
    output.writeString(this.prefix);
    output.writeFieldEnd();
  }
  if (this.dhtName !== null && this.dhtName !== undefined) {
    output.writeFieldBegin('dhtName', Thrift.Type.STRING, 5);
    output.writeString(this.dhtName);
    output.writeFieldEnd();
  }
  if (this.delaySort !== null && this.delaySort !== undefined) {
    output.writeFieldBegin('delaySort', Thrift.Type.BOOL, 6);
    output.writeBool(this.delaySort);
    output.writeFieldEnd();
  }
  if (this.broadcast !== null && this.broadcast !== undefined) {
    output.writeFieldBegin('broadcast', Thrift.Type.BOOL, 7);
    output.writeBool(this.broadcast);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStatInputT = function(args) {
  this.nodeId = null;
  if (args) {
    if (args.nodeId !== undefined && args.nodeId !== null) {
      this.nodeId = args.nodeId;
    }
  }
};
XcalarApiStatInputT.prototype = {};
XcalarApiStatInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.nodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStatInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStatInputT');
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.I64, 1);
    output.writeI64(this.nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagNameT = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
XcalarApiDagNameT.prototype = {};
XcalarApiDagNameT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagNameT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagNameT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiRetinaDstT = function(args) {
  this.numColumns = null;
  this.target = null;
  this.columns = null;
  if (args) {
    if (args.numColumns !== undefined && args.numColumns !== null) {
      this.numColumns = args.numColumns;
    }
    if (args.target !== undefined && args.target !== null) {
      this.target = new XcalarApiNamedInputT(args.target);
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [ExColumnNameT]);
    }
  }
};
XcalarApiRetinaDstT.prototype = {};
XcalarApiRetinaDstT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numColumns = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.target = new XcalarApiNamedInputT();
        this.target.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.columns = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ExColumnNameT();
          elem86.read(input);
          this.columns.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiRetinaDstT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiRetinaDstT');
  if (this.numColumns !== null && this.numColumns !== undefined) {
    output.writeFieldBegin('numColumns', Thrift.Type.I32, 1);
    output.writeI32(this.numColumns);
    output.writeFieldEnd();
  }
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRUCT, 2);
    this.target.write(output);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter87 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter87))
      {
        iter87 = this.columns[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiRetinaSrcTableT = function(args) {
  this.source = null;
  this.dstName = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.dstName !== undefined && args.dstName !== null) {
      this.dstName = args.dstName;
    }
  }
};
XcalarApiRetinaSrcTableT.prototype = {};
XcalarApiRetinaSrcTableT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dstName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiRetinaSrcTableT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiRetinaSrcTableT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dstName !== null && this.dstName !== undefined) {
    output.writeFieldBegin('dstName', Thrift.Type.STRING, 2);
    output.writeString(this.dstName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiMakeRetinaInputT = function(args) {
  this.retinaName = null;
  this.numTables = null;
  this.tableArray = null;
  this.numSrcTables = null;
  this.srcTables = null;
  if (args) {
    if (args.retinaName !== undefined && args.retinaName !== null) {
      this.retinaName = args.retinaName;
    }
    if (args.numTables !== undefined && args.numTables !== null) {
      this.numTables = args.numTables;
    }
    if (args.tableArray !== undefined && args.tableArray !== null) {
      this.tableArray = Thrift.copyList(args.tableArray, [XcalarApiRetinaDstT]);
    }
    if (args.numSrcTables !== undefined && args.numSrcTables !== null) {
      this.numSrcTables = args.numSrcTables;
    }
    if (args.srcTables !== undefined && args.srcTables !== null) {
      this.srcTables = Thrift.copyList(args.srcTables, [XcalarApiRetinaSrcTableT]);
    }
  }
};
XcalarApiMakeRetinaInputT.prototype = {};
XcalarApiMakeRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numTables = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.tableArray = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new XcalarApiRetinaDstT();
          elem94.read(input);
          this.tableArray.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numSrcTables = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size95 = 0;
        var _rtmp399;
        this.srcTables = [];
        var _etype98 = 0;
        _rtmp399 = input.readListBegin();
        _etype98 = _rtmp399.etype;
        _size95 = _rtmp399.size;
        for (var _i100 = 0; _i100 < _size95; ++_i100)
        {
          var elem101 = null;
          elem101 = new XcalarApiRetinaSrcTableT();
          elem101.read(input);
          this.srcTables.push(elem101);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiMakeRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiMakeRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.numTables !== null && this.numTables !== undefined) {
    output.writeFieldBegin('numTables', Thrift.Type.I64, 2);
    output.writeI64(this.numTables);
    output.writeFieldEnd();
  }
  if (this.tableArray !== null && this.tableArray !== undefined) {
    output.writeFieldBegin('tableArray', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.tableArray.length);
    for (var iter102 in this.tableArray)
    {
      if (this.tableArray.hasOwnProperty(iter102))
      {
        iter102 = this.tableArray[iter102];
        iter102.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numSrcTables !== null && this.numSrcTables !== undefined) {
    output.writeFieldBegin('numSrcTables', Thrift.Type.I64, 4);
    output.writeI64(this.numSrcTables);
    output.writeFieldEnd();
  }
  if (this.srcTables !== null && this.srcTables !== undefined) {
    output.writeFieldBegin('srcTables', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.srcTables.length);
    for (var iter103 in this.srcTables)
    {
      if (this.srcTables.hasOwnProperty(iter103))
      {
        iter103 = this.srcTables[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetRetinaInputT = function(args) {
  this.retInput = null;
  if (args) {
    if (args.retInput !== undefined && args.retInput !== null) {
      this.retInput = args.retInput;
    }
  }
};
XcalarApiGetRetinaInputT.prototype = {};
XcalarApiGetRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetRetinaInputT');
  if (this.retInput !== null && this.retInput !== undefined) {
    output.writeFieldBegin('retInput', Thrift.Type.STRING, 1);
    output.writeString(this.retInput);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetRetinaJsonInputT = function(args) {
  this.retinaName = null;
  if (args) {
    if (args.retinaName !== undefined && args.retinaName !== null) {
      this.retinaName = args.retinaName;
    }
  }
};
XcalarApiGetRetinaJsonInputT.prototype = {};
XcalarApiGetRetinaJsonInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetRetinaJsonInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetRetinaJsonInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiProjectInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.columns = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.dest !== undefined && args.dest !== null) {
      this.dest = args.dest;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [null]);
    }
  }
};
XcalarApiProjectInputT.prototype = {};
XcalarApiProjectInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.columns = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = input.readString().value;
          this.columns.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiProjectInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiProjectInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter111 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter111))
      {
        iter111 = this.columns[iter111];
        output.writeString(iter111);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFilterInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.eval = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.dest !== undefined && args.dest !== null) {
      this.dest = args.dest;
    }
    if (args.eval !== undefined && args.eval !== null) {
      this.eval = Thrift.copyList(args.eval, [XcalarApiEvalT]);
    }
  }
};
XcalarApiFilterInputT.prototype = {};
XcalarApiFilterInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.eval = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new XcalarApiEvalT();
          elem118.read(input);
          this.eval.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFilterInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFilterInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.eval !== null && this.eval !== undefined) {
    output.writeFieldBegin('eval', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.eval.length);
    for (var iter119 in this.eval)
    {
      if (this.eval.hasOwnProperty(iter119))
      {
        iter119 = this.eval[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGroupByInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.eval = null;
  this.newKeyField = null;
  this.includeSample = null;
  this.icv = null;
  this.groupAll = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.dest !== undefined && args.dest !== null) {
      this.dest = args.dest;
    }
    if (args.eval !== undefined && args.eval !== null) {
      this.eval = Thrift.copyList(args.eval, [XcalarApiEvalT]);
    }
    if (args.newKeyField !== undefined && args.newKeyField !== null) {
      this.newKeyField = args.newKeyField;
    }
    if (args.includeSample !== undefined && args.includeSample !== null) {
      this.includeSample = args.includeSample;
    }
    if (args.icv !== undefined && args.icv !== null) {
      this.icv = args.icv;
    }
    if (args.groupAll !== undefined && args.groupAll !== null) {
      this.groupAll = args.groupAll;
    }
  }
};
XcalarApiGroupByInputT.prototype = {};
XcalarApiGroupByInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.eval = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new XcalarApiEvalT();
          elem126.read(input);
          this.eval.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.newKeyField = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.includeSample = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.icv = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.groupAll = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGroupByInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGroupByInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.eval !== null && this.eval !== undefined) {
    output.writeFieldBegin('eval', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.eval.length);
    for (var iter127 in this.eval)
    {
      if (this.eval.hasOwnProperty(iter127))
      {
        iter127 = this.eval[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.newKeyField !== null && this.newKeyField !== undefined) {
    output.writeFieldBegin('newKeyField', Thrift.Type.STRING, 4);
    output.writeString(this.newKeyField);
    output.writeFieldEnd();
  }
  if (this.includeSample !== null && this.includeSample !== undefined) {
    output.writeFieldBegin('includeSample', Thrift.Type.BOOL, 5);
    output.writeBool(this.includeSample);
    output.writeFieldEnd();
  }
  if (this.icv !== null && this.icv !== undefined) {
    output.writeFieldBegin('icv', Thrift.Type.BOOL, 6);
    output.writeBool(this.icv);
    output.writeFieldEnd();
  }
  if (this.groupAll !== null && this.groupAll !== undefined) {
    output.writeFieldBegin('groupAll', Thrift.Type.BOOL, 7);
    output.writeBool(this.groupAll);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAggregateInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.eval = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.dest !== undefined && args.dest !== null) {
      this.dest = args.dest;
    }
    if (args.eval !== undefined && args.eval !== null) {
      this.eval = Thrift.copyList(args.eval, [XcalarApiEvalT]);
    }
  }
};
XcalarApiAggregateInputT.prototype = {};
XcalarApiAggregateInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.eval = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = new XcalarApiEvalT();
          elem134.read(input);
          this.eval.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAggregateInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAggregateInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.eval !== null && this.eval !== undefined) {
    output.writeFieldBegin('eval', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.eval.length);
    for (var iter135 in this.eval)
    {
      if (this.eval.hasOwnProperty(iter135))
      {
        iter135 = this.eval[iter135];
        iter135.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiRenameNodeInputT = function(args) {
  this.oldName = null;
  this.newName = null;
  if (args) {
    if (args.oldName !== undefined && args.oldName !== null) {
      this.oldName = args.oldName;
    }
    if (args.newName !== undefined && args.newName !== null) {
      this.newName = args.newName;
    }
  }
};
XcalarApiRenameNodeInputT.prototype = {};
XcalarApiRenameNodeInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.oldName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.newName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiRenameNodeInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiRenameNodeInputT');
  if (this.oldName !== null && this.oldName !== undefined) {
    output.writeFieldBegin('oldName', Thrift.Type.STRING, 1);
    output.writeString(this.oldName);
    output.writeFieldEnd();
  }
  if (this.newName !== null && this.newName !== undefined) {
    output.writeFieldBegin('newName', Thrift.Type.STRING, 2);
    output.writeString(this.newName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiMakeResultSetInputT = function(args) {
  this.errorDs = null;
  this.dagNode = null;
  if (args) {
    if (args.errorDs !== undefined && args.errorDs !== null) {
      this.errorDs = args.errorDs;
    }
    if (args.dagNode !== undefined && args.dagNode !== null) {
      this.dagNode = new XcalarApiNamedInputT(args.dagNode);
    }
  }
};
XcalarApiMakeResultSetInputT.prototype = {};
XcalarApiMakeResultSetInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.errorDs = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dagNode = new XcalarApiNamedInputT();
        this.dagNode.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiMakeResultSetInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiMakeResultSetInputT');
  if (this.errorDs !== null && this.errorDs !== undefined) {
    output.writeFieldBegin('errorDs', Thrift.Type.BOOL, 1);
    output.writeBool(this.errorDs);
    output.writeFieldEnd();
  }
  if (this.dagNode !== null && this.dagNode !== undefined) {
    output.writeFieldBegin('dagNode', Thrift.Type.STRUCT, 2);
    this.dagNode.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiResultSetNextInputT = function(args) {
  this.resultSetId = null;
  this.numRecords = null;
  if (args) {
    if (args.resultSetId !== undefined && args.resultSetId !== null) {
      this.resultSetId = args.resultSetId;
    }
    if (args.numRecords !== undefined && args.numRecords !== null) {
      this.numRecords = args.numRecords;
    }
  }
};
XcalarApiResultSetNextInputT.prototype = {};
XcalarApiResultSetNextInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.resultSetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numRecords = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiResultSetNextInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiResultSetNextInputT');
  if (this.resultSetId !== null && this.resultSetId !== undefined) {
    output.writeFieldBegin('resultSetId', Thrift.Type.STRING, 1);
    output.writeString(this.resultSetId);
    output.writeFieldEnd();
  }
  if (this.numRecords !== null && this.numRecords !== undefined) {
    output.writeFieldBegin('numRecords', Thrift.Type.I64, 2);
    output.writeI64(this.numRecords);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFreeResultSetInputT = function(args) {
  this.resultSetId = null;
  if (args) {
    if (args.resultSetId !== undefined && args.resultSetId !== null) {
      this.resultSetId = args.resultSetId;
    }
  }
};
XcalarApiFreeResultSetInputT.prototype = {};
XcalarApiFreeResultSetInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.resultSetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFreeResultSetInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFreeResultSetInputT');
  if (this.resultSetId !== null && this.resultSetId !== undefined) {
    output.writeFieldBegin('resultSetId', Thrift.Type.STRING, 1);
    output.writeString(this.resultSetId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStatT = function(args) {
  this.statName = null;
  this.statValue = null;
  this.statType = null;
  this.groupId = null;
  if (args) {
    if (args.statName !== undefined && args.statName !== null) {
      this.statName = args.statName;
    }
    if (args.statValue !== undefined && args.statValue !== null) {
      this.statValue = args.statValue;
    }
    if (args.statType !== undefined && args.statType !== null) {
      this.statType = args.statType;
    }
    if (args.groupId !== undefined && args.groupId !== null) {
      this.groupId = args.groupId;
    }
  }
};
XcalarApiStatT.prototype = {};
XcalarApiStatT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.statName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.statValue = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.statType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.groupId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStatT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStatT');
  if (this.statName !== null && this.statName !== undefined) {
    output.writeFieldBegin('statName', Thrift.Type.STRING, 1);
    output.writeString(this.statName);
    output.writeFieldEnd();
  }
  if (this.statValue !== null && this.statValue !== undefined) {
    output.writeFieldBegin('statValue', Thrift.Type.I64, 2);
    output.writeI64(this.statValue);
    output.writeFieldEnd();
  }
  if (this.statType !== null && this.statType !== undefined) {
    output.writeFieldBegin('statType', Thrift.Type.I32, 3);
    output.writeI32(this.statType);
    output.writeFieldEnd();
  }
  if (this.groupId !== null && this.groupId !== undefined) {
    output.writeFieldBegin('groupId', Thrift.Type.I64, 4);
    output.writeI64(this.groupId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiJoinInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.joinType = null;
  this.columns = null;
  this.evalString = null;
  this.keepAllColumns = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = Thrift.copyList(args.source, [null]);
    }
    if (args.dest !== undefined && args.dest !== null) {
      this.dest = args.dest;
    }
    if (args.joinType !== undefined && args.joinType !== null) {
      this.joinType = args.joinType;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [Thrift.copyList, XcalarApiColumnT]);
    }
    if (args.evalString !== undefined && args.evalString !== null) {
      this.evalString = args.evalString;
    }
    if (args.keepAllColumns !== undefined && args.keepAllColumns !== null) {
      this.keepAllColumns = args.keepAllColumns;
    }
  }
};
XcalarApiJoinInputT.prototype = {};
XcalarApiJoinInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.source = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = input.readString().value;
          this.source.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.joinType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size143 = 0;
        var _rtmp3147;
        this.columns = [];
        var _etype146 = 0;
        _rtmp3147 = input.readListBegin();
        _etype146 = _rtmp3147.etype;
        _size143 = _rtmp3147.size;
        for (var _i148 = 0; _i148 < _size143; ++_i148)
        {
          var elem149 = null;
          var _size150 = 0;
          var _rtmp3154;
          elem149 = [];
          var _etype153 = 0;
          _rtmp3154 = input.readListBegin();
          _etype153 = _rtmp3154.etype;
          _size150 = _rtmp3154.size;
          for (var _i155 = 0; _i155 < _size150; ++_i155)
          {
            var elem156 = null;
            elem156 = new XcalarApiColumnT();
            elem156.read(input);
            elem149.push(elem156);
          }
          input.readListEnd();
          this.columns.push(elem149);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.evalString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.keepAllColumns = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiJoinInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiJoinInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.source.length);
    for (var iter157 in this.source)
    {
      if (this.source.hasOwnProperty(iter157))
      {
        iter157 = this.source[iter157];
        output.writeString(iter157);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.joinType !== null && this.joinType !== undefined) {
    output.writeFieldBegin('joinType', Thrift.Type.STRING, 3);
    output.writeString(this.joinType);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.LIST, this.columns.length);
    for (var iter158 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter158))
      {
        iter158 = this.columns[iter158];
        output.writeListBegin(Thrift.Type.STRUCT, iter158.length);
        for (var iter159 in iter158)
        {
          if (iter158.hasOwnProperty(iter159))
          {
            iter159 = iter158[iter159];
            iter159.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.evalString !== null && this.evalString !== undefined) {
    output.writeFieldBegin('evalString', Thrift.Type.STRING, 5);
    output.writeString(this.evalString);
    output.writeFieldEnd();
  }
  if (this.keepAllColumns !== null && this.keepAllColumns !== undefined) {
    output.writeFieldBegin('keepAllColumns', Thrift.Type.BOOL, 6);
    output.writeBool(this.keepAllColumns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUnionInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.dedup = null;
  this.columns = null;
  this.unionType = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = Thrift.copyList(args.source, [null]);
    }
    if (args.dest !== undefined && args.dest !== null) {
      this.dest = args.dest;
    }
    if (args.dedup !== undefined && args.dedup !== null) {
      this.dedup = args.dedup;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [Thrift.copyList, XcalarApiColumnT]);
    }
    if (args.unionType !== undefined && args.unionType !== null) {
      this.unionType = args.unionType;
    }
  }
};
XcalarApiUnionInputT.prototype = {};
XcalarApiUnionInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size160 = 0;
        var _rtmp3164;
        this.source = [];
        var _etype163 = 0;
        _rtmp3164 = input.readListBegin();
        _etype163 = _rtmp3164.etype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var elem166 = null;
          elem166 = input.readString().value;
          this.source.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.dedup = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size167 = 0;
        var _rtmp3171;
        this.columns = [];
        var _etype170 = 0;
        _rtmp3171 = input.readListBegin();
        _etype170 = _rtmp3171.etype;
        _size167 = _rtmp3171.size;
        for (var _i172 = 0; _i172 < _size167; ++_i172)
        {
          var elem173 = null;
          var _size174 = 0;
          var _rtmp3178;
          elem173 = [];
          var _etype177 = 0;
          _rtmp3178 = input.readListBegin();
          _etype177 = _rtmp3178.etype;
          _size174 = _rtmp3178.size;
          for (var _i179 = 0; _i179 < _size174; ++_i179)
          {
            var elem180 = null;
            elem180 = new XcalarApiColumnT();
            elem180.read(input);
            elem173.push(elem180);
          }
          input.readListEnd();
          this.columns.push(elem173);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.unionType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUnionInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUnionInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.source.length);
    for (var iter181 in this.source)
    {
      if (this.source.hasOwnProperty(iter181))
      {
        iter181 = this.source[iter181];
        output.writeString(iter181);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.dedup !== null && this.dedup !== undefined) {
    output.writeFieldBegin('dedup', Thrift.Type.BOOL, 3);
    output.writeBool(this.dedup);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.LIST, this.columns.length);
    for (var iter182 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter182))
      {
        iter182 = this.columns[iter182];
        output.writeListBegin(Thrift.Type.STRUCT, iter182.length);
        for (var iter183 in iter182)
        {
          if (iter182.hasOwnProperty(iter183))
          {
            iter183 = iter182[iter183];
            iter183.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.unionType !== null && this.unionType !== undefined) {
    output.writeFieldBegin('unionType', Thrift.Type.STRING, 5);
    output.writeString(this.unionType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiResultSetAbsoluteInputT = function(args) {
  this.resultSetId = null;
  this.position = null;
  if (args) {
    if (args.resultSetId !== undefined && args.resultSetId !== null) {
      this.resultSetId = args.resultSetId;
    }
    if (args.position !== undefined && args.position !== null) {
      this.position = args.position;
    }
  }
};
XcalarApiResultSetAbsoluteInputT.prototype = {};
XcalarApiResultSetAbsoluteInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.resultSetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.position = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiResultSetAbsoluteInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiResultSetAbsoluteInputT');
  if (this.resultSetId !== null && this.resultSetId !== undefined) {
    output.writeFieldBegin('resultSetId', Thrift.Type.STRING, 1);
    output.writeString(this.resultSetId);
    output.writeFieldEnd();
  }
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I64, 2);
    output.writeI64(this.position);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParameterT = function(args) {
  this.paramName = null;
  this.paramValue = null;
  if (args) {
    if (args.paramName !== undefined && args.paramName !== null) {
      this.paramName = args.paramName;
    }
    if (args.paramValue !== undefined && args.paramValue !== null) {
      this.paramValue = args.paramValue;
    }
  }
};
XcalarApiParameterT.prototype = {};
XcalarApiParameterT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.paramName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.paramValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParameterT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParameterT');
  if (this.paramName !== null && this.paramName !== undefined) {
    output.writeFieldBegin('paramName', Thrift.Type.STRING, 1);
    output.writeString(this.paramName);
    output.writeFieldEnd();
  }
  if (this.paramValue !== null && this.paramValue !== undefined) {
    output.writeFieldBegin('paramValue', Thrift.Type.STRING, 2);
    output.writeString(this.paramValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamLoadT = function(args) {
  this.datasetUrl = null;
  this.namePattern = null;
  if (args) {
    if (args.datasetUrl !== undefined && args.datasetUrl !== null) {
      this.datasetUrl = args.datasetUrl;
    }
    if (args.namePattern !== undefined && args.namePattern !== null) {
      this.namePattern = args.namePattern;
    }
  }
};
XcalarApiParamLoadT.prototype = {};
XcalarApiParamLoadT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.datasetUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.namePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamLoadT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamLoadT');
  if (this.datasetUrl !== null && this.datasetUrl !== undefined) {
    output.writeFieldBegin('datasetUrl', Thrift.Type.STRING, 1);
    output.writeString(this.datasetUrl);
    output.writeFieldEnd();
  }
  if (this.namePattern !== null && this.namePattern !== undefined) {
    output.writeFieldBegin('namePattern', Thrift.Type.STRING, 2);
    output.writeString(this.namePattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamSynthesizeT = function(args) {
  this.source = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
  }
};
XcalarApiParamSynthesizeT.prototype = {};
XcalarApiParamSynthesizeT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamSynthesizeT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamSynthesizeT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamFilterT = function(args) {
  this.filterStr = null;
  if (args) {
    if (args.filterStr !== undefined && args.filterStr !== null) {
      this.filterStr = args.filterStr;
    }
  }
};
XcalarApiParamFilterT.prototype = {};
XcalarApiParamFilterT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.filterStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamFilterT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamFilterT');
  if (this.filterStr !== null && this.filterStr !== undefined) {
    output.writeFieldBegin('filterStr', Thrift.Type.STRING, 1);
    output.writeString(this.filterStr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamExportT = function(args) {
  this.fileName = null;
  this.targetName = null;
  this.targetType = null;
  if (args) {
    if (args.fileName !== undefined && args.fileName !== null) {
      this.fileName = args.fileName;
    }
    if (args.targetName !== undefined && args.targetName !== null) {
      this.targetName = args.targetName;
    }
    if (args.targetType !== undefined && args.targetType !== null) {
      this.targetType = args.targetType;
    }
  }
};
XcalarApiParamExportT.prototype = {};
XcalarApiParamExportT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.targetName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.targetType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamExportT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamExportT');
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 1);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.targetName !== null && this.targetName !== undefined) {
    output.writeFieldBegin('targetName', Thrift.Type.STRING, 2);
    output.writeString(this.targetName);
    output.writeFieldEnd();
  }
  if (this.targetType !== null && this.targetType !== undefined) {
    output.writeFieldBegin('targetType', Thrift.Type.I32, 3);
    output.writeI32(this.targetType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamInputArgsT = function(args) {
  this.paramLoad = null;
  this.paramFilter = null;
  this.paramExport = null;
  this.paramSynthesize = null;
  if (args) {
    if (args.paramLoad !== undefined && args.paramLoad !== null) {
      this.paramLoad = new XcalarApiParamLoadT(args.paramLoad);
    }
    if (args.paramFilter !== undefined && args.paramFilter !== null) {
      this.paramFilter = new XcalarApiParamFilterT(args.paramFilter);
    }
    if (args.paramExport !== undefined && args.paramExport !== null) {
      this.paramExport = new XcalarApiParamExportT(args.paramExport);
    }
    if (args.paramSynthesize !== undefined && args.paramSynthesize !== null) {
      this.paramSynthesize = new XcalarApiParamSynthesizeT(args.paramSynthesize);
    }
  }
};
XcalarApiParamInputArgsT.prototype = {};
XcalarApiParamInputArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.paramLoad = new XcalarApiParamLoadT();
        this.paramLoad.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.paramFilter = new XcalarApiParamFilterT();
        this.paramFilter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.paramExport = new XcalarApiParamExportT();
        this.paramExport.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.paramSynthesize = new XcalarApiParamSynthesizeT();
        this.paramSynthesize.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamInputArgsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamInputArgsT');
  if (this.paramLoad !== null && this.paramLoad !== undefined) {
    output.writeFieldBegin('paramLoad', Thrift.Type.STRUCT, 1);
    this.paramLoad.write(output);
    output.writeFieldEnd();
  }
  if (this.paramFilter !== null && this.paramFilter !== undefined) {
    output.writeFieldBegin('paramFilter', Thrift.Type.STRUCT, 2);
    this.paramFilter.write(output);
    output.writeFieldEnd();
  }
  if (this.paramExport !== null && this.paramExport !== undefined) {
    output.writeFieldBegin('paramExport', Thrift.Type.STRUCT, 3);
    this.paramExport.write(output);
    output.writeFieldEnd();
  }
  if (this.paramSynthesize !== null && this.paramSynthesize !== undefined) {
    output.writeFieldBegin('paramSynthesize', Thrift.Type.STRUCT, 4);
    this.paramSynthesize.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiParamInputT = function(args) {
  this.paramType = null;
  this.paramInputArgs = null;
  if (args) {
    if (args.paramType !== undefined && args.paramType !== null) {
      this.paramType = args.paramType;
    }
    if (args.paramInputArgs !== undefined && args.paramInputArgs !== null) {
      this.paramInputArgs = new XcalarApiParamInputArgsT(args.paramInputArgs);
    }
  }
};
XcalarApiParamInputT.prototype = {};
XcalarApiParamInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.paramType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.paramInputArgs = new XcalarApiParamInputArgsT();
        this.paramInputArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiParamInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiParamInputT');
  if (this.paramType !== null && this.paramType !== undefined) {
    output.writeFieldBegin('paramType', Thrift.Type.I32, 1);
    output.writeI32(this.paramType);
    output.writeFieldEnd();
  }
  if (this.paramInputArgs !== null && this.paramInputArgs !== undefined) {
    output.writeFieldBegin('paramInputArgs', Thrift.Type.STRUCT, 2);
    this.paramInputArgs.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUpdateRetinaInputT = function(args) {
  this.retinaName = null;
  this.retinaJson = null;
  if (args) {
    if (args.retinaName !== undefined && args.retinaName !== null) {
      this.retinaName = args.retinaName;
    }
    if (args.retinaJson !== undefined && args.retinaJson !== null) {
      this.retinaJson = args.retinaJson;
    }
  }
};
XcalarApiUpdateRetinaInputT.prototype = {};
XcalarApiUpdateRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.retinaJson = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUpdateRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUpdateRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.retinaJson !== null && this.retinaJson !== undefined) {
    output.writeFieldBegin('retinaJson', Thrift.Type.STRING, 2);
    output.writeString(this.retinaJson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListParametersInRetinaOutputT = function(args) {
  this.numParameters = null;
  this.parameters = null;
  if (args) {
    if (args.numParameters !== undefined && args.numParameters !== null) {
      this.numParameters = args.numParameters;
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyList(args.parameters, [XcalarApiParameterT]);
    }
  }
};
XcalarApiListParametersInRetinaOutputT.prototype = {};
XcalarApiListParametersInRetinaOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numParameters = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size184 = 0;
        var _rtmp3188;
        this.parameters = [];
        var _etype187 = 0;
        _rtmp3188 = input.readListBegin();
        _etype187 = _rtmp3188.etype;
        _size184 = _rtmp3188.size;
        for (var _i189 = 0; _i189 < _size184; ++_i189)
        {
          var elem190 = null;
          elem190 = new XcalarApiParameterT();
          elem190.read(input);
          this.parameters.push(elem190);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListParametersInRetinaOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListParametersInRetinaOutputT');
  if (this.numParameters !== null && this.numParameters !== undefined) {
    output.writeFieldBegin('numParameters', Thrift.Type.I64, 1);
    output.writeI64(this.numParameters);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.parameters.length);
    for (var iter191 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(iter191))
      {
        iter191 = this.parameters[iter191];
        iter191.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiExecuteRetinaInputT = function(args) {
  this.retinaName = null;
  this.queryName = null;
  this.dest = null;
  this.parameters = null;
  this.schedName = null;
  this.udfUserName = null;
  this.udfSessionName = null;
  if (args) {
    if (args.retinaName !== undefined && args.retinaName !== null) {
      this.retinaName = args.retinaName;
    }
    if (args.queryName !== undefined && args.queryName !== null) {
      this.queryName = args.queryName;
    }
    if (args.dest !== undefined && args.dest !== null) {
      this.dest = args.dest;
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyList(args.parameters, [XcalarApiParameterT]);
    }
    if (args.schedName !== undefined && args.schedName !== null) {
      this.schedName = args.schedName;
    }
    if (args.udfUserName !== undefined && args.udfUserName !== null) {
      this.udfUserName = args.udfUserName;
    }
    if (args.udfSessionName !== undefined && args.udfSessionName !== null) {
      this.udfSessionName = args.udfSessionName;
    }
  }
};
XcalarApiExecuteRetinaInputT.prototype = {};
XcalarApiExecuteRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.queryName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size192 = 0;
        var _rtmp3196;
        this.parameters = [];
        var _etype195 = 0;
        _rtmp3196 = input.readListBegin();
        _etype195 = _rtmp3196.etype;
        _size192 = _rtmp3196.size;
        for (var _i197 = 0; _i197 < _size192; ++_i197)
        {
          var elem198 = null;
          elem198 = new XcalarApiParameterT();
          elem198.read(input);
          this.parameters.push(elem198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.schedName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.udfUserName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.udfSessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiExecuteRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiExecuteRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.queryName !== null && this.queryName !== undefined) {
    output.writeFieldBegin('queryName', Thrift.Type.STRING, 2);
    output.writeString(this.queryName);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 3);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.parameters.length);
    for (var iter199 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(iter199))
      {
        iter199 = this.parameters[iter199];
        iter199.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.schedName !== null && this.schedName !== undefined) {
    output.writeFieldBegin('schedName', Thrift.Type.STRING, 5);
    output.writeString(this.schedName);
    output.writeFieldEnd();
  }
  if (this.udfUserName !== null && this.udfUserName !== undefined) {
    output.writeFieldBegin('udfUserName', Thrift.Type.STRING, 6);
    output.writeString(this.udfUserName);
    output.writeFieldEnd();
  }
  if (this.udfSessionName !== null && this.udfSessionName !== undefined) {
    output.writeFieldBegin('udfSessionName', Thrift.Type.STRING, 7);
    output.writeString(this.udfSessionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetStatOutputT = function(args) {
  this.numStats = null;
  this.truncated = null;
  this.stats = null;
  if (args) {
    if (args.numStats !== undefined && args.numStats !== null) {
      this.numStats = args.numStats;
    }
    if (args.truncated !== undefined && args.truncated !== null) {
      this.truncated = args.truncated;
    }
    if (args.stats !== undefined && args.stats !== null) {
      this.stats = Thrift.copyList(args.stats, [XcalarApiStatT]);
    }
  }
};
XcalarApiGetStatOutputT.prototype = {};
XcalarApiGetStatOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numStats = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.truncated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size200 = 0;
        var _rtmp3204;
        this.stats = [];
        var _etype203 = 0;
        _rtmp3204 = input.readListBegin();
        _etype203 = _rtmp3204.etype;
        _size200 = _rtmp3204.size;
        for (var _i205 = 0; _i205 < _size200; ++_i205)
        {
          var elem206 = null;
          elem206 = new XcalarApiStatT();
          elem206.read(input);
          this.stats.push(elem206);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetStatOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetStatOutputT');
  if (this.numStats !== null && this.numStats !== undefined) {
    output.writeFieldBegin('numStats', Thrift.Type.I64, 1);
    output.writeI64(this.numStats);
    output.writeFieldEnd();
  }
  if (this.truncated !== null && this.truncated !== undefined) {
    output.writeFieldBegin('truncated', Thrift.Type.BOOL, 2);
    output.writeBool(this.truncated);
    output.writeFieldEnd();
  }
  if (this.stats !== null && this.stats !== undefined) {
    output.writeFieldBegin('stats', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.stats.length);
    for (var iter207 in this.stats)
    {
      if (this.stats.hasOwnProperty(iter207))
      {
        iter207 = this.stats[iter207];
        iter207.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiMapInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.eval = null;
  this.icv = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.dest !== undefined && args.dest !== null) {
      this.dest = args.dest;
    }
    if (args.eval !== undefined && args.eval !== null) {
      this.eval = Thrift.copyList(args.eval, [XcalarApiEvalT]);
    }
    if (args.icv !== undefined && args.icv !== null) {
      this.icv = args.icv;
    }
  }
};
XcalarApiMapInputT.prototype = {};
XcalarApiMapInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size208 = 0;
        var _rtmp3212;
        this.eval = [];
        var _etype211 = 0;
        _rtmp3212 = input.readListBegin();
        _etype211 = _rtmp3212.etype;
        _size208 = _rtmp3212.size;
        for (var _i213 = 0; _i213 < _size208; ++_i213)
        {
          var elem214 = null;
          elem214 = new XcalarApiEvalT();
          elem214.read(input);
          this.eval.push(elem214);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.icv = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiMapInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiMapInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.eval !== null && this.eval !== undefined) {
    output.writeFieldBegin('eval', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.eval.length);
    for (var iter215 in this.eval)
    {
      if (this.eval.hasOwnProperty(iter215))
      {
        iter215 = this.eval[iter215];
        iter215.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.icv !== null && this.icv !== undefined) {
    output.writeFieldBegin('icv', Thrift.Type.BOOL, 4);
    output.writeBool(this.icv);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetRowNumInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.newField = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.dest !== undefined && args.dest !== null) {
      this.dest = args.dest;
    }
    if (args.newField !== undefined && args.newField !== null) {
      this.newField = args.newField;
    }
  }
};
XcalarApiGetRowNumInputT.prototype = {};
XcalarApiGetRowNumInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.newField = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetRowNumInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetRowNumInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.newField !== null && this.newField !== undefined) {
    output.writeFieldBegin('newField', Thrift.Type.STRING, 3);
    output.writeString(this.newField);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiQueryNameInputT = function(args) {
  this.queryName = null;
  this.detailedStats = null;
  if (args) {
    if (args.queryName !== undefined && args.queryName !== null) {
      this.queryName = args.queryName;
    }
    if (args.detailedStats !== undefined && args.detailedStats !== null) {
      this.detailedStats = args.detailedStats;
    }
  }
};
XcalarApiQueryNameInputT.prototype = {};
XcalarApiQueryNameInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queryName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.detailedStats = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiQueryNameInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiQueryNameInputT');
  if (this.queryName !== null && this.queryName !== undefined) {
    output.writeFieldBegin('queryName', Thrift.Type.STRING, 1);
    output.writeString(this.queryName);
    output.writeFieldEnd();
  }
  if (this.detailedStats !== null && this.detailedStats !== undefined) {
    output.writeFieldBegin('detailedStats', Thrift.Type.BOOL, 2);
    output.writeBool(this.detailedStats);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarStatGroupInfoT = function(args) {
  this.groupIdNum = null;
  this.totalSingleStats = null;
  this.statsGroupName = null;
  if (args) {
    if (args.groupIdNum !== undefined && args.groupIdNum !== null) {
      this.groupIdNum = args.groupIdNum;
    }
    if (args.totalSingleStats !== undefined && args.totalSingleStats !== null) {
      this.totalSingleStats = args.totalSingleStats;
    }
    if (args.statsGroupName !== undefined && args.statsGroupName !== null) {
      this.statsGroupName = args.statsGroupName;
    }
  }
};
XcalarStatGroupInfoT.prototype = {};
XcalarStatGroupInfoT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.groupIdNum = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.totalSingleStats = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.statsGroupName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarStatGroupInfoT.prototype.write = function(output) {
  output.writeStructBegin('XcalarStatGroupInfoT');
  if (this.groupIdNum !== null && this.groupIdNum !== undefined) {
    output.writeFieldBegin('groupIdNum', Thrift.Type.I64, 1);
    output.writeI64(this.groupIdNum);
    output.writeFieldEnd();
  }
  if (this.totalSingleStats !== null && this.totalSingleStats !== undefined) {
    output.writeFieldBegin('totalSingleStats', Thrift.Type.I64, 2);
    output.writeI64(this.totalSingleStats);
    output.writeFieldEnd();
  }
  if (this.statsGroupName !== null && this.statsGroupName !== undefined) {
    output.writeFieldBegin('statsGroupName', Thrift.Type.STRING, 3);
    output.writeString(this.statsGroupName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetStatGroupIdMapOutputT = function(args) {
  this.numGroupNames = null;
  this.truncated = null;
  this.groupNameInfoArray = null;
  if (args) {
    if (args.numGroupNames !== undefined && args.numGroupNames !== null) {
      this.numGroupNames = args.numGroupNames;
    }
    if (args.truncated !== undefined && args.truncated !== null) {
      this.truncated = args.truncated;
    }
    if (args.groupNameInfoArray !== undefined && args.groupNameInfoArray !== null) {
      this.groupNameInfoArray = Thrift.copyList(args.groupNameInfoArray, [XcalarStatGroupInfoT]);
    }
  }
};
XcalarApiGetStatGroupIdMapOutputT.prototype = {};
XcalarApiGetStatGroupIdMapOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numGroupNames = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.truncated = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size216 = 0;
        var _rtmp3220;
        this.groupNameInfoArray = [];
        var _etype219 = 0;
        _rtmp3220 = input.readListBegin();
        _etype219 = _rtmp3220.etype;
        _size216 = _rtmp3220.size;
        for (var _i221 = 0; _i221 < _size216; ++_i221)
        {
          var elem222 = null;
          elem222 = new XcalarStatGroupInfoT();
          elem222.read(input);
          this.groupNameInfoArray.push(elem222);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetStatGroupIdMapOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetStatGroupIdMapOutputT');
  if (this.numGroupNames !== null && this.numGroupNames !== undefined) {
    output.writeFieldBegin('numGroupNames', Thrift.Type.I64, 1);
    output.writeI64(this.numGroupNames);
    output.writeFieldEnd();
  }
  if (this.truncated !== null && this.truncated !== undefined) {
    output.writeFieldBegin('truncated', Thrift.Type.BOOL, 2);
    output.writeBool(this.truncated);
    output.writeFieldEnd();
  }
  if (this.groupNameInfoArray !== null && this.groupNameInfoArray !== undefined) {
    output.writeFieldBegin('groupNameInfoArray', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.groupNameInfoArray.length);
    for (var iter223 in this.groupNameInfoArray)
    {
      if (this.groupNameInfoArray.hasOwnProperty(iter223))
      {
        iter223 = this.groupNameInfoArray[iter223];
        iter223.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTableMetaT = function(args) {
  this.numRows = null;
  this.numPages = null;
  this.numSlots = null;
  this.size = null;
  this.numRowsPerSlot = null;
  this.numPagesPerSlot = null;
  this.xdbPageConsumedInBytes = null;
  this.xdbPageAllocatedInBytes = null;
  this.numTransPageSent = null;
  this.numTransPageRecv = null;
  if (args) {
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    }
    if (args.numPages !== undefined && args.numPages !== null) {
      this.numPages = args.numPages;
    }
    if (args.numSlots !== undefined && args.numSlots !== null) {
      this.numSlots = args.numSlots;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.numRowsPerSlot !== undefined && args.numRowsPerSlot !== null) {
      this.numRowsPerSlot = Thrift.copyList(args.numRowsPerSlot, [null]);
    }
    if (args.numPagesPerSlot !== undefined && args.numPagesPerSlot !== null) {
      this.numPagesPerSlot = Thrift.copyList(args.numPagesPerSlot, [null]);
    }
    if (args.xdbPageConsumedInBytes !== undefined && args.xdbPageConsumedInBytes !== null) {
      this.xdbPageConsumedInBytes = args.xdbPageConsumedInBytes;
    }
    if (args.xdbPageAllocatedInBytes !== undefined && args.xdbPageAllocatedInBytes !== null) {
      this.xdbPageAllocatedInBytes = args.xdbPageAllocatedInBytes;
    }
    if (args.numTransPageSent !== undefined && args.numTransPageSent !== null) {
      this.numTransPageSent = args.numTransPageSent;
    }
    if (args.numTransPageRecv !== undefined && args.numTransPageRecv !== null) {
      this.numTransPageRecv = args.numTransPageRecv;
    }
  }
};
XcalarApiTableMetaT.prototype = {};
XcalarApiTableMetaT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numRows = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numPages = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numSlots = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size224 = 0;
        var _rtmp3228;
        this.numRowsPerSlot = [];
        var _etype227 = 0;
        _rtmp3228 = input.readListBegin();
        _etype227 = _rtmp3228.etype;
        _size224 = _rtmp3228.size;
        for (var _i229 = 0; _i229 < _size224; ++_i229)
        {
          var elem230 = null;
          elem230 = input.readI64().value;
          this.numRowsPerSlot.push(elem230);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size231 = 0;
        var _rtmp3235;
        this.numPagesPerSlot = [];
        var _etype234 = 0;
        _rtmp3235 = input.readListBegin();
        _etype234 = _rtmp3235.etype;
        _size231 = _rtmp3235.size;
        for (var _i236 = 0; _i236 < _size231; ++_i236)
        {
          var elem237 = null;
          elem237 = input.readI64().value;
          this.numPagesPerSlot.push(elem237);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.xdbPageConsumedInBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.xdbPageAllocatedInBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.numTransPageSent = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.numTransPageRecv = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTableMetaT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTableMetaT');
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I64, 1);
    output.writeI64(this.numRows);
    output.writeFieldEnd();
  }
  if (this.numPages !== null && this.numPages !== undefined) {
    output.writeFieldBegin('numPages', Thrift.Type.I64, 2);
    output.writeI64(this.numPages);
    output.writeFieldEnd();
  }
  if (this.numSlots !== null && this.numSlots !== undefined) {
    output.writeFieldBegin('numSlots', Thrift.Type.I64, 3);
    output.writeI64(this.numSlots);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 4);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  if (this.numRowsPerSlot !== null && this.numRowsPerSlot !== undefined) {
    output.writeFieldBegin('numRowsPerSlot', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.numRowsPerSlot.length);
    for (var iter238 in this.numRowsPerSlot)
    {
      if (this.numRowsPerSlot.hasOwnProperty(iter238))
      {
        iter238 = this.numRowsPerSlot[iter238];
        output.writeI64(iter238);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numPagesPerSlot !== null && this.numPagesPerSlot !== undefined) {
    output.writeFieldBegin('numPagesPerSlot', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I64, this.numPagesPerSlot.length);
    for (var iter239 in this.numPagesPerSlot)
    {
      if (this.numPagesPerSlot.hasOwnProperty(iter239))
      {
        iter239 = this.numPagesPerSlot[iter239];
        output.writeI64(iter239);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.xdbPageConsumedInBytes !== null && this.xdbPageConsumedInBytes !== undefined) {
    output.writeFieldBegin('xdbPageConsumedInBytes', Thrift.Type.I64, 7);
    output.writeI64(this.xdbPageConsumedInBytes);
    output.writeFieldEnd();
  }
  if (this.xdbPageAllocatedInBytes !== null && this.xdbPageAllocatedInBytes !== undefined) {
    output.writeFieldBegin('xdbPageAllocatedInBytes', Thrift.Type.I64, 8);
    output.writeI64(this.xdbPageAllocatedInBytes);
    output.writeFieldEnd();
  }
  if (this.numTransPageSent !== null && this.numTransPageSent !== undefined) {
    output.writeFieldBegin('numTransPageSent', Thrift.Type.I64, 9);
    output.writeI64(this.numTransPageSent);
    output.writeFieldEnd();
  }
  if (this.numTransPageRecv !== null && this.numTransPageRecv !== undefined) {
    output.writeFieldBegin('numTransPageRecv', Thrift.Type.I64, 10);
    output.writeI64(this.numTransPageRecv);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetTableMetaOutputT = function(args) {
  this.numDatasets = null;
  this.datasets = null;
  this.numResultSets = null;
  this.resultSetIds = null;
  this.numKeys = null;
  this.keyAttr = null;
  this.numValues = null;
  this.numImmediates = null;
  this.valueAttrs = null;
  this.ordering = null;
  this.numMetas = null;
  this.metas = null;
  this.xdbId = null;
  if (args) {
    if (args.numDatasets !== undefined && args.numDatasets !== null) {
      this.numDatasets = args.numDatasets;
    }
    if (args.datasets !== undefined && args.datasets !== null) {
      this.datasets = Thrift.copyList(args.datasets, [null]);
    }
    if (args.numResultSets !== undefined && args.numResultSets !== null) {
      this.numResultSets = args.numResultSets;
    }
    if (args.resultSetIds !== undefined && args.resultSetIds !== null) {
      this.resultSetIds = Thrift.copyList(args.resultSetIds, [null]);
    }
    if (args.numKeys !== undefined && args.numKeys !== null) {
      this.numKeys = args.numKeys;
    }
    if (args.keyAttr !== undefined && args.keyAttr !== null) {
      this.keyAttr = Thrift.copyList(args.keyAttr, [DfFieldAttrHeaderT]);
    }
    if (args.numValues !== undefined && args.numValues !== null) {
      this.numValues = args.numValues;
    }
    if (args.numImmediates !== undefined && args.numImmediates !== null) {
      this.numImmediates = args.numImmediates;
    }
    if (args.valueAttrs !== undefined && args.valueAttrs !== null) {
      this.valueAttrs = Thrift.copyList(args.valueAttrs, [DfFieldAttrHeaderT]);
    }
    if (args.ordering !== undefined && args.ordering !== null) {
      this.ordering = args.ordering;
    }
    if (args.numMetas !== undefined && args.numMetas !== null) {
      this.numMetas = args.numMetas;
    }
    if (args.metas !== undefined && args.metas !== null) {
      this.metas = Thrift.copyList(args.metas, [XcalarApiTableMetaT]);
    }
    if (args.xdbId !== undefined && args.xdbId !== null) {
      this.xdbId = args.xdbId;
    }
  }
};
XcalarApiGetTableMetaOutputT.prototype = {};
XcalarApiGetTableMetaOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numDatasets = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size240 = 0;
        var _rtmp3244;
        this.datasets = [];
        var _etype243 = 0;
        _rtmp3244 = input.readListBegin();
        _etype243 = _rtmp3244.etype;
        _size240 = _rtmp3244.size;
        for (var _i245 = 0; _i245 < _size240; ++_i245)
        {
          var elem246 = null;
          elem246 = input.readString().value;
          this.datasets.push(elem246);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numResultSets = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size247 = 0;
        var _rtmp3251;
        this.resultSetIds = [];
        var _etype250 = 0;
        _rtmp3251 = input.readListBegin();
        _etype250 = _rtmp3251.etype;
        _size247 = _rtmp3251.size;
        for (var _i252 = 0; _i252 < _size247; ++_i252)
        {
          var elem253 = null;
          elem253 = input.readString().value;
          this.resultSetIds.push(elem253);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.numKeys = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size254 = 0;
        var _rtmp3258;
        this.keyAttr = [];
        var _etype257 = 0;
        _rtmp3258 = input.readListBegin();
        _etype257 = _rtmp3258.etype;
        _size254 = _rtmp3258.size;
        for (var _i259 = 0; _i259 < _size254; ++_i259)
        {
          var elem260 = null;
          elem260 = new DfFieldAttrHeaderT();
          elem260.read(input);
          this.keyAttr.push(elem260);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.numValues = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.numImmediates = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size261 = 0;
        var _rtmp3265;
        this.valueAttrs = [];
        var _etype264 = 0;
        _rtmp3265 = input.readListBegin();
        _etype264 = _rtmp3265.etype;
        _size261 = _rtmp3265.size;
        for (var _i266 = 0; _i266 < _size261; ++_i266)
        {
          var elem267 = null;
          elem267 = new DfFieldAttrHeaderT();
          elem267.read(input);
          this.valueAttrs.push(elem267);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.ordering = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.numMetas = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size268 = 0;
        var _rtmp3272;
        this.metas = [];
        var _etype271 = 0;
        _rtmp3272 = input.readListBegin();
        _etype271 = _rtmp3272.etype;
        _size268 = _rtmp3272.size;
        for (var _i273 = 0; _i273 < _size268; ++_i273)
        {
          var elem274 = null;
          elem274 = new XcalarApiTableMetaT();
          elem274.read(input);
          this.metas.push(elem274);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.xdbId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetTableMetaOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetTableMetaOutputT');
  if (this.numDatasets !== null && this.numDatasets !== undefined) {
    output.writeFieldBegin('numDatasets', Thrift.Type.I32, 1);
    output.writeI32(this.numDatasets);
    output.writeFieldEnd();
  }
  if (this.datasets !== null && this.datasets !== undefined) {
    output.writeFieldBegin('datasets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.datasets.length);
    for (var iter275 in this.datasets)
    {
      if (this.datasets.hasOwnProperty(iter275))
      {
        iter275 = this.datasets[iter275];
        output.writeString(iter275);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numResultSets !== null && this.numResultSets !== undefined) {
    output.writeFieldBegin('numResultSets', Thrift.Type.I32, 3);
    output.writeI32(this.numResultSets);
    output.writeFieldEnd();
  }
  if (this.resultSetIds !== null && this.resultSetIds !== undefined) {
    output.writeFieldBegin('resultSetIds', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.resultSetIds.length);
    for (var iter276 in this.resultSetIds)
    {
      if (this.resultSetIds.hasOwnProperty(iter276))
      {
        iter276 = this.resultSetIds[iter276];
        output.writeString(iter276);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numKeys !== null && this.numKeys !== undefined) {
    output.writeFieldBegin('numKeys', Thrift.Type.I32, 5);
    output.writeI32(this.numKeys);
    output.writeFieldEnd();
  }
  if (this.keyAttr !== null && this.keyAttr !== undefined) {
    output.writeFieldBegin('keyAttr', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.keyAttr.length);
    for (var iter277 in this.keyAttr)
    {
      if (this.keyAttr.hasOwnProperty(iter277))
      {
        iter277 = this.keyAttr[iter277];
        iter277.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numValues !== null && this.numValues !== undefined) {
    output.writeFieldBegin('numValues', Thrift.Type.I32, 7);
    output.writeI32(this.numValues);
    output.writeFieldEnd();
  }
  if (this.numImmediates !== null && this.numImmediates !== undefined) {
    output.writeFieldBegin('numImmediates', Thrift.Type.I32, 8);
    output.writeI32(this.numImmediates);
    output.writeFieldEnd();
  }
  if (this.valueAttrs !== null && this.valueAttrs !== undefined) {
    output.writeFieldBegin('valueAttrs', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.valueAttrs.length);
    for (var iter278 in this.valueAttrs)
    {
      if (this.valueAttrs.hasOwnProperty(iter278))
      {
        iter278 = this.valueAttrs[iter278];
        iter278.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.ordering !== null && this.ordering !== undefined) {
    output.writeFieldBegin('ordering', Thrift.Type.I32, 10);
    output.writeI32(this.ordering);
    output.writeFieldEnd();
  }
  if (this.numMetas !== null && this.numMetas !== undefined) {
    output.writeFieldBegin('numMetas', Thrift.Type.I64, 11);
    output.writeI64(this.numMetas);
    output.writeFieldEnd();
  }
  if (this.metas !== null && this.metas !== undefined) {
    output.writeFieldBegin('metas', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRUCT, this.metas.length);
    for (var iter279 in this.metas)
    {
      if (this.metas.hasOwnProperty(iter279))
      {
        iter279 = this.metas[iter279];
        iter279.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.xdbId !== null && this.xdbId !== undefined) {
    output.writeFieldBegin('xdbId', Thrift.Type.STRING, 13);
    output.writeString(this.xdbId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiMakeResultSetOutputT = function(args) {
  this.resultSetId = null;
  this.numEntries = null;
  this.metaOutput = null;
  if (args) {
    if (args.resultSetId !== undefined && args.resultSetId !== null) {
      this.resultSetId = args.resultSetId;
    }
    if (args.numEntries !== undefined && args.numEntries !== null) {
      this.numEntries = args.numEntries;
    }
    if (args.metaOutput !== undefined && args.metaOutput !== null) {
      this.metaOutput = new XcalarApiGetTableMetaOutputT(args.metaOutput);
    }
  }
};
XcalarApiMakeResultSetOutputT.prototype = {};
XcalarApiMakeResultSetOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.resultSetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numEntries = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.metaOutput = new XcalarApiGetTableMetaOutputT();
        this.metaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiMakeResultSetOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiMakeResultSetOutputT');
  if (this.resultSetId !== null && this.resultSetId !== undefined) {
    output.writeFieldBegin('resultSetId', Thrift.Type.STRING, 1);
    output.writeString(this.resultSetId);
    output.writeFieldEnd();
  }
  if (this.numEntries !== null && this.numEntries !== undefined) {
    output.writeFieldBegin('numEntries', Thrift.Type.I64, 2);
    output.writeI64(this.numEntries);
    output.writeFieldEnd();
  }
  if (this.metaOutput !== null && this.metaOutput !== undefined) {
    output.writeFieldBegin('metaOutput', Thrift.Type.STRUCT, 3);
    this.metaOutput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiResultSetNextOutputT = function(args) {
  this.numValues = null;
  this.values = null;
  if (args) {
    if (args.numValues !== undefined && args.numValues !== null) {
      this.numValues = args.numValues;
    }
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [null]);
    }
  }
};
XcalarApiResultSetNextOutputT.prototype = {};
XcalarApiResultSetNextOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numValues = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size280 = 0;
        var _rtmp3284;
        this.values = [];
        var _etype283 = 0;
        _rtmp3284 = input.readListBegin();
        _etype283 = _rtmp3284.etype;
        _size280 = _rtmp3284.size;
        for (var _i285 = 0; _i285 < _size280; ++_i285)
        {
          var elem286 = null;
          elem286 = input.readString().value;
          this.values.push(elem286);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiResultSetNextOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiResultSetNextOutputT');
  if (this.numValues !== null && this.numValues !== undefined) {
    output.writeFieldBegin('numValues', Thrift.Type.I64, 1);
    output.writeI64(this.numValues);
    output.writeFieldEnd();
  }
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.values.length);
    for (var iter287 in this.values)
    {
      if (this.values.hasOwnProperty(iter287))
      {
        iter287 = this.values[iter287];
        output.writeString(iter287);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagNodeInfoT = function(args) {
  this.name = null;
  this.dagNodeId = null;
  this.state = null;
  this.size = null;
  this.api = null;
  this.pinned = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.dagNodeId !== undefined && args.dagNodeId !== null) {
      this.dagNodeId = args.dagNodeId;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.api !== undefined && args.api !== null) {
      this.api = args.api;
    }
    if (args.pinned !== undefined && args.pinned !== null) {
      this.pinned = args.pinned;
    }
  }
};
XcalarApiDagNodeInfoT.prototype = {};
XcalarApiDagNodeInfoT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dagNodeId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.api = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.pinned = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagNodeInfoT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagNodeInfoT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.dagNodeId !== null && this.dagNodeId !== undefined) {
    output.writeFieldBegin('dagNodeId', Thrift.Type.STRING, 2);
    output.writeString(this.dagNodeId);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 3);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 4);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  if (this.api !== null && this.api !== undefined) {
    output.writeFieldBegin('api', Thrift.Type.I32, 5);
    output.writeI32(this.api);
    output.writeFieldEnd();
  }
  if (this.pinned !== null && this.pinned !== undefined) {
    output.writeFieldBegin('pinned', Thrift.Type.BOOL, 6);
    output.writeBool(this.pinned);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListDagNodesOutputT = function(args) {
  this.numNodes = null;
  this.nodeInfo = null;
  if (args) {
    if (args.numNodes !== undefined && args.numNodes !== null) {
      this.numNodes = args.numNodes;
    }
    if (args.nodeInfo !== undefined && args.nodeInfo !== null) {
      this.nodeInfo = Thrift.copyList(args.nodeInfo, [XcalarApiDagNodeInfoT]);
    }
  }
};
XcalarApiListDagNodesOutputT.prototype = {};
XcalarApiListDagNodesOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size288 = 0;
        var _rtmp3292;
        this.nodeInfo = [];
        var _etype291 = 0;
        _rtmp3292 = input.readListBegin();
        _etype291 = _rtmp3292.etype;
        _size288 = _rtmp3292.size;
        for (var _i293 = 0; _i293 < _size288; ++_i293)
        {
          var elem294 = null;
          elem294 = new XcalarApiDagNodeInfoT();
          elem294.read(input);
          this.nodeInfo.push(elem294);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListDagNodesOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListDagNodesOutputT');
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 1);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.nodeInfo !== null && this.nodeInfo !== undefined) {
    output.writeFieldBegin('nodeInfo', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.nodeInfo.length);
    for (var iter295 in this.nodeInfo)
    {
      if (this.nodeInfo.hasOwnProperty(iter295))
      {
        iter295 = this.nodeInfo[iter295];
        iter295.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionGenericOutputT = function(args) {
  this.outputAdded = null;
  this.nodeId = null;
  this.ipAddr = null;
  this.errorMessage = null;
  if (args) {
    if (args.outputAdded !== undefined && args.outputAdded !== null) {
      this.outputAdded = args.outputAdded;
    }
    if (args.nodeId !== undefined && args.nodeId !== null) {
      this.nodeId = args.nodeId;
    }
    if (args.ipAddr !== undefined && args.ipAddr !== null) {
      this.ipAddr = args.ipAddr;
    }
    if (args.errorMessage !== undefined && args.errorMessage !== null) {
      this.errorMessage = args.errorMessage;
    }
  }
};
XcalarApiSessionGenericOutputT.prototype = {};
XcalarApiSessionGenericOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.outputAdded = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.nodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ipAddr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.errorMessage = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionGenericOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionGenericOutputT');
  if (this.outputAdded !== null && this.outputAdded !== undefined) {
    output.writeFieldBegin('outputAdded', Thrift.Type.BOOL, 1);
    output.writeBool(this.outputAdded);
    output.writeFieldEnd();
  }
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.I64, 2);
    output.writeI64(this.nodeId);
    output.writeFieldEnd();
  }
  if (this.ipAddr !== null && this.ipAddr !== undefined) {
    output.writeFieldBegin('ipAddr', Thrift.Type.STRING, 3);
    output.writeString(this.ipAddr);
    output.writeFieldEnd();
  }
  if (this.errorMessage !== null && this.errorMessage !== undefined) {
    output.writeFieldBegin('errorMessage', Thrift.Type.STRING, 4);
    output.writeString(this.errorMessage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionPersistOutputT = function(args) {
  this.sessionGenericOutput = null;
  if (args) {
    if (args.sessionGenericOutput !== undefined && args.sessionGenericOutput !== null) {
      this.sessionGenericOutput = new XcalarApiSessionGenericOutputT(args.sessionGenericOutput);
    }
  }
};
XcalarApiSessionPersistOutputT.prototype = {};
XcalarApiSessionPersistOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionGenericOutput = new XcalarApiSessionGenericOutputT();
        this.sessionGenericOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionPersistOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionPersistOutputT');
  if (this.sessionGenericOutput !== null && this.sessionGenericOutput !== undefined) {
    output.writeFieldBegin('sessionGenericOutput', Thrift.Type.STRUCT, 1);
    this.sessionGenericOutput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListDatasetsOutputT = function(args) {
  this.numDatasets = null;
  this.datasets = null;
  if (args) {
    if (args.numDatasets !== undefined && args.numDatasets !== null) {
      this.numDatasets = args.numDatasets;
    }
    if (args.datasets !== undefined && args.datasets !== null) {
      this.datasets = Thrift.copyList(args.datasets, [XcalarApiDatasetT]);
    }
  }
};
XcalarApiListDatasetsOutputT.prototype = {};
XcalarApiListDatasetsOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numDatasets = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size296 = 0;
        var _rtmp3300;
        this.datasets = [];
        var _etype299 = 0;
        _rtmp3300 = input.readListBegin();
        _etype299 = _rtmp3300.etype;
        _size296 = _rtmp3300.size;
        for (var _i301 = 0; _i301 < _size296; ++_i301)
        {
          var elem302 = null;
          elem302 = new XcalarApiDatasetT();
          elem302.read(input);
          this.datasets.push(elem302);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListDatasetsOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListDatasetsOutputT');
  if (this.numDatasets !== null && this.numDatasets !== undefined) {
    output.writeFieldBegin('numDatasets', Thrift.Type.I32, 1);
    output.writeI32(this.numDatasets);
    output.writeFieldEnd();
  }
  if (this.datasets !== null && this.datasets !== undefined) {
    output.writeFieldBegin('datasets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.datasets.length);
    for (var iter303 in this.datasets)
    {
      if (this.datasets.hasOwnProperty(iter303))
      {
        iter303 = this.datasets[iter303];
        iter303.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetDatasetsInfoOutputT = function(args) {
  this.numDatasets = null;
  this.datasets = null;
  if (args) {
    if (args.numDatasets !== undefined && args.numDatasets !== null) {
      this.numDatasets = args.numDatasets;
    }
    if (args.datasets !== undefined && args.datasets !== null) {
      this.datasets = Thrift.copyList(args.datasets, [XcalarApiDatasetsInfoT]);
    }
  }
};
XcalarApiGetDatasetsInfoOutputT.prototype = {};
XcalarApiGetDatasetsInfoOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numDatasets = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size304 = 0;
        var _rtmp3308;
        this.datasets = [];
        var _etype307 = 0;
        _rtmp3308 = input.readListBegin();
        _etype307 = _rtmp3308.etype;
        _size304 = _rtmp3308.size;
        for (var _i309 = 0; _i309 < _size304; ++_i309)
        {
          var elem310 = null;
          elem310 = new XcalarApiDatasetsInfoT();
          elem310.read(input);
          this.datasets.push(elem310);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetDatasetsInfoOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetDatasetsInfoOutputT');
  if (this.numDatasets !== null && this.numDatasets !== undefined) {
    output.writeFieldBegin('numDatasets', Thrift.Type.I32, 1);
    output.writeI32(this.numDatasets);
    output.writeFieldEnd();
  }
  if (this.datasets !== null && this.datasets !== undefined) {
    output.writeFieldBegin('datasets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.datasets.length);
    for (var iter311 in this.datasets)
    {
      if (this.datasets.hasOwnProperty(iter311))
      {
        iter311 = this.datasets[iter311];
        iter311.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDeleteDagNodeStatusT = function(args) {
  this.nodeInfo = null;
  this.status = null;
  this.numRefs = null;
  this.refs = null;
  if (args) {
    if (args.nodeInfo !== undefined && args.nodeInfo !== null) {
      this.nodeInfo = new XcalarApiDagNodeInfoT(args.nodeInfo);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.numRefs !== undefined && args.numRefs !== null) {
      this.numRefs = args.numRefs;
    }
    if (args.refs !== undefined && args.refs !== null) {
      this.refs = Thrift.copyList(args.refs, [DagRefT]);
    }
  }
};
XcalarApiDeleteDagNodeStatusT.prototype = {};
XcalarApiDeleteDagNodeStatusT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.nodeInfo = new XcalarApiDagNodeInfoT();
        this.nodeInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numRefs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size312 = 0;
        var _rtmp3316;
        this.refs = [];
        var _etype315 = 0;
        _rtmp3316 = input.readListBegin();
        _etype315 = _rtmp3316.etype;
        _size312 = _rtmp3316.size;
        for (var _i317 = 0; _i317 < _size312; ++_i317)
        {
          var elem318 = null;
          elem318 = new DagRefT();
          elem318.read(input);
          this.refs.push(elem318);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDeleteDagNodeStatusT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDeleteDagNodeStatusT');
  if (this.nodeInfo !== null && this.nodeInfo !== undefined) {
    output.writeFieldBegin('nodeInfo', Thrift.Type.STRUCT, 1);
    this.nodeInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.numRefs !== null && this.numRefs !== undefined) {
    output.writeFieldBegin('numRefs', Thrift.Type.I64, 3);
    output.writeI64(this.numRefs);
    output.writeFieldEnd();
  }
  if (this.refs !== null && this.refs !== undefined) {
    output.writeFieldBegin('refs', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.refs.length);
    for (var iter319 in this.refs)
    {
      if (this.refs.hasOwnProperty(iter319))
      {
        iter319 = this.refs[iter319];
        iter319.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDeleteDagNodeOutputT = function(args) {
  this.numNodes = null;
  this.statuses = null;
  if (args) {
    if (args.numNodes !== undefined && args.numNodes !== null) {
      this.numNodes = args.numNodes;
    }
    if (args.statuses !== undefined && args.statuses !== null) {
      this.statuses = Thrift.copyList(args.statuses, [XcalarApiDeleteDagNodeStatusT]);
    }
  }
};
XcalarApiDeleteDagNodeOutputT.prototype = {};
XcalarApiDeleteDagNodeOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size320 = 0;
        var _rtmp3324;
        this.statuses = [];
        var _etype323 = 0;
        _rtmp3324 = input.readListBegin();
        _etype323 = _rtmp3324.etype;
        _size320 = _rtmp3324.size;
        for (var _i325 = 0; _i325 < _size320; ++_i325)
        {
          var elem326 = null;
          elem326 = new XcalarApiDeleteDagNodeStatusT();
          elem326.read(input);
          this.statuses.push(elem326);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDeleteDagNodeOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDeleteDagNodeOutputT');
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 1);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.statuses !== null && this.statuses !== undefined) {
    output.writeFieldBegin('statuses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.statuses.length);
    for (var iter327 in this.statuses)
    {
      if (this.statuses.hasOwnProperty(iter327))
      {
        iter327 = this.statuses[iter327];
        iter327.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetUnloadStatusT = function(args) {
  this.dataset = null;
  this.status = null;
  if (args) {
    if (args.dataset !== undefined && args.dataset !== null) {
      this.dataset = new XcalarApiDatasetT(args.dataset);
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
XcalarApiDatasetUnloadStatusT.prototype = {};
XcalarApiDatasetUnloadStatusT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.dataset = new XcalarApiDatasetT();
        this.dataset.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDatasetUnloadStatusT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDatasetUnloadStatusT');
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.STRUCT, 1);
    this.dataset.write(output);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetUnloadOutputT = function(args) {
  this.numDatasets = null;
  this.statuses = null;
  if (args) {
    if (args.numDatasets !== undefined && args.numDatasets !== null) {
      this.numDatasets = args.numDatasets;
    }
    if (args.statuses !== undefined && args.statuses !== null) {
      this.statuses = Thrift.copyList(args.statuses, [XcalarApiDatasetUnloadStatusT]);
    }
  }
};
XcalarApiDatasetUnloadOutputT.prototype = {};
XcalarApiDatasetUnloadOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numDatasets = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size328 = 0;
        var _rtmp3332;
        this.statuses = [];
        var _etype331 = 0;
        _rtmp3332 = input.readListBegin();
        _etype331 = _rtmp3332.etype;
        _size328 = _rtmp3332.size;
        for (var _i333 = 0; _i333 < _size328; ++_i333)
        {
          var elem334 = null;
          elem334 = new XcalarApiDatasetUnloadStatusT();
          elem334.read(input);
          this.statuses.push(elem334);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDatasetUnloadOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDatasetUnloadOutputT');
  if (this.numDatasets !== null && this.numDatasets !== undefined) {
    output.writeFieldBegin('numDatasets', Thrift.Type.I64, 1);
    output.writeI64(this.numDatasets);
    output.writeFieldEnd();
  }
  if (this.statuses !== null && this.statuses !== undefined) {
    output.writeFieldBegin('statuses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.statuses.length);
    for (var iter335 in this.statuses)
    {
      if (this.statuses.hasOwnProperty(iter335))
      {
        iter335 = this.statuses[iter335];
        iter335.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiNewTableOutputT = function(args) {
  this.tableName = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
  }
};
XcalarApiNewTableOutputT.prototype = {};
XcalarApiNewTableOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiNewTableOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiNewTableOutputT');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetTableRefCountOutputT = function(args) {
  this.refCount = null;
  if (args) {
    if (args.refCount !== undefined && args.refCount !== null) {
      this.refCount = args.refCount;
    }
  }
};
XcalarApiGetTableRefCountOutputT.prototype = {};
XcalarApiGetTableRefCountOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.refCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetTableRefCountOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetTableRefCountOutputT');
  if (this.refCount !== null && this.refCount !== undefined) {
    output.writeFieldBegin('refCount', Thrift.Type.I64, 1);
    output.writeI64(this.refCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiQueryOutputT = function(args) {
  this.queryName = null;
  if (args) {
    if (args.queryName !== undefined && args.queryName !== null) {
      this.queryName = args.queryName;
    }
  }
};
XcalarApiQueryOutputT.prototype = {};
XcalarApiQueryOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queryName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiQueryOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiQueryOutputT');
  if (this.queryName !== null && this.queryName !== undefined) {
    output.writeFieldBegin('queryName', Thrift.Type.STRING, 1);
    output.writeString(this.queryName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiBulkLoadOutputT = function(args) {
  this.dataset = null;
  this.numFiles = null;
  this.numBytes = null;
  this.errorString = null;
  this.errorFile = null;
  if (args) {
    if (args.dataset !== undefined && args.dataset !== null) {
      this.dataset = new XcalarApiDatasetT(args.dataset);
    }
    if (args.numFiles !== undefined && args.numFiles !== null) {
      this.numFiles = args.numFiles;
    }
    if (args.numBytes !== undefined && args.numBytes !== null) {
      this.numBytes = args.numBytes;
    }
    if (args.errorString !== undefined && args.errorString !== null) {
      this.errorString = args.errorString;
    }
    if (args.errorFile !== undefined && args.errorFile !== null) {
      this.errorFile = args.errorFile;
    }
  }
};
XcalarApiBulkLoadOutputT.prototype = {};
XcalarApiBulkLoadOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.dataset = new XcalarApiDatasetT();
        this.dataset.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numFiles = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.errorString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.errorFile = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiBulkLoadOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiBulkLoadOutputT');
  if (this.dataset !== null && this.dataset !== undefined) {
    output.writeFieldBegin('dataset', Thrift.Type.STRUCT, 1);
    this.dataset.write(output);
    output.writeFieldEnd();
  }
  if (this.numFiles !== null && this.numFiles !== undefined) {
    output.writeFieldBegin('numFiles', Thrift.Type.I64, 2);
    output.writeI64(this.numFiles);
    output.writeFieldEnd();
  }
  if (this.numBytes !== null && this.numBytes !== undefined) {
    output.writeFieldBegin('numBytes', Thrift.Type.I64, 3);
    output.writeI64(this.numBytes);
    output.writeFieldEnd();
  }
  if (this.errorString !== null && this.errorString !== undefined) {
    output.writeFieldBegin('errorString', Thrift.Type.STRING, 4);
    output.writeString(this.errorString);
    output.writeFieldEnd();
  }
  if (this.errorFile !== null && this.errorFile !== undefined) {
    output.writeFieldBegin('errorFile', Thrift.Type.STRING, 5);
    output.writeString(this.errorFile);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetVersionOutputT = function(args) {
  this.version = null;
  this.apiVersionSignatureFull = null;
  this.apiVersionSignatureShort = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.apiVersionSignatureFull !== undefined && args.apiVersionSignatureFull !== null) {
      this.apiVersionSignatureFull = args.apiVersionSignatureFull;
    }
    if (args.apiVersionSignatureShort !== undefined && args.apiVersionSignatureShort !== null) {
      this.apiVersionSignatureShort = args.apiVersionSignatureShort;
    }
  }
};
XcalarApiGetVersionOutputT.prototype = {};
XcalarApiGetVersionOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.version = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.apiVersionSignatureFull = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.apiVersionSignatureShort = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetVersionOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetVersionOutputT');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRING, 1);
    output.writeString(this.version);
    output.writeFieldEnd();
  }
  if (this.apiVersionSignatureFull !== null && this.apiVersionSignatureFull !== undefined) {
    output.writeFieldBegin('apiVersionSignatureFull', Thrift.Type.STRING, 2);
    output.writeString(this.apiVersionSignatureFull);
    output.writeFieldEnd();
  }
  if (this.apiVersionSignatureShort !== null && this.apiVersionSignatureShort !== undefined) {
    output.writeFieldBegin('apiVersionSignatureShort', Thrift.Type.I32, 3);
    output.writeI32(this.apiVersionSignatureShort);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiAggregateOutputT = function(args) {
  this.tableName = null;
  this.jsonAnswer = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.jsonAnswer !== undefined && args.jsonAnswer !== null) {
      this.jsonAnswer = args.jsonAnswer;
    }
  }
};
XcalarApiAggregateOutputT.prototype = {};
XcalarApiAggregateOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.jsonAnswer = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiAggregateOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiAggregateOutputT');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.jsonAnswer !== null && this.jsonAnswer !== undefined) {
    output.writeFieldBegin('jsonAnswer', Thrift.Type.STRING, 2);
    output.writeString(this.jsonAnswer);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSingleQueryT = function(args) {
  this.singleQuery = null;
  this.status = null;
  if (args) {
    if (args.singleQuery !== undefined && args.singleQuery !== null) {
      this.singleQuery = args.singleQuery;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
XcalarApiSingleQueryT.prototype = {};
XcalarApiSingleQueryT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.singleQuery = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSingleQueryT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSingleQueryT');
  if (this.singleQuery !== null && this.singleQuery !== undefined) {
    output.writeFieldBegin('singleQuery', Thrift.Type.STRING, 1);
    output.writeString(this.singleQuery);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTopInputT = function(args) {
  this.measureIntervalInMs = null;
  this.cacheValidityInMs = null;
  this.topStatsRequestType = null;
  if (args) {
    if (args.measureIntervalInMs !== undefined && args.measureIntervalInMs !== null) {
      this.measureIntervalInMs = args.measureIntervalInMs;
    }
    if (args.cacheValidityInMs !== undefined && args.cacheValidityInMs !== null) {
      this.cacheValidityInMs = args.cacheValidityInMs;
    }
    if (args.topStatsRequestType !== undefined && args.topStatsRequestType !== null) {
      this.topStatsRequestType = args.topStatsRequestType;
    }
  }
};
XcalarApiTopInputT.prototype = {};
XcalarApiTopInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.measureIntervalInMs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.cacheValidityInMs = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.topStatsRequestType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTopInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTopInputT');
  if (this.measureIntervalInMs !== null && this.measureIntervalInMs !== undefined) {
    output.writeFieldBegin('measureIntervalInMs', Thrift.Type.I64, 1);
    output.writeI64(this.measureIntervalInMs);
    output.writeFieldEnd();
  }
  if (this.cacheValidityInMs !== null && this.cacheValidityInMs !== undefined) {
    output.writeFieldBegin('cacheValidityInMs', Thrift.Type.I64, 2);
    output.writeI64(this.cacheValidityInMs);
    output.writeFieldEnd();
  }
  if (this.topStatsRequestType !== null && this.topStatsRequestType !== undefined) {
    output.writeFieldBegin('topStatsRequestType', Thrift.Type.I32, 3);
    output.writeI32(this.topStatsRequestType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTopOutputPerNodeT = function(args) {
  this.nodeId = null;
  this.cpuUsageInPercent = null;
  this.memUsageInPercent = null;
  this.memUsedInBytes = null;
  this.totalAvailableMemInBytes = null;
  this.networkRecvInBytesPerSec = null;
  this.networkSendInBytesPerSec = null;
  this.xdbUsedBytes = null;
  this.xdbTotalBytes = null;
  this.parentCpuUsageInPercent = null;
  this.childrenCpuUsageInPercent = null;
  this.numCores = null;
  this.sysSwapUsedInBytes = null;
  this.sysSwapTotalInBytes = null;
  this.uptimeInSeconds = null;
  this.datasetUsedBytes = null;
  this.sysMemUsedInBytes = null;
  this.publishedTableUsedBytes = null;
  if (args) {
    if (args.nodeId !== undefined && args.nodeId !== null) {
      this.nodeId = args.nodeId;
    }
    if (args.cpuUsageInPercent !== undefined && args.cpuUsageInPercent !== null) {
      this.cpuUsageInPercent = args.cpuUsageInPercent;
    }
    if (args.memUsageInPercent !== undefined && args.memUsageInPercent !== null) {
      this.memUsageInPercent = args.memUsageInPercent;
    }
    if (args.memUsedInBytes !== undefined && args.memUsedInBytes !== null) {
      this.memUsedInBytes = args.memUsedInBytes;
    }
    if (args.totalAvailableMemInBytes !== undefined && args.totalAvailableMemInBytes !== null) {
      this.totalAvailableMemInBytes = args.totalAvailableMemInBytes;
    }
    if (args.networkRecvInBytesPerSec !== undefined && args.networkRecvInBytesPerSec !== null) {
      this.networkRecvInBytesPerSec = args.networkRecvInBytesPerSec;
    }
    if (args.networkSendInBytesPerSec !== undefined && args.networkSendInBytesPerSec !== null) {
      this.networkSendInBytesPerSec = args.networkSendInBytesPerSec;
    }
    if (args.xdbUsedBytes !== undefined && args.xdbUsedBytes !== null) {
      this.xdbUsedBytes = args.xdbUsedBytes;
    }
    if (args.xdbTotalBytes !== undefined && args.xdbTotalBytes !== null) {
      this.xdbTotalBytes = args.xdbTotalBytes;
    }
    if (args.parentCpuUsageInPercent !== undefined && args.parentCpuUsageInPercent !== null) {
      this.parentCpuUsageInPercent = args.parentCpuUsageInPercent;
    }
    if (args.childrenCpuUsageInPercent !== undefined && args.childrenCpuUsageInPercent !== null) {
      this.childrenCpuUsageInPercent = args.childrenCpuUsageInPercent;
    }
    if (args.numCores !== undefined && args.numCores !== null) {
      this.numCores = args.numCores;
    }
    if (args.sysSwapUsedInBytes !== undefined && args.sysSwapUsedInBytes !== null) {
      this.sysSwapUsedInBytes = args.sysSwapUsedInBytes;
    }
    if (args.sysSwapTotalInBytes !== undefined && args.sysSwapTotalInBytes !== null) {
      this.sysSwapTotalInBytes = args.sysSwapTotalInBytes;
    }
    if (args.uptimeInSeconds !== undefined && args.uptimeInSeconds !== null) {
      this.uptimeInSeconds = args.uptimeInSeconds;
    }
    if (args.datasetUsedBytes !== undefined && args.datasetUsedBytes !== null) {
      this.datasetUsedBytes = args.datasetUsedBytes;
    }
    if (args.sysMemUsedInBytes !== undefined && args.sysMemUsedInBytes !== null) {
      this.sysMemUsedInBytes = args.sysMemUsedInBytes;
    }
    if (args.publishedTableUsedBytes !== undefined && args.publishedTableUsedBytes !== null) {
      this.publishedTableUsedBytes = args.publishedTableUsedBytes;
    }
  }
};
XcalarApiTopOutputPerNodeT.prototype = {};
XcalarApiTopOutputPerNodeT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.nodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.cpuUsageInPercent = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.memUsageInPercent = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.memUsedInBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.totalAvailableMemInBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.networkRecvInBytesPerSec = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.networkSendInBytesPerSec = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.xdbUsedBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.xdbTotalBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.parentCpuUsageInPercent = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.childrenCpuUsageInPercent = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.numCores = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I64) {
        this.sysSwapUsedInBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.sysSwapTotalInBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I64) {
        this.uptimeInSeconds = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.datasetUsedBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I64) {
        this.sysMemUsedInBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.publishedTableUsedBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTopOutputPerNodeT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTopOutputPerNodeT');
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.I64, 1);
    output.writeI64(this.nodeId);
    output.writeFieldEnd();
  }
  if (this.cpuUsageInPercent !== null && this.cpuUsageInPercent !== undefined) {
    output.writeFieldBegin('cpuUsageInPercent', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.cpuUsageInPercent);
    output.writeFieldEnd();
  }
  if (this.memUsageInPercent !== null && this.memUsageInPercent !== undefined) {
    output.writeFieldBegin('memUsageInPercent', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.memUsageInPercent);
    output.writeFieldEnd();
  }
  if (this.memUsedInBytes !== null && this.memUsedInBytes !== undefined) {
    output.writeFieldBegin('memUsedInBytes', Thrift.Type.I64, 4);
    output.writeI64(this.memUsedInBytes);
    output.writeFieldEnd();
  }
  if (this.totalAvailableMemInBytes !== null && this.totalAvailableMemInBytes !== undefined) {
    output.writeFieldBegin('totalAvailableMemInBytes', Thrift.Type.I64, 5);
    output.writeI64(this.totalAvailableMemInBytes);
    output.writeFieldEnd();
  }
  if (this.networkRecvInBytesPerSec !== null && this.networkRecvInBytesPerSec !== undefined) {
    output.writeFieldBegin('networkRecvInBytesPerSec', Thrift.Type.I64, 6);
    output.writeI64(this.networkRecvInBytesPerSec);
    output.writeFieldEnd();
  }
  if (this.networkSendInBytesPerSec !== null && this.networkSendInBytesPerSec !== undefined) {
    output.writeFieldBegin('networkSendInBytesPerSec', Thrift.Type.I64, 7);
    output.writeI64(this.networkSendInBytesPerSec);
    output.writeFieldEnd();
  }
  if (this.xdbUsedBytes !== null && this.xdbUsedBytes !== undefined) {
    output.writeFieldBegin('xdbUsedBytes', Thrift.Type.I64, 8);
    output.writeI64(this.xdbUsedBytes);
    output.writeFieldEnd();
  }
  if (this.xdbTotalBytes !== null && this.xdbTotalBytes !== undefined) {
    output.writeFieldBegin('xdbTotalBytes', Thrift.Type.I64, 9);
    output.writeI64(this.xdbTotalBytes);
    output.writeFieldEnd();
  }
  if (this.parentCpuUsageInPercent !== null && this.parentCpuUsageInPercent !== undefined) {
    output.writeFieldBegin('parentCpuUsageInPercent', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.parentCpuUsageInPercent);
    output.writeFieldEnd();
  }
  if (this.childrenCpuUsageInPercent !== null && this.childrenCpuUsageInPercent !== undefined) {
    output.writeFieldBegin('childrenCpuUsageInPercent', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.childrenCpuUsageInPercent);
    output.writeFieldEnd();
  }
  if (this.numCores !== null && this.numCores !== undefined) {
    output.writeFieldBegin('numCores', Thrift.Type.I64, 12);
    output.writeI64(this.numCores);
    output.writeFieldEnd();
  }
  if (this.sysSwapUsedInBytes !== null && this.sysSwapUsedInBytes !== undefined) {
    output.writeFieldBegin('sysSwapUsedInBytes', Thrift.Type.I64, 13);
    output.writeI64(this.sysSwapUsedInBytes);
    output.writeFieldEnd();
  }
  if (this.sysSwapTotalInBytes !== null && this.sysSwapTotalInBytes !== undefined) {
    output.writeFieldBegin('sysSwapTotalInBytes', Thrift.Type.I64, 14);
    output.writeI64(this.sysSwapTotalInBytes);
    output.writeFieldEnd();
  }
  if (this.uptimeInSeconds !== null && this.uptimeInSeconds !== undefined) {
    output.writeFieldBegin('uptimeInSeconds', Thrift.Type.I64, 15);
    output.writeI64(this.uptimeInSeconds);
    output.writeFieldEnd();
  }
  if (this.datasetUsedBytes !== null && this.datasetUsedBytes !== undefined) {
    output.writeFieldBegin('datasetUsedBytes', Thrift.Type.I64, 16);
    output.writeI64(this.datasetUsedBytes);
    output.writeFieldEnd();
  }
  if (this.sysMemUsedInBytes !== null && this.sysMemUsedInBytes !== undefined) {
    output.writeFieldBegin('sysMemUsedInBytes', Thrift.Type.I64, 17);
    output.writeI64(this.sysMemUsedInBytes);
    output.writeFieldEnd();
  }
  if (this.publishedTableUsedBytes !== null && this.publishedTableUsedBytes !== undefined) {
    output.writeFieldBegin('publishedTableUsedBytes', Thrift.Type.I64, 18);
    output.writeI64(this.publishedTableUsedBytes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTopOutputT = function(args) {
  this.status = null;
  this.numNodes = null;
  this.topOutputPerNode = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.numNodes !== undefined && args.numNodes !== null) {
      this.numNodes = args.numNodes;
    }
    if (args.topOutputPerNode !== undefined && args.topOutputPerNode !== null) {
      this.topOutputPerNode = Thrift.copyList(args.topOutputPerNode, [XcalarApiTopOutputPerNodeT]);
    }
  }
};
XcalarApiTopOutputT.prototype = {};
XcalarApiTopOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size336 = 0;
        var _rtmp3340;
        this.topOutputPerNode = [];
        var _etype339 = 0;
        _rtmp3340 = input.readListBegin();
        _etype339 = _rtmp3340.etype;
        _size336 = _rtmp3340.size;
        for (var _i341 = 0; _i341 < _size336; ++_i341)
        {
          var elem342 = null;
          elem342 = new XcalarApiTopOutputPerNodeT();
          elem342.read(input);
          this.topOutputPerNode.push(elem342);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTopOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTopOutputT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 2);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.topOutputPerNode !== null && this.topOutputPerNode !== undefined) {
    output.writeFieldBegin('topOutputPerNode', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.topOutputPerNode.length);
    for (var iter343 in this.topOutputPerNode)
    {
      if (this.topOutputPerNode.hasOwnProperty(iter343))
      {
        iter343 = this.topOutputPerNode[iter343];
        iter343.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiQueryInputT = function(args) {
  this.sameSession = null;
  this.queryName = null;
  this.queryStr = null;
  this.bailOnError = null;
  this.schedName = null;
  this.isAsync = null;
  this.udfUserName = null;
  this.udfSessionName = null;
  this.pinResults = null;
  this.collectStats = null;
  if (args) {
    if (args.sameSession !== undefined && args.sameSession !== null) {
      this.sameSession = args.sameSession;
    }
    if (args.queryName !== undefined && args.queryName !== null) {
      this.queryName = args.queryName;
    }
    if (args.queryStr !== undefined && args.queryStr !== null) {
      this.queryStr = args.queryStr;
    }
    if (args.bailOnError !== undefined && args.bailOnError !== null) {
      this.bailOnError = args.bailOnError;
    }
    if (args.schedName !== undefined && args.schedName !== null) {
      this.schedName = args.schedName;
    }
    if (args.isAsync !== undefined && args.isAsync !== null) {
      this.isAsync = args.isAsync;
    }
    if (args.udfUserName !== undefined && args.udfUserName !== null) {
      this.udfUserName = args.udfUserName;
    }
    if (args.udfSessionName !== undefined && args.udfSessionName !== null) {
      this.udfSessionName = args.udfSessionName;
    }
    if (args.pinResults !== undefined && args.pinResults !== null) {
      this.pinResults = args.pinResults;
    }
    if (args.collectStats !== undefined && args.collectStats !== null) {
      this.collectStats = args.collectStats;
    }
  }
};
XcalarApiQueryInputT.prototype = {};
XcalarApiQueryInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.sameSession = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.queryName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.queryStr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.bailOnError = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.schedName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isAsync = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.udfUserName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.udfSessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.pinResults = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.collectStats = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiQueryInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiQueryInputT');
  if (this.sameSession !== null && this.sameSession !== undefined) {
    output.writeFieldBegin('sameSession', Thrift.Type.BOOL, 1);
    output.writeBool(this.sameSession);
    output.writeFieldEnd();
  }
  if (this.queryName !== null && this.queryName !== undefined) {
    output.writeFieldBegin('queryName', Thrift.Type.STRING, 2);
    output.writeString(this.queryName);
    output.writeFieldEnd();
  }
  if (this.queryStr !== null && this.queryStr !== undefined) {
    output.writeFieldBegin('queryStr', Thrift.Type.STRING, 3);
    output.writeString(this.queryStr);
    output.writeFieldEnd();
  }
  if (this.bailOnError !== null && this.bailOnError !== undefined) {
    output.writeFieldBegin('bailOnError', Thrift.Type.BOOL, 4);
    output.writeBool(this.bailOnError);
    output.writeFieldEnd();
  }
  if (this.schedName !== null && this.schedName !== undefined) {
    output.writeFieldBegin('schedName', Thrift.Type.STRING, 5);
    output.writeString(this.schedName);
    output.writeFieldEnd();
  }
  if (this.isAsync !== null && this.isAsync !== undefined) {
    output.writeFieldBegin('isAsync', Thrift.Type.BOOL, 6);
    output.writeBool(this.isAsync);
    output.writeFieldEnd();
  }
  if (this.udfUserName !== null && this.udfUserName !== undefined) {
    output.writeFieldBegin('udfUserName', Thrift.Type.STRING, 7);
    output.writeString(this.udfUserName);
    output.writeFieldEnd();
  }
  if (this.udfSessionName !== null && this.udfSessionName !== undefined) {
    output.writeFieldBegin('udfSessionName', Thrift.Type.STRING, 8);
    output.writeString(this.udfSessionName);
    output.writeFieldEnd();
  }
  if (this.pinResults !== null && this.pinResults !== undefined) {
    output.writeFieldBegin('pinResults', Thrift.Type.BOOL, 9);
    output.writeBool(this.pinResults);
    output.writeFieldEnd();
  }
  if (this.collectStats !== null && this.collectStats !== undefined) {
    output.writeFieldBegin('collectStats', Thrift.Type.BOOL, 10);
    output.writeBool(this.collectStats);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiQueryListInputT = function(args) {
  this.namePattern = null;
  if (args) {
    if (args.namePattern !== undefined && args.namePattern !== null) {
      this.namePattern = args.namePattern;
    }
  }
};
XcalarApiQueryListInputT.prototype = {};
XcalarApiQueryListInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.namePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiQueryListInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiQueryListInputT');
  if (this.namePattern !== null && this.namePattern !== undefined) {
    output.writeFieldBegin('namePattern', Thrift.Type.STRING, 1);
    output.writeString(this.namePattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUserIdT = function(args) {
  this.userIdName = null;
  if (args) {
    if (args.userIdName !== undefined && args.userIdName !== null) {
      this.userIdName = args.userIdName;
    }
  }
};
XcalarApiUserIdT.prototype = {};
XcalarApiUserIdT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userIdName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUserIdT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUserIdT');
  if (this.userIdName !== null && this.userIdName !== undefined) {
    output.writeFieldBegin('userIdName', Thrift.Type.STRING, 1);
    output.writeString(this.userIdName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionNewInputT = function(args) {
  this.sessionName = null;
  this.fork = null;
  this.forkedSessionName = null;
  if (args) {
    if (args.sessionName !== undefined && args.sessionName !== null) {
      this.sessionName = args.sessionName;
    }
    if (args.fork !== undefined && args.fork !== null) {
      this.fork = args.fork;
    }
    if (args.forkedSessionName !== undefined && args.forkedSessionName !== null) {
      this.forkedSessionName = args.forkedSessionName;
    }
  }
};
XcalarApiSessionNewInputT.prototype = {};
XcalarApiSessionNewInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.fork = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.forkedSessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionNewInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionNewInputT');
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 1);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  if (this.fork !== null && this.fork !== undefined) {
    output.writeFieldBegin('fork', Thrift.Type.BOOL, 2);
    output.writeBool(this.fork);
    output.writeFieldEnd();
  }
  if (this.forkedSessionName !== null && this.forkedSessionName !== undefined) {
    output.writeFieldBegin('forkedSessionName', Thrift.Type.STRING, 3);
    output.writeString(this.forkedSessionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionNewOutputT = function(args) {
  this.sessionGenericOutput = null;
  this.sessionId = null;
  if (args) {
    if (args.sessionGenericOutput !== undefined && args.sessionGenericOutput !== null) {
      this.sessionGenericOutput = new XcalarApiSessionGenericOutputT(args.sessionGenericOutput);
    }
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
  }
};
XcalarApiSessionNewOutputT.prototype = {};
XcalarApiSessionNewOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionGenericOutput = new XcalarApiSessionGenericOutputT();
        this.sessionGenericOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionNewOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionNewOutputT');
  if (this.sessionGenericOutput !== null && this.sessionGenericOutput !== undefined) {
    output.writeFieldBegin('sessionGenericOutput', Thrift.Type.STRUCT, 1);
    this.sessionGenericOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 2);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionDeleteInputT = function(args) {
  this.sessionName = null;
  this.noCleanup = null;
  if (args) {
    if (args.sessionName !== undefined && args.sessionName !== null) {
      this.sessionName = args.sessionName;
    }
    if (args.noCleanup !== undefined && args.noCleanup !== null) {
      this.noCleanup = args.noCleanup;
    }
  }
};
XcalarApiSessionDeleteInputT.prototype = {};
XcalarApiSessionDeleteInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.noCleanup = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionDeleteInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionDeleteInputT');
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 1);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  if (this.noCleanup !== null && this.noCleanup !== undefined) {
    output.writeFieldBegin('noCleanup', Thrift.Type.BOOL, 2);
    output.writeBool(this.noCleanup);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiPtChangeOwnerInputT = function(args) {
  this.publishTableName = null;
  this.userIdName = null;
  this.sessionName = null;
  if (args) {
    if (args.publishTableName !== undefined && args.publishTableName !== null) {
      this.publishTableName = args.publishTableName;
    }
    if (args.userIdName !== undefined && args.userIdName !== null) {
      this.userIdName = args.userIdName;
    }
    if (args.sessionName !== undefined && args.sessionName !== null) {
      this.sessionName = args.sessionName;
    }
  }
};
XcalarApiPtChangeOwnerInputT.prototype = {};
XcalarApiPtChangeOwnerInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.publishTableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userIdName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiPtChangeOwnerInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiPtChangeOwnerInputT');
  if (this.publishTableName !== null && this.publishTableName !== undefined) {
    output.writeFieldBegin('publishTableName', Thrift.Type.STRING, 1);
    output.writeString(this.publishTableName);
    output.writeFieldEnd();
  }
  if (this.userIdName !== null && this.userIdName !== undefined) {
    output.writeFieldBegin('userIdName', Thrift.Type.STRING, 2);
    output.writeString(this.userIdName);
    output.writeFieldEnd();
  }
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 3);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionActivateInputT = function(args) {
  this.sessionName = null;
  if (args) {
    if (args.sessionName !== undefined && args.sessionName !== null) {
      this.sessionName = args.sessionName;
    }
  }
};
XcalarApiSessionActivateInputT.prototype = {};
XcalarApiSessionActivateInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionActivateInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionActivateInputT');
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 1);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSchedParamT = function(args) {
  this.schedName = null;
  this.cpusReservedInPercent = null;
  this.runtimeType = null;
  if (args) {
    if (args.schedName !== undefined && args.schedName !== null) {
      this.schedName = args.schedName;
    }
    if (args.cpusReservedInPercent !== undefined && args.cpusReservedInPercent !== null) {
      this.cpusReservedInPercent = args.cpusReservedInPercent;
    }
    if (args.runtimeType !== undefined && args.runtimeType !== null) {
      this.runtimeType = args.runtimeType;
    }
  }
};
XcalarApiSchedParamT.prototype = {};
XcalarApiSchedParamT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.schedName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.cpusReservedInPercent = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.runtimeType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSchedParamT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSchedParamT');
  if (this.schedName !== null && this.schedName !== undefined) {
    output.writeFieldBegin('schedName', Thrift.Type.STRING, 1);
    output.writeString(this.schedName);
    output.writeFieldEnd();
  }
  if (this.cpusReservedInPercent !== null && this.cpusReservedInPercent !== undefined) {
    output.writeFieldBegin('cpusReservedInPercent', Thrift.Type.I32, 2);
    output.writeI32(this.cpusReservedInPercent);
    output.writeFieldEnd();
  }
  if (this.runtimeType !== null && this.runtimeType !== undefined) {
    output.writeFieldBegin('runtimeType', Thrift.Type.I32, 3);
    output.writeI32(this.runtimeType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiRuntimeSetParamInputT = function(args) {
  this.schedParams = null;
  if (args) {
    if (args.schedParams !== undefined && args.schedParams !== null) {
      this.schedParams = Thrift.copyList(args.schedParams, [XcalarApiSchedParamT]);
    }
  }
};
XcalarApiRuntimeSetParamInputT.prototype = {};
XcalarApiRuntimeSetParamInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size344 = 0;
        var _rtmp3348;
        this.schedParams = [];
        var _etype347 = 0;
        _rtmp3348 = input.readListBegin();
        _etype347 = _rtmp3348.etype;
        _size344 = _rtmp3348.size;
        for (var _i349 = 0; _i349 < _size344; ++_i349)
        {
          var elem350 = null;
          elem350 = new XcalarApiSchedParamT();
          elem350.read(input);
          this.schedParams.push(elem350);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiRuntimeSetParamInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiRuntimeSetParamInputT');
  if (this.schedParams !== null && this.schedParams !== undefined) {
    output.writeFieldBegin('schedParams', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.schedParams.length);
    for (var iter351 in this.schedParams)
    {
      if (this.schedParams.hasOwnProperty(iter351))
      {
        iter351 = this.schedParams[iter351];
        iter351.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionRenameInputT = function(args) {
  this.sessionName = null;
  this.origSessionName = null;
  if (args) {
    if (args.sessionName !== undefined && args.sessionName !== null) {
      this.sessionName = args.sessionName;
    }
    if (args.origSessionName !== undefined && args.origSessionName !== null) {
      this.origSessionName = args.origSessionName;
    }
  }
};
XcalarApiSessionRenameInputT.prototype = {};
XcalarApiSessionRenameInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.origSessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionRenameInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionRenameInputT');
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 1);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  if (this.origSessionName !== null && this.origSessionName !== undefined) {
    output.writeFieldBegin('origSessionName', Thrift.Type.STRING, 2);
    output.writeString(this.origSessionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionDownloadInputT = function(args) {
  this.sessionName = null;
  this.pathToAdditionalFiles = null;
  if (args) {
    if (args.sessionName !== undefined && args.sessionName !== null) {
      this.sessionName = args.sessionName;
    }
    if (args.pathToAdditionalFiles !== undefined && args.pathToAdditionalFiles !== null) {
      this.pathToAdditionalFiles = args.pathToAdditionalFiles;
    }
  }
};
XcalarApiSessionDownloadInputT.prototype = {};
XcalarApiSessionDownloadInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pathToAdditionalFiles = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionDownloadInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionDownloadInputT');
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 1);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  if (this.pathToAdditionalFiles !== null && this.pathToAdditionalFiles !== undefined) {
    output.writeFieldBegin('pathToAdditionalFiles', Thrift.Type.STRING, 2);
    output.writeString(this.pathToAdditionalFiles);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionDownloadOutputT = function(args) {
  this.sessionContentCount = null;
  this.sessionContent = null;
  if (args) {
    if (args.sessionContentCount !== undefined && args.sessionContentCount !== null) {
      this.sessionContentCount = args.sessionContentCount;
    }
    if (args.sessionContent !== undefined && args.sessionContent !== null) {
      this.sessionContent = args.sessionContent;
    }
  }
};
XcalarApiSessionDownloadOutputT.prototype = {};
XcalarApiSessionDownloadOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionContentCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sessionContent = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionDownloadOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionDownloadOutputT');
  if (this.sessionContentCount !== null && this.sessionContentCount !== undefined) {
    output.writeFieldBegin('sessionContentCount', Thrift.Type.I64, 1);
    output.writeI64(this.sessionContentCount);
    output.writeFieldEnd();
  }
  if (this.sessionContent !== null && this.sessionContent !== undefined) {
    output.writeFieldBegin('sessionContent', Thrift.Type.STRING, 2);
    output.writeString(this.sessionContent);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionUploadInputT = function(args) {
  this.sessionName = null;
  this.pathToAdditionalFiles = null;
  this.sessionContentCount = null;
  this.sessionContent = null;
  if (args) {
    if (args.sessionName !== undefined && args.sessionName !== null) {
      this.sessionName = args.sessionName;
    }
    if (args.pathToAdditionalFiles !== undefined && args.pathToAdditionalFiles !== null) {
      this.pathToAdditionalFiles = args.pathToAdditionalFiles;
    }
    if (args.sessionContentCount !== undefined && args.sessionContentCount !== null) {
      this.sessionContentCount = args.sessionContentCount;
    }
    if (args.sessionContent !== undefined && args.sessionContent !== null) {
      this.sessionContent = args.sessionContent;
    }
  }
};
XcalarApiSessionUploadInputT.prototype = {};
XcalarApiSessionUploadInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.pathToAdditionalFiles = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.sessionContentCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sessionContent = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionUploadInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionUploadInputT');
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 1);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  if (this.pathToAdditionalFiles !== null && this.pathToAdditionalFiles !== undefined) {
    output.writeFieldBegin('pathToAdditionalFiles', Thrift.Type.STRING, 2);
    output.writeString(this.pathToAdditionalFiles);
    output.writeFieldEnd();
  }
  if (this.sessionContentCount !== null && this.sessionContentCount !== undefined) {
    output.writeFieldBegin('sessionContentCount', Thrift.Type.I64, 3);
    output.writeI64(this.sessionContentCount);
    output.writeFieldEnd();
  }
  if (this.sessionContent !== null && this.sessionContent !== undefined) {
    output.writeFieldBegin('sessionContent', Thrift.Type.STRING, 4);
    output.writeString(this.sessionContent);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetQueryOutputT = function(args) {
  this.query = null;
  if (args) {
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
  }
};
XcalarApiGetQueryOutputT.prototype = {};
XcalarApiGetQueryOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetQueryOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetQueryOutputT');
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 1);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagNodeNamePatternInputT = function(args) {
  this.namePattern = null;
  this.srcType = null;
  this.deleteCompletely = null;
  if (args) {
    if (args.namePattern !== undefined && args.namePattern !== null) {
      this.namePattern = args.namePattern;
    }
    if (args.srcType !== undefined && args.srcType !== null) {
      this.srcType = args.srcType;
    }
    if (args.deleteCompletely !== undefined && args.deleteCompletely !== null) {
      this.deleteCompletely = args.deleteCompletely;
    }
  }
};
XcalarApiDagNodeNamePatternInputT.prototype = {};
XcalarApiDagNodeNamePatternInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.namePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.srcType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.deleteCompletely = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagNodeNamePatternInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagNodeNamePatternInputT');
  if (this.namePattern !== null && this.namePattern !== undefined) {
    output.writeFieldBegin('namePattern', Thrift.Type.STRING, 1);
    output.writeString(this.namePattern);
    output.writeFieldEnd();
  }
  if (this.srcType !== null && this.srcType !== undefined) {
    output.writeFieldBegin('srcType', Thrift.Type.I32, 2);
    output.writeI32(this.srcType);
    output.writeFieldEnd();
  }
  if (this.deleteCompletely !== null && this.deleteCompletely !== undefined) {
    output.writeFieldBegin('deleteCompletely', Thrift.Type.BOOL, 3);
    output.writeBool(this.deleteCompletely);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiArchiveTablesInputT = function(args) {
  this.archive = null;
  this.allTables = null;
  this.tableNames = null;
  if (args) {
    if (args.archive !== undefined && args.archive !== null) {
      this.archive = args.archive;
    }
    if (args.allTables !== undefined && args.allTables !== null) {
      this.allTables = args.allTables;
    }
    if (args.tableNames !== undefined && args.tableNames !== null) {
      this.tableNames = Thrift.copyList(args.tableNames, [null]);
    }
  }
};
XcalarApiArchiveTablesInputT.prototype = {};
XcalarApiArchiveTablesInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.archive = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.allTables = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size352 = 0;
        var _rtmp3356;
        this.tableNames = [];
        var _etype355 = 0;
        _rtmp3356 = input.readListBegin();
        _etype355 = _rtmp3356.etype;
        _size352 = _rtmp3356.size;
        for (var _i357 = 0; _i357 < _size352; ++_i357)
        {
          var elem358 = null;
          elem358 = input.readString().value;
          this.tableNames.push(elem358);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiArchiveTablesInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiArchiveTablesInputT');
  if (this.archive !== null && this.archive !== undefined) {
    output.writeFieldBegin('archive', Thrift.Type.BOOL, 1);
    output.writeBool(this.archive);
    output.writeFieldEnd();
  }
  if (this.allTables !== null && this.allTables !== undefined) {
    output.writeFieldBegin('allTables', Thrift.Type.BOOL, 2);
    output.writeBool(this.allTables);
    output.writeFieldEnd();
  }
  if (this.tableNames !== null && this.tableNames !== undefined) {
    output.writeFieldBegin('tableNames', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.tableNames.length);
    for (var iter359 in this.tableNames)
    {
      if (this.tableNames.hasOwnProperty(iter359))
      {
        iter359 = this.tableNames[iter359];
        output.writeString(iter359);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DhtArgsT = function(args) {
  this.upperBound = null;
  this.lowerBound = null;
  this.ordering = null;
  if (args) {
    if (args.upperBound !== undefined && args.upperBound !== null) {
      this.upperBound = args.upperBound;
    }
    if (args.lowerBound !== undefined && args.lowerBound !== null) {
      this.lowerBound = args.lowerBound;
    }
    if (args.ordering !== undefined && args.ordering !== null) {
      this.ordering = args.ordering;
    }
  }
};
DhtArgsT.prototype = {};
DhtArgsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.upperBound = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lowerBound = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.ordering = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DhtArgsT.prototype.write = function(output) {
  output.writeStructBegin('DhtArgsT');
  if (this.upperBound !== null && this.upperBound !== undefined) {
    output.writeFieldBegin('upperBound', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.upperBound);
    output.writeFieldEnd();
  }
  if (this.lowerBound !== null && this.lowerBound !== undefined) {
    output.writeFieldBegin('lowerBound', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.lowerBound);
    output.writeFieldEnd();
  }
  if (this.ordering !== null && this.ordering !== undefined) {
    output.writeFieldBegin('ordering', Thrift.Type.I32, 3);
    output.writeI32(this.ordering);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiCreateDhtInputT = function(args) {
  this.dhtName = null;
  this.dhtArgs = null;
  if (args) {
    if (args.dhtName !== undefined && args.dhtName !== null) {
      this.dhtName = args.dhtName;
    }
    if (args.dhtArgs !== undefined && args.dhtArgs !== null) {
      this.dhtArgs = new DhtArgsT(args.dhtArgs);
    }
  }
};
XcalarApiCreateDhtInputT.prototype = {};
XcalarApiCreateDhtInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dhtName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.dhtArgs = new DhtArgsT();
        this.dhtArgs.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiCreateDhtInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiCreateDhtInputT');
  if (this.dhtName !== null && this.dhtName !== undefined) {
    output.writeFieldBegin('dhtName', Thrift.Type.STRING, 1);
    output.writeString(this.dhtName);
    output.writeFieldEnd();
  }
  if (this.dhtArgs !== null && this.dhtArgs !== undefined) {
    output.writeFieldBegin('dhtArgs', Thrift.Type.STRUCT, 2);
    this.dhtArgs.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDeleteDhtInputT = function(args) {
  this.dhtNameLen = null;
  this.dhtName = null;
  if (args) {
    if (args.dhtNameLen !== undefined && args.dhtNameLen !== null) {
      this.dhtNameLen = args.dhtNameLen;
    }
    if (args.dhtName !== undefined && args.dhtName !== null) {
      this.dhtName = args.dhtName;
    }
  }
};
XcalarApiDeleteDhtInputT.prototype = {};
XcalarApiDeleteDhtInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.dhtNameLen = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dhtName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDeleteDhtInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDeleteDhtInputT');
  if (this.dhtNameLen !== null && this.dhtNameLen !== undefined) {
    output.writeFieldBegin('dhtNameLen', Thrift.Type.I64, 1);
    output.writeI64(this.dhtNameLen);
    output.writeFieldEnd();
  }
  if (this.dhtName !== null && this.dhtName !== undefined) {
    output.writeFieldBegin('dhtName', Thrift.Type.STRING, 2);
    output.writeString(this.dhtName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSupportGenerateInputT = function(args) {
  this.generateMiniBundle = null;
  this.supportCaseId = null;
  if (args) {
    if (args.generateMiniBundle !== undefined && args.generateMiniBundle !== null) {
      this.generateMiniBundle = args.generateMiniBundle;
    }
    if (args.supportCaseId !== undefined && args.supportCaseId !== null) {
      this.supportCaseId = args.supportCaseId;
    }
  }
};
XcalarApiSupportGenerateInputT.prototype = {};
XcalarApiSupportGenerateInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.generateMiniBundle = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.supportCaseId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSupportGenerateInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSupportGenerateInputT');
  if (this.generateMiniBundle !== null && this.generateMiniBundle !== undefined) {
    output.writeFieldBegin('generateMiniBundle', Thrift.Type.BOOL, 1);
    output.writeBool(this.generateMiniBundle);
    output.writeFieldEnd();
  }
  if (this.supportCaseId !== null && this.supportCaseId !== undefined) {
    output.writeFieldBegin('supportCaseId', Thrift.Type.I64, 2);
    output.writeI64(this.supportCaseId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSupportGenerateOutputT = function(args) {
  this.supportId = null;
  this.supportBundleSent = null;
  this.bundlePath = null;
  if (args) {
    if (args.supportId !== undefined && args.supportId !== null) {
      this.supportId = args.supportId;
    }
    if (args.supportBundleSent !== undefined && args.supportBundleSent !== null) {
      this.supportBundleSent = args.supportBundleSent;
    }
    if (args.bundlePath !== undefined && args.bundlePath !== null) {
      this.bundlePath = args.bundlePath;
    }
  }
};
XcalarApiSupportGenerateOutputT.prototype = {};
XcalarApiSupportGenerateOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.supportId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.supportBundleSent = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.bundlePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSupportGenerateOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSupportGenerateOutputT');
  if (this.supportId !== null && this.supportId !== undefined) {
    output.writeFieldBegin('supportId', Thrift.Type.STRING, 1);
    output.writeString(this.supportId);
    output.writeFieldEnd();
  }
  if (this.supportBundleSent !== null && this.supportBundleSent !== undefined) {
    output.writeFieldBegin('supportBundleSent', Thrift.Type.BOOL, 2);
    output.writeBool(this.supportBundleSent);
    output.writeFieldEnd();
  }
  if (this.bundlePath !== null && this.bundlePath !== undefined) {
    output.writeFieldBegin('bundlePath', Thrift.Type.STRING, 3);
    output.writeString(this.bundlePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IndexErrorStatsT = function(args) {
  this.numParseError = null;
  this.numFieldNoExist = null;
  this.numTypeMismatch = null;
  this.numOtherError = null;
  if (args) {
    if (args.numParseError !== undefined && args.numParseError !== null) {
      this.numParseError = args.numParseError;
    }
    if (args.numFieldNoExist !== undefined && args.numFieldNoExist !== null) {
      this.numFieldNoExist = args.numFieldNoExist;
    }
    if (args.numTypeMismatch !== undefined && args.numTypeMismatch !== null) {
      this.numTypeMismatch = args.numTypeMismatch;
    }
    if (args.numOtherError !== undefined && args.numOtherError !== null) {
      this.numOtherError = args.numOtherError;
    }
  }
};
IndexErrorStatsT.prototype = {};
IndexErrorStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numParseError = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numFieldNoExist = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numTypeMismatch = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numOtherError = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IndexErrorStatsT.prototype.write = function(output) {
  output.writeStructBegin('IndexErrorStatsT');
  if (this.numParseError !== null && this.numParseError !== undefined) {
    output.writeFieldBegin('numParseError', Thrift.Type.I64, 1);
    output.writeI64(this.numParseError);
    output.writeFieldEnd();
  }
  if (this.numFieldNoExist !== null && this.numFieldNoExist !== undefined) {
    output.writeFieldBegin('numFieldNoExist', Thrift.Type.I64, 2);
    output.writeI64(this.numFieldNoExist);
    output.writeFieldEnd();
  }
  if (this.numTypeMismatch !== null && this.numTypeMismatch !== undefined) {
    output.writeFieldBegin('numTypeMismatch', Thrift.Type.I64, 3);
    output.writeI64(this.numTypeMismatch);
    output.writeFieldEnd();
  }
  if (this.numOtherError !== null && this.numOtherError !== undefined) {
    output.writeFieldBegin('numOtherError', Thrift.Type.I64, 4);
    output.writeI64(this.numOtherError);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LoadErrorStatsT = function(args) {
  this.numFileOpenFailure = null;
  this.numDirOpenFailure = null;
  if (args) {
    if (args.numFileOpenFailure !== undefined && args.numFileOpenFailure !== null) {
      this.numFileOpenFailure = args.numFileOpenFailure;
    }
    if (args.numDirOpenFailure !== undefined && args.numDirOpenFailure !== null) {
      this.numDirOpenFailure = args.numDirOpenFailure;
    }
  }
};
LoadErrorStatsT.prototype = {};
LoadErrorStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numFileOpenFailure = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numDirOpenFailure = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LoadErrorStatsT.prototype.write = function(output) {
  output.writeStructBegin('LoadErrorStatsT');
  if (this.numFileOpenFailure !== null && this.numFileOpenFailure !== undefined) {
    output.writeFieldBegin('numFileOpenFailure', Thrift.Type.I64, 1);
    output.writeI64(this.numFileOpenFailure);
    output.writeFieldEnd();
  }
  if (this.numDirOpenFailure !== null && this.numDirOpenFailure !== undefined) {
    output.writeFieldBegin('numDirOpenFailure', Thrift.Type.I64, 2);
    output.writeI64(this.numDirOpenFailure);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FailureDescT = function(args) {
  this.numRowsFailed = null;
  this.failureDesc = null;
  if (args) {
    if (args.numRowsFailed !== undefined && args.numRowsFailed !== null) {
      this.numRowsFailed = args.numRowsFailed;
    }
    if (args.failureDesc !== undefined && args.failureDesc !== null) {
      this.failureDesc = args.failureDesc;
    }
  }
};
FailureDescT.prototype = {};
FailureDescT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numRowsFailed = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.failureDesc = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FailureDescT.prototype.write = function(output) {
  output.writeStructBegin('FailureDescT');
  if (this.numRowsFailed !== null && this.numRowsFailed !== undefined) {
    output.writeFieldBegin('numRowsFailed', Thrift.Type.I64, 1);
    output.writeI64(this.numRowsFailed);
    output.writeFieldEnd();
  }
  if (this.failureDesc !== null && this.failureDesc !== undefined) {
    output.writeFieldBegin('failureDesc', Thrift.Type.STRING, 2);
    output.writeString(this.failureDesc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FailureSummaryT = function(args) {
  this.failureSummName = null;
  this.failureSummInfo = null;
  if (args) {
    if (args.failureSummName !== undefined && args.failureSummName !== null) {
      this.failureSummName = args.failureSummName;
    }
    if (args.failureSummInfo !== undefined && args.failureSummInfo !== null) {
      this.failureSummInfo = Thrift.copyList(args.failureSummInfo, [FailureDescT]);
    }
  }
};
FailureSummaryT.prototype = {};
FailureSummaryT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.failureSummName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size360 = 0;
        var _rtmp3364;
        this.failureSummInfo = [];
        var _etype363 = 0;
        _rtmp3364 = input.readListBegin();
        _etype363 = _rtmp3364.etype;
        _size360 = _rtmp3364.size;
        for (var _i365 = 0; _i365 < _size360; ++_i365)
        {
          var elem366 = null;
          elem366 = new FailureDescT();
          elem366.read(input);
          this.failureSummInfo.push(elem366);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FailureSummaryT.prototype.write = function(output) {
  output.writeStructBegin('FailureSummaryT');
  if (this.failureSummName !== null && this.failureSummName !== undefined) {
    output.writeFieldBegin('failureSummName', Thrift.Type.STRING, 1);
    output.writeString(this.failureSummName);
    output.writeFieldEnd();
  }
  if (this.failureSummInfo !== null && this.failureSummInfo !== undefined) {
    output.writeFieldBegin('failureSummInfo', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.failureSummInfo.length);
    for (var iter367 in this.failureSummInfo)
    {
      if (this.failureSummInfo.hasOwnProperty(iter367))
      {
        iter367 = this.failureSummInfo[iter367];
        iter367.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EvalUdfErrorStatsT = function(args) {
  this.numEvalUdfError = null;
  this.opFailureSummary = null;
  if (args) {
    if (args.numEvalUdfError !== undefined && args.numEvalUdfError !== null) {
      this.numEvalUdfError = args.numEvalUdfError;
    }
    if (args.opFailureSummary !== undefined && args.opFailureSummary !== null) {
      this.opFailureSummary = Thrift.copyList(args.opFailureSummary, [FailureSummaryT]);
    }
  }
};
EvalUdfErrorStatsT.prototype = {};
EvalUdfErrorStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numEvalUdfError = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size368 = 0;
        var _rtmp3372;
        this.opFailureSummary = [];
        var _etype371 = 0;
        _rtmp3372 = input.readListBegin();
        _etype371 = _rtmp3372.etype;
        _size368 = _rtmp3372.size;
        for (var _i373 = 0; _i373 < _size368; ++_i373)
        {
          var elem374 = null;
          elem374 = new FailureSummaryT();
          elem374.read(input);
          this.opFailureSummary.push(elem374);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EvalUdfErrorStatsT.prototype.write = function(output) {
  output.writeStructBegin('EvalUdfErrorStatsT');
  if (this.numEvalUdfError !== null && this.numEvalUdfError !== undefined) {
    output.writeFieldBegin('numEvalUdfError', Thrift.Type.I64, 1);
    output.writeI64(this.numEvalUdfError);
    output.writeFieldEnd();
  }
  if (this.opFailureSummary !== null && this.opFailureSummary !== undefined) {
    output.writeFieldBegin('opFailureSummary', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.opFailureSummary.length);
    for (var iter375 in this.opFailureSummary)
    {
      if (this.opFailureSummary.hasOwnProperty(iter375))
      {
        iter375 = this.opFailureSummary[iter375];
        iter375.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EvalXdfErrorStatsT = function(args) {
  this.numUnsubstituted = null;
  this.numUnspportedTypes = null;
  this.numMixedTypeNotSupported = null;
  this.numEvalCastError = null;
  this.numDivByZero = null;
  this.numMiscError = null;
  this.numTotal = null;
  if (args) {
    if (args.numUnsubstituted !== undefined && args.numUnsubstituted !== null) {
      this.numUnsubstituted = args.numUnsubstituted;
    }
    if (args.numUnspportedTypes !== undefined && args.numUnspportedTypes !== null) {
      this.numUnspportedTypes = args.numUnspportedTypes;
    }
    if (args.numMixedTypeNotSupported !== undefined && args.numMixedTypeNotSupported !== null) {
      this.numMixedTypeNotSupported = args.numMixedTypeNotSupported;
    }
    if (args.numEvalCastError !== undefined && args.numEvalCastError !== null) {
      this.numEvalCastError = args.numEvalCastError;
    }
    if (args.numDivByZero !== undefined && args.numDivByZero !== null) {
      this.numDivByZero = args.numDivByZero;
    }
    if (args.numMiscError !== undefined && args.numMiscError !== null) {
      this.numMiscError = args.numMiscError;
    }
    if (args.numTotal !== undefined && args.numTotal !== null) {
      this.numTotal = args.numTotal;
    }
  }
};
EvalXdfErrorStatsT.prototype = {};
EvalXdfErrorStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numUnsubstituted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numUnspportedTypes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.numMixedTypeNotSupported = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numEvalCastError = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.numDivByZero = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.numMiscError = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.numTotal = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EvalXdfErrorStatsT.prototype.write = function(output) {
  output.writeStructBegin('EvalXdfErrorStatsT');
  if (this.numUnsubstituted !== null && this.numUnsubstituted !== undefined) {
    output.writeFieldBegin('numUnsubstituted', Thrift.Type.I64, 1);
    output.writeI64(this.numUnsubstituted);
    output.writeFieldEnd();
  }
  if (this.numUnspportedTypes !== null && this.numUnspportedTypes !== undefined) {
    output.writeFieldBegin('numUnspportedTypes', Thrift.Type.I64, 2);
    output.writeI64(this.numUnspportedTypes);
    output.writeFieldEnd();
  }
  if (this.numMixedTypeNotSupported !== null && this.numMixedTypeNotSupported !== undefined) {
    output.writeFieldBegin('numMixedTypeNotSupported', Thrift.Type.I64, 3);
    output.writeI64(this.numMixedTypeNotSupported);
    output.writeFieldEnd();
  }
  if (this.numEvalCastError !== null && this.numEvalCastError !== undefined) {
    output.writeFieldBegin('numEvalCastError', Thrift.Type.I64, 4);
    output.writeI64(this.numEvalCastError);
    output.writeFieldEnd();
  }
  if (this.numDivByZero !== null && this.numDivByZero !== undefined) {
    output.writeFieldBegin('numDivByZero', Thrift.Type.I64, 5);
    output.writeI64(this.numDivByZero);
    output.writeFieldEnd();
  }
  if (this.numMiscError !== null && this.numMiscError !== undefined) {
    output.writeFieldBegin('numMiscError', Thrift.Type.I64, 6);
    output.writeI64(this.numMiscError);
    output.writeFieldEnd();
  }
  if (this.numTotal !== null && this.numTotal !== undefined) {
    output.writeFieldBegin('numTotal', Thrift.Type.I64, 7);
    output.writeI64(this.numTotal);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

EvalErrorStatsT = function(args) {
  this.evalXdfErrorStats = null;
  this.evalUdfErrorStats = null;
  if (args) {
    if (args.evalXdfErrorStats !== undefined && args.evalXdfErrorStats !== null) {
      this.evalXdfErrorStats = new EvalXdfErrorStatsT(args.evalXdfErrorStats);
    }
    if (args.evalUdfErrorStats !== undefined && args.evalUdfErrorStats !== null) {
      this.evalUdfErrorStats = new EvalUdfErrorStatsT(args.evalUdfErrorStats);
    }
  }
};
EvalErrorStatsT.prototype = {};
EvalErrorStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.evalXdfErrorStats = new EvalXdfErrorStatsT();
        this.evalXdfErrorStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.evalUdfErrorStats = new EvalUdfErrorStatsT();
        this.evalUdfErrorStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EvalErrorStatsT.prototype.write = function(output) {
  output.writeStructBegin('EvalErrorStatsT');
  if (this.evalXdfErrorStats !== null && this.evalXdfErrorStats !== undefined) {
    output.writeFieldBegin('evalXdfErrorStats', Thrift.Type.STRUCT, 1);
    this.evalXdfErrorStats.write(output);
    output.writeFieldEnd();
  }
  if (this.evalUdfErrorStats !== null && this.evalUdfErrorStats !== undefined) {
    output.writeFieldBegin('evalUdfErrorStats', Thrift.Type.STRUCT, 2);
    this.evalUdfErrorStats.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpErrorStatsT = function(args) {
  this.loadErrorStats = null;
  this.indexErrorStats = null;
  this.evalErrorStats = null;
  if (args) {
    if (args.loadErrorStats !== undefined && args.loadErrorStats !== null) {
      this.loadErrorStats = new LoadErrorStatsT(args.loadErrorStats);
    }
    if (args.indexErrorStats !== undefined && args.indexErrorStats !== null) {
      this.indexErrorStats = new IndexErrorStatsT(args.indexErrorStats);
    }
    if (args.evalErrorStats !== undefined && args.evalErrorStats !== null) {
      this.evalErrorStats = new EvalErrorStatsT(args.evalErrorStats);
    }
  }
};
OpErrorStatsT.prototype = {};
OpErrorStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loadErrorStats = new LoadErrorStatsT();
        this.loadErrorStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.indexErrorStats = new IndexErrorStatsT();
        this.indexErrorStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.evalErrorStats = new EvalErrorStatsT();
        this.evalErrorStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpErrorStatsT.prototype.write = function(output) {
  output.writeStructBegin('OpErrorStatsT');
  if (this.loadErrorStats !== null && this.loadErrorStats !== undefined) {
    output.writeFieldBegin('loadErrorStats', Thrift.Type.STRUCT, 1);
    this.loadErrorStats.write(output);
    output.writeFieldEnd();
  }
  if (this.indexErrorStats !== null && this.indexErrorStats !== undefined) {
    output.writeFieldBegin('indexErrorStats', Thrift.Type.STRUCT, 2);
    this.indexErrorStats.write(output);
    output.writeFieldEnd();
  }
  if (this.evalErrorStats !== null && this.evalErrorStats !== undefined) {
    output.writeFieldBegin('evalErrorStats', Thrift.Type.STRUCT, 3);
    this.evalErrorStats.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiOpDetailsT = function(args) {
  this.numWorkCompleted = null;
  this.numWorkTotal = null;
  this.cancelled = null;
  this.errorStats = null;
  this.numRowsTotal = null;
  if (args) {
    if (args.numWorkCompleted !== undefined && args.numWorkCompleted !== null) {
      this.numWorkCompleted = args.numWorkCompleted;
    }
    if (args.numWorkTotal !== undefined && args.numWorkTotal !== null) {
      this.numWorkTotal = args.numWorkTotal;
    }
    if (args.cancelled !== undefined && args.cancelled !== null) {
      this.cancelled = args.cancelled;
    }
    if (args.errorStats !== undefined && args.errorStats !== null) {
      this.errorStats = new OpErrorStatsT(args.errorStats);
    }
    if (args.numRowsTotal !== undefined && args.numRowsTotal !== null) {
      this.numRowsTotal = args.numRowsTotal;
    }
  }
};
XcalarApiOpDetailsT.prototype = {};
XcalarApiOpDetailsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numWorkCompleted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.numWorkTotal = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.cancelled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.errorStats = new OpErrorStatsT();
        this.errorStats.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.numRowsTotal = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiOpDetailsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiOpDetailsT');
  if (this.numWorkCompleted !== null && this.numWorkCompleted !== undefined) {
    output.writeFieldBegin('numWorkCompleted', Thrift.Type.I64, 1);
    output.writeI64(this.numWorkCompleted);
    output.writeFieldEnd();
  }
  if (this.numWorkTotal !== null && this.numWorkTotal !== undefined) {
    output.writeFieldBegin('numWorkTotal', Thrift.Type.I64, 2);
    output.writeI64(this.numWorkTotal);
    output.writeFieldEnd();
  }
  if (this.cancelled !== null && this.cancelled !== undefined) {
    output.writeFieldBegin('cancelled', Thrift.Type.BOOL, 3);
    output.writeBool(this.cancelled);
    output.writeFieldEnd();
  }
  if (this.errorStats !== null && this.errorStats !== undefined) {
    output.writeFieldBegin('errorStats', Thrift.Type.STRUCT, 4);
    this.errorStats.write(output);
    output.writeFieldEnd();
  }
  if (this.numRowsTotal !== null && this.numRowsTotal !== undefined) {
    output.writeFieldBegin('numRowsTotal', Thrift.Type.I64, 5);
    output.writeI64(this.numRowsTotal);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiNodeOpStatsT = function(args) {
  this.status = null;
  this.nodeId = null;
  this.opDetails = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.nodeId !== undefined && args.nodeId !== null) {
      this.nodeId = args.nodeId;
    }
    if (args.opDetails !== undefined && args.opDetails !== null) {
      this.opDetails = new XcalarApiOpDetailsT(args.opDetails);
    }
  }
};
XcalarApiNodeOpStatsT.prototype = {};
XcalarApiNodeOpStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.nodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.opDetails = new XcalarApiOpDetailsT();
        this.opDetails.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiNodeOpStatsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiNodeOpStatsT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.I64, 2);
    output.writeI64(this.nodeId);
    output.writeFieldEnd();
  }
  if (this.opDetails !== null && this.opDetails !== undefined) {
    output.writeFieldBegin('opDetails', Thrift.Type.STRUCT, 3);
    this.opDetails.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiPerNodeOpStatsT = function(args) {
  this.numNodes = null;
  this.api = null;
  this.nodeOpStats = null;
  if (args) {
    if (args.numNodes !== undefined && args.numNodes !== null) {
      this.numNodes = args.numNodes;
    }
    if (args.api !== undefined && args.api !== null) {
      this.api = args.api;
    }
    if (args.nodeOpStats !== undefined && args.nodeOpStats !== null) {
      this.nodeOpStats = Thrift.copyList(args.nodeOpStats, [XcalarApiNodeOpStatsT]);
    }
  }
};
XcalarApiPerNodeOpStatsT.prototype = {};
XcalarApiPerNodeOpStatsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.api = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size376 = 0;
        var _rtmp3380;
        this.nodeOpStats = [];
        var _etype379 = 0;
        _rtmp3380 = input.readListBegin();
        _etype379 = _rtmp3380.etype;
        _size376 = _rtmp3380.size;
        for (var _i381 = 0; _i381 < _size376; ++_i381)
        {
          var elem382 = null;
          elem382 = new XcalarApiNodeOpStatsT();
          elem382.read(input);
          this.nodeOpStats.push(elem382);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiPerNodeOpStatsT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiPerNodeOpStatsT');
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 1);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.api !== null && this.api !== undefined) {
    output.writeFieldBegin('api', Thrift.Type.I32, 2);
    output.writeI32(this.api);
    output.writeFieldEnd();
  }
  if (this.nodeOpStats !== null && this.nodeOpStats !== undefined) {
    output.writeFieldBegin('nodeOpStats', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.nodeOpStats.length);
    for (var iter383 in this.nodeOpStats)
    {
      if (this.nodeOpStats.hasOwnProperty(iter383))
      {
        iter383 = this.nodeOpStats[iter383];
        iter383.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiOpStatsOutT = function(args) {
  this.api = null;
  this.opDetails = null;
  if (args) {
    if (args.api !== undefined && args.api !== null) {
      this.api = args.api;
    }
    if (args.opDetails !== undefined && args.opDetails !== null) {
      this.opDetails = new XcalarApiOpDetailsT(args.opDetails);
    }
  }
};
XcalarApiOpStatsOutT.prototype = {};
XcalarApiOpStatsOutT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.api = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.opDetails = new XcalarApiOpDetailsT();
        this.opDetails.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiOpStatsOutT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiOpStatsOutT');
  if (this.api !== null && this.api !== undefined) {
    output.writeFieldBegin('api', Thrift.Type.I32, 1);
    output.writeI32(this.api);
    output.writeFieldEnd();
  }
  if (this.opDetails !== null && this.opDetails !== undefined) {
    output.writeFieldBegin('opDetails', Thrift.Type.STRUCT, 2);
    this.opDetails.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiImportRetinaInputT = function(args) {
  this.retinaName = null;
  this.overwriteExistingUdf = null;
  this.retinaCount = null;
  this.retina = null;
  this.loadRetinaJson = null;
  this.retinaJson = null;
  this.udfUserName = null;
  this.udfSessionName = null;
  if (args) {
    if (args.retinaName !== undefined && args.retinaName !== null) {
      this.retinaName = args.retinaName;
    }
    if (args.overwriteExistingUdf !== undefined && args.overwriteExistingUdf !== null) {
      this.overwriteExistingUdf = args.overwriteExistingUdf;
    }
    if (args.retinaCount !== undefined && args.retinaCount !== null) {
      this.retinaCount = args.retinaCount;
    }
    if (args.retina !== undefined && args.retina !== null) {
      this.retina = args.retina;
    }
    if (args.loadRetinaJson !== undefined && args.loadRetinaJson !== null) {
      this.loadRetinaJson = args.loadRetinaJson;
    }
    if (args.retinaJson !== undefined && args.retinaJson !== null) {
      this.retinaJson = args.retinaJson;
    }
    if (args.udfUserName !== undefined && args.udfUserName !== null) {
      this.udfUserName = args.udfUserName;
    }
    if (args.udfSessionName !== undefined && args.udfSessionName !== null) {
      this.udfSessionName = args.udfSessionName;
    }
  }
};
XcalarApiImportRetinaInputT.prototype = {};
XcalarApiImportRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.overwriteExistingUdf = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.retinaCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.retina = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.loadRetinaJson = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.retinaJson = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.udfUserName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.udfSessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiImportRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiImportRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  if (this.overwriteExistingUdf !== null && this.overwriteExistingUdf !== undefined) {
    output.writeFieldBegin('overwriteExistingUdf', Thrift.Type.BOOL, 2);
    output.writeBool(this.overwriteExistingUdf);
    output.writeFieldEnd();
  }
  if (this.retinaCount !== null && this.retinaCount !== undefined) {
    output.writeFieldBegin('retinaCount', Thrift.Type.I64, 3);
    output.writeI64(this.retinaCount);
    output.writeFieldEnd();
  }
  if (this.retina !== null && this.retina !== undefined) {
    output.writeFieldBegin('retina', Thrift.Type.STRING, 4);
    output.writeString(this.retina);
    output.writeFieldEnd();
  }
  if (this.loadRetinaJson !== null && this.loadRetinaJson !== undefined) {
    output.writeFieldBegin('loadRetinaJson', Thrift.Type.BOOL, 5);
    output.writeBool(this.loadRetinaJson);
    output.writeFieldEnd();
  }
  if (this.retinaJson !== null && this.retinaJson !== undefined) {
    output.writeFieldBegin('retinaJson', Thrift.Type.STRING, 6);
    output.writeString(this.retinaJson);
    output.writeFieldEnd();
  }
  if (this.udfUserName !== null && this.udfUserName !== undefined) {
    output.writeFieldBegin('udfUserName', Thrift.Type.STRING, 7);
    output.writeString(this.udfUserName);
    output.writeFieldEnd();
  }
  if (this.udfSessionName !== null && this.udfSessionName !== undefined) {
    output.writeFieldBegin('udfSessionName', Thrift.Type.STRING, 8);
    output.writeString(this.udfSessionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiExportRetinaInputT = function(args) {
  this.retinaName = null;
  if (args) {
    if (args.retinaName !== undefined && args.retinaName !== null) {
      this.retinaName = args.retinaName;
    }
  }
};
XcalarApiExportRetinaInputT.prototype = {};
XcalarApiExportRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiExportRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiExportRetinaInputT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStartFuncTestInputT = function(args) {
  this.parallel = null;
  this.runAllTests = null;
  this.runOnAllNodes = null;
  this.numTestPatterns = null;
  this.testNamePatterns = null;
  if (args) {
    if (args.parallel !== undefined && args.parallel !== null) {
      this.parallel = args.parallel;
    }
    if (args.runAllTests !== undefined && args.runAllTests !== null) {
      this.runAllTests = args.runAllTests;
    }
    if (args.runOnAllNodes !== undefined && args.runOnAllNodes !== null) {
      this.runOnAllNodes = args.runOnAllNodes;
    }
    if (args.numTestPatterns !== undefined && args.numTestPatterns !== null) {
      this.numTestPatterns = args.numTestPatterns;
    }
    if (args.testNamePatterns !== undefined && args.testNamePatterns !== null) {
      this.testNamePatterns = Thrift.copyList(args.testNamePatterns, [null]);
    }
  }
};
XcalarApiStartFuncTestInputT.prototype = {};
XcalarApiStartFuncTestInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.parallel = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.runAllTests = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.runOnAllNodes = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.numTestPatterns = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size384 = 0;
        var _rtmp3388;
        this.testNamePatterns = [];
        var _etype387 = 0;
        _rtmp3388 = input.readListBegin();
        _etype387 = _rtmp3388.etype;
        _size384 = _rtmp3388.size;
        for (var _i389 = 0; _i389 < _size384; ++_i389)
        {
          var elem390 = null;
          elem390 = input.readString().value;
          this.testNamePatterns.push(elem390);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStartFuncTestInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStartFuncTestInputT');
  if (this.parallel !== null && this.parallel !== undefined) {
    output.writeFieldBegin('parallel', Thrift.Type.BOOL, 1);
    output.writeBool(this.parallel);
    output.writeFieldEnd();
  }
  if (this.runAllTests !== null && this.runAllTests !== undefined) {
    output.writeFieldBegin('runAllTests', Thrift.Type.BOOL, 2);
    output.writeBool(this.runAllTests);
    output.writeFieldEnd();
  }
  if (this.runOnAllNodes !== null && this.runOnAllNodes !== undefined) {
    output.writeFieldBegin('runOnAllNodes', Thrift.Type.BOOL, 3);
    output.writeBool(this.runOnAllNodes);
    output.writeFieldEnd();
  }
  if (this.numTestPatterns !== null && this.numTestPatterns !== undefined) {
    output.writeFieldBegin('numTestPatterns', Thrift.Type.I32, 4);
    output.writeI32(this.numTestPatterns);
    output.writeFieldEnd();
  }
  if (this.testNamePatterns !== null && this.testNamePatterns !== undefined) {
    output.writeFieldBegin('testNamePatterns', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.testNamePatterns.length);
    for (var iter391 in this.testNamePatterns)
    {
      if (this.testNamePatterns.hasOwnProperty(iter391))
      {
        iter391 = this.testNamePatterns[iter391];
        output.writeString(iter391);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListFuncTestInputT = function(args) {
  this.namePattern = null;
  if (args) {
    if (args.namePattern !== undefined && args.namePattern !== null) {
      this.namePattern = args.namePattern;
    }
  }
};
XcalarApiListFuncTestInputT.prototype = {};
XcalarApiListFuncTestInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.namePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListFuncTestInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListFuncTestInputT');
  if (this.namePattern !== null && this.namePattern !== undefined) {
    output.writeFieldBegin('namePattern', Thrift.Type.STRING, 1);
    output.writeString(this.namePattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiConfigParamT = function(args) {
  this.paramName = null;
  this.paramValue = null;
  this.visible = null;
  this.changeable = null;
  this.restartRequired = null;
  this.defaultValue = null;
  if (args) {
    if (args.paramName !== undefined && args.paramName !== null) {
      this.paramName = args.paramName;
    }
    if (args.paramValue !== undefined && args.paramValue !== null) {
      this.paramValue = args.paramValue;
    }
    if (args.visible !== undefined && args.visible !== null) {
      this.visible = args.visible;
    }
    if (args.changeable !== undefined && args.changeable !== null) {
      this.changeable = args.changeable;
    }
    if (args.restartRequired !== undefined && args.restartRequired !== null) {
      this.restartRequired = args.restartRequired;
    }
    if (args.defaultValue !== undefined && args.defaultValue !== null) {
      this.defaultValue = args.defaultValue;
    }
  }
};
XcalarApiConfigParamT.prototype = {};
XcalarApiConfigParamT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.paramName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.paramValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.visible = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.changeable = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.restartRequired = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.defaultValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiConfigParamT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiConfigParamT');
  if (this.paramName !== null && this.paramName !== undefined) {
    output.writeFieldBegin('paramName', Thrift.Type.STRING, 1);
    output.writeString(this.paramName);
    output.writeFieldEnd();
  }
  if (this.paramValue !== null && this.paramValue !== undefined) {
    output.writeFieldBegin('paramValue', Thrift.Type.STRING, 2);
    output.writeString(this.paramValue);
    output.writeFieldEnd();
  }
  if (this.visible !== null && this.visible !== undefined) {
    output.writeFieldBegin('visible', Thrift.Type.BOOL, 3);
    output.writeBool(this.visible);
    output.writeFieldEnd();
  }
  if (this.changeable !== null && this.changeable !== undefined) {
    output.writeFieldBegin('changeable', Thrift.Type.BOOL, 4);
    output.writeBool(this.changeable);
    output.writeFieldEnd();
  }
  if (this.restartRequired !== null && this.restartRequired !== undefined) {
    output.writeFieldBegin('restartRequired', Thrift.Type.BOOL, 5);
    output.writeBool(this.restartRequired);
    output.writeFieldEnd();
  }
  if (this.defaultValue !== null && this.defaultValue !== undefined) {
    output.writeFieldBegin('defaultValue', Thrift.Type.STRING, 6);
    output.writeString(this.defaultValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetConfigParamsOutputT = function(args) {
  this.numParams = null;
  this.parameter = null;
  if (args) {
    if (args.numParams !== undefined && args.numParams !== null) {
      this.numParams = args.numParams;
    }
    if (args.parameter !== undefined && args.parameter !== null) {
      this.parameter = Thrift.copyList(args.parameter, [XcalarApiConfigParamT]);
    }
  }
};
XcalarApiGetConfigParamsOutputT.prototype = {};
XcalarApiGetConfigParamsOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numParams = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size392 = 0;
        var _rtmp3396;
        this.parameter = [];
        var _etype395 = 0;
        _rtmp3396 = input.readListBegin();
        _etype395 = _rtmp3396.etype;
        _size392 = _rtmp3396.size;
        for (var _i397 = 0; _i397 < _size392; ++_i397)
        {
          var elem398 = null;
          elem398 = new XcalarApiConfigParamT();
          elem398.read(input);
          this.parameter.push(elem398);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetConfigParamsOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetConfigParamsOutputT');
  if (this.numParams !== null && this.numParams !== undefined) {
    output.writeFieldBegin('numParams', Thrift.Type.I64, 1);
    output.writeI64(this.numParams);
    output.writeFieldEnd();
  }
  if (this.parameter !== null && this.parameter !== undefined) {
    output.writeFieldBegin('parameter', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.parameter.length);
    for (var iter399 in this.parameter)
    {
      if (this.parameter.hasOwnProperty(iter399))
      {
        iter399 = this.parameter[iter399];
        iter399.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSetConfigParamInputT = function(args) {
  this.paramName = null;
  this.paramValue = null;
  if (args) {
    if (args.paramName !== undefined && args.paramName !== null) {
      this.paramName = args.paramName;
    }
    if (args.paramValue !== undefined && args.paramValue !== null) {
      this.paramValue = args.paramValue;
    }
  }
};
XcalarApiSetConfigParamInputT.prototype = {};
XcalarApiSetConfigParamInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.paramName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.paramValue = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSetConfigParamInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSetConfigParamInputT');
  if (this.paramName !== null && this.paramName !== undefined) {
    output.writeFieldBegin('paramName', Thrift.Type.STRING, 1);
    output.writeString(this.paramName);
    output.writeFieldEnd();
  }
  if (this.paramValue !== null && this.paramValue !== undefined) {
    output.writeFieldBegin('paramValue', Thrift.Type.STRING, 2);
    output.writeString(this.paramValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetTableMetaInputT = function(args) {
  this.tableNameInput = null;
  this.isPrecise = null;
  if (args) {
    if (args.tableNameInput !== undefined && args.tableNameInput !== null) {
      this.tableNameInput = new XcalarApiNamedInputT(args.tableNameInput);
    }
    if (args.isPrecise !== undefined && args.isPrecise !== null) {
      this.isPrecise = args.isPrecise;
    }
  }
};
XcalarApiGetTableMetaInputT.prototype = {};
XcalarApiGetTableMetaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tableNameInput = new XcalarApiNamedInputT();
        this.tableNameInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isPrecise = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetTableMetaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetTableMetaInputT');
  if (this.tableNameInput !== null && this.tableNameInput !== undefined) {
    output.writeFieldBegin('tableNameInput', Thrift.Type.STRUCT, 1);
    this.tableNameInput.write(output);
    output.writeFieldEnd();
  }
  if (this.isPrecise !== null && this.isPrecise !== undefined) {
    output.writeFieldBegin('isPrecise', Thrift.Type.BOOL, 2);
    output.writeBool(this.isPrecise);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetMemoryUsageInputT = function(args) {
  this.userName = null;
  this.userId = null;
  if (args) {
    if (args.userName !== undefined && args.userName !== null) {
      this.userName = args.userName;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
XcalarApiGetMemoryUsageInputT.prototype = {};
XcalarApiGetMemoryUsageInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetMemoryUsageInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetMemoryUsageInputT');
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 1);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 2);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiLogLevelSetInputT = function(args) {
  this.logLevel = null;
  this.logFlush = null;
  this.logFlushLevel = null;
  this.logFlushPeriod = null;
  if (args) {
    if (args.logLevel !== undefined && args.logLevel !== null) {
      this.logLevel = args.logLevel;
    }
    if (args.logFlush !== undefined && args.logFlush !== null) {
      this.logFlush = args.logFlush;
    }
    if (args.logFlushLevel !== undefined && args.logFlushLevel !== null) {
      this.logFlushLevel = args.logFlushLevel;
    }
    if (args.logFlushPeriod !== undefined && args.logFlushPeriod !== null) {
      this.logFlushPeriod = args.logFlushPeriod;
    }
  }
};
XcalarApiLogLevelSetInputT.prototype = {};
XcalarApiLogLevelSetInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.logLevel = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.logFlush = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.logFlushLevel = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.logFlushPeriod = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiLogLevelSetInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiLogLevelSetInputT');
  if (this.logLevel !== null && this.logLevel !== undefined) {
    output.writeFieldBegin('logLevel', Thrift.Type.I32, 1);
    output.writeI32(this.logLevel);
    output.writeFieldEnd();
  }
  if (this.logFlush !== null && this.logFlush !== undefined) {
    output.writeFieldBegin('logFlush', Thrift.Type.BOOL, 2);
    output.writeBool(this.logFlush);
    output.writeFieldEnd();
  }
  if (this.logFlushLevel !== null && this.logFlushLevel !== undefined) {
    output.writeFieldBegin('logFlushLevel', Thrift.Type.I32, 3);
    output.writeI32(this.logFlushLevel);
    output.writeFieldEnd();
  }
  if (this.logFlushPeriod !== null && this.logFlushPeriod !== undefined) {
    output.writeFieldBegin('logFlushPeriod', Thrift.Type.I32, 4);
    output.writeI32(this.logFlushPeriod);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagTableNameInputT = function(args) {
  this.tableInput = null;
  if (args) {
    if (args.tableInput !== undefined && args.tableInput !== null) {
      this.tableInput = args.tableInput;
    }
  }
};
XcalarApiDagTableNameInputT.prototype = {};
XcalarApiDagTableNameInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagTableNameInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagTableNameInputT');
  if (this.tableInput !== null && this.tableInput !== undefined) {
    output.writeFieldBegin('tableInput', Thrift.Type.STRING, 1);
    output.writeString(this.tableInput);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListParametersInRetinaInputT = function(args) {
  this.listRetInput = null;
  if (args) {
    if (args.listRetInput !== undefined && args.listRetInput !== null) {
      this.listRetInput = args.listRetInput;
    }
  }
};
XcalarApiListParametersInRetinaInputT.prototype = {};
XcalarApiListParametersInRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.listRetInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListParametersInRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListParametersInRetinaInputT');
  if (this.listRetInput !== null && this.listRetInput !== undefined) {
    output.writeFieldBegin('listRetInput', Thrift.Type.STRING, 1);
    output.writeString(this.listRetInput);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionListArrayInputT = function(args) {
  this.sesListInput = null;
  if (args) {
    if (args.sesListInput !== undefined && args.sesListInput !== null) {
      this.sesListInput = args.sesListInput;
    }
  }
};
XcalarApiSessionListArrayInputT.prototype = {};
XcalarApiSessionListArrayInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sesListInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionListArrayInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionListArrayInputT');
  if (this.sesListInput !== null && this.sesListInput !== undefined) {
    output.writeFieldBegin('sesListInput', Thrift.Type.STRING, 1);
    output.writeString(this.sesListInput);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDeleteRetinaInputT = function(args) {
  this.delRetInput = null;
  if (args) {
    if (args.delRetInput !== undefined && args.delRetInput !== null) {
      this.delRetInput = args.delRetInput;
    }
  }
};
XcalarApiDeleteRetinaInputT.prototype = {};
XcalarApiDeleteRetinaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.delRetInput = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDeleteRetinaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDeleteRetinaInputT');
  if (this.delRetInput !== null && this.delRetInput !== undefined) {
    output.writeFieldBegin('delRetInput', Thrift.Type.STRING, 1);
    output.writeString(this.delRetInput);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiShutdownInputT = function(args) {
  this.doShutdown = null;
  if (args) {
    if (args.doShutdown !== undefined && args.doShutdown !== null) {
      this.doShutdown = args.doShutdown;
    }
  }
};
XcalarApiShutdownInputT.prototype = {};
XcalarApiShutdownInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.doShutdown = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiShutdownInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiShutdownInputT');
  if (this.doShutdown !== null && this.doShutdown !== undefined) {
    output.writeFieldBegin('doShutdown', Thrift.Type.BOOL, 1);
    output.writeBool(this.doShutdown);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetIpAddrInputT = function(args) {
  this.nodeId = null;
  if (args) {
    if (args.nodeId !== undefined && args.nodeId !== null) {
      this.nodeId = args.nodeId;
    }
  }
};
XcalarApiGetIpAddrInputT.prototype = {};
XcalarApiGetIpAddrInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.nodeId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetIpAddrInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetIpAddrInputT');
  if (this.nodeId !== null && this.nodeId !== undefined) {
    output.writeFieldBegin('nodeId', Thrift.Type.I64, 1);
    output.writeI64(this.nodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTagDagNodesInputT = function(args) {
  this.dagNodes = null;
  this.tag = null;
  if (args) {
    if (args.dagNodes !== undefined && args.dagNodes !== null) {
      this.dagNodes = Thrift.copyList(args.dagNodes, [XcalarApiNamedInputT]);
    }
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = args.tag;
    }
  }
};
XcalarApiTagDagNodesInputT.prototype = {};
XcalarApiTagDagNodesInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size400 = 0;
        var _rtmp3404;
        this.dagNodes = [];
        var _etype403 = 0;
        _rtmp3404 = input.readListBegin();
        _etype403 = _rtmp3404.etype;
        _size400 = _rtmp3404.size;
        for (var _i405 = 0; _i405 < _size400; ++_i405)
        {
          var elem406 = null;
          elem406 = new XcalarApiNamedInputT();
          elem406.read(input);
          this.dagNodes.push(elem406);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTagDagNodesInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTagDagNodesInputT');
  if (this.dagNodes !== null && this.dagNodes !== undefined) {
    output.writeFieldBegin('dagNodes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.dagNodes.length);
    for (var iter407 in this.dagNodes)
    {
      if (this.dagNodes.hasOwnProperty(iter407))
      {
        iter407 = this.dagNodes[iter407];
        iter407.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 2);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiCommentDagNodesInputT = function(args) {
  this.numDagNodes = null;
  this.dagNodeNames = null;
  this.comment = null;
  if (args) {
    if (args.numDagNodes !== undefined && args.numDagNodes !== null) {
      this.numDagNodes = args.numDagNodes;
    }
    if (args.dagNodeNames !== undefined && args.dagNodeNames !== null) {
      this.dagNodeNames = Thrift.copyList(args.dagNodeNames, [null]);
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
XcalarApiCommentDagNodesInputT.prototype = {};
XcalarApiCommentDagNodesInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numDagNodes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size408 = 0;
        var _rtmp3412;
        this.dagNodeNames = [];
        var _etype411 = 0;
        _rtmp3412 = input.readListBegin();
        _etype411 = _rtmp3412.etype;
        _size408 = _rtmp3412.size;
        for (var _i413 = 0; _i413 < _size408; ++_i413)
        {
          var elem414 = null;
          elem414 = input.readString().value;
          this.dagNodeNames.push(elem414);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiCommentDagNodesInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiCommentDagNodesInputT');
  if (this.numDagNodes !== null && this.numDagNodes !== undefined) {
    output.writeFieldBegin('numDagNodes', Thrift.Type.I32, 1);
    output.writeI32(this.numDagNodes);
    output.writeFieldEnd();
  }
  if (this.dagNodeNames !== null && this.dagNodeNames !== undefined) {
    output.writeFieldBegin('dagNodeNames', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.dagNodeNames.length);
    for (var iter415 in this.dagNodeNames)
    {
      if (this.dagNodeNames.hasOwnProperty(iter415))
      {
        iter415 = this.dagNodeNames[iter415];
        output.writeString(iter415);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetDatasetsInfoInputT = function(args) {
  this.datasetsNamePattern = null;
  if (args) {
    if (args.datasetsNamePattern !== undefined && args.datasetsNamePattern !== null) {
      this.datasetsNamePattern = args.datasetsNamePattern;
    }
  }
};
XcalarApiGetDatasetsInfoInputT.prototype = {};
XcalarApiGetDatasetsInfoInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.datasetsNamePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetDatasetsInfoInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetDatasetsInfoInputT');
  if (this.datasetsNamePattern !== null && this.datasetsNamePattern !== undefined) {
    output.writeFieldBegin('datasetsNamePattern', Thrift.Type.STRING, 1);
    output.writeString(this.datasetsNamePattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListDatasetUsersInputT = function(args) {
  this.datasetName = null;
  if (args) {
    if (args.datasetName !== undefined && args.datasetName !== null) {
      this.datasetName = args.datasetName;
    }
  }
};
XcalarApiListDatasetUsersInputT.prototype = {};
XcalarApiListDatasetUsersInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.datasetName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListDatasetUsersInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListDatasetUsersInputT');
  if (this.datasetName !== null && this.datasetName !== undefined) {
    output.writeFieldBegin('datasetName', Thrift.Type.STRING, 1);
    output.writeString(this.datasetName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListUserDatasetsInputT = function(args) {
  this.userIdName = null;
  if (args) {
    if (args.userIdName !== undefined && args.userIdName !== null) {
      this.userIdName = args.userIdName;
    }
  }
};
XcalarApiListUserDatasetsInputT.prototype = {};
XcalarApiListUserDatasetsInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userIdName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListUserDatasetsInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListUserDatasetsInputT');
  if (this.userIdName !== null && this.userIdName !== undefined) {
    output.writeFieldBegin('userIdName', Thrift.Type.STRING, 1);
    output.writeString(this.userIdName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetDeleteInputT = function(args) {
  this.datasetName = null;
  if (args) {
    if (args.datasetName !== undefined && args.datasetName !== null) {
      this.datasetName = args.datasetName;
    }
  }
};
XcalarApiDatasetDeleteInputT.prototype = {};
XcalarApiDatasetDeleteInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.datasetName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDatasetDeleteInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDatasetDeleteInputT');
  if (this.datasetName !== null && this.datasetName !== undefined) {
    output.writeFieldBegin('datasetName', Thrift.Type.STRING, 1);
    output.writeString(this.datasetName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetUnloadInputT = function(args) {
  this.datasetNamePattern = null;
  if (args) {
    if (args.datasetNamePattern !== undefined && args.datasetNamePattern !== null) {
      this.datasetNamePattern = args.datasetNamePattern;
    }
  }
};
XcalarApiDatasetUnloadInputT.prototype = {};
XcalarApiDatasetUnloadInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.datasetNamePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDatasetUnloadInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDatasetUnloadInputT');
  if (this.datasetNamePattern !== null && this.datasetNamePattern !== undefined) {
    output.writeFieldBegin('datasetNamePattern', Thrift.Type.STRING, 1);
    output.writeString(this.datasetNamePattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetGetMetaInputT = function(args) {
  this.datasetName = null;
  if (args) {
    if (args.datasetName !== undefined && args.datasetName !== null) {
      this.datasetName = args.datasetName;
    }
  }
};
XcalarApiDatasetGetMetaInputT.prototype = {};
XcalarApiDatasetGetMetaInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.datasetName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDatasetGetMetaInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDatasetGetMetaInputT');
  if (this.datasetName !== null && this.datasetName !== undefined) {
    output.writeFieldBegin('datasetName', Thrift.Type.STRING, 1);
    output.writeString(this.datasetName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSynthesizeInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.columns = null;
  this.sameSession = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.dest !== undefined && args.dest !== null) {
      this.dest = args.dest;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [XcalarApiColumnT]);
    }
    if (args.sameSession !== undefined && args.sameSession !== null) {
      this.sameSession = args.sameSession;
    }
  }
};
XcalarApiSynthesizeInputT.prototype = {};
XcalarApiSynthesizeInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size416 = 0;
        var _rtmp3420;
        this.columns = [];
        var _etype419 = 0;
        _rtmp3420 = input.readListBegin();
        _etype419 = _rtmp3420.etype;
        _size416 = _rtmp3420.size;
        for (var _i421 = 0; _i421 < _size416; ++_i421)
        {
          var elem422 = null;
          elem422 = new XcalarApiColumnT();
          elem422.read(input);
          this.columns.push(elem422);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.sameSession = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSynthesizeInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSynthesizeInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter423 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter423))
      {
        iter423 = this.columns[iter423];
        iter423.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sameSession !== null && this.sameSession !== undefined) {
    output.writeFieldBegin('sameSession', Thrift.Type.BOOL, 4);
    output.writeBool(this.sameSession);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiPublishInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.unixTS = null;
  this.dropSrc = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.dest !== undefined && args.dest !== null) {
      this.dest = args.dest;
    }
    if (args.unixTS !== undefined && args.unixTS !== null) {
      this.unixTS = args.unixTS;
    }
    if (args.dropSrc !== undefined && args.dropSrc !== null) {
      this.dropSrc = args.dropSrc;
    }
  }
};
XcalarApiPublishInputT.prototype = {};
XcalarApiPublishInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.unixTS = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.dropSrc = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiPublishInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiPublishInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.unixTS !== null && this.unixTS !== undefined) {
    output.writeFieldBegin('unixTS', Thrift.Type.I64, 3);
    output.writeI64(this.unixTS);
    output.writeFieldEnd();
  }
  if (this.dropSrc !== null && this.dropSrc !== undefined) {
    output.writeFieldBegin('dropSrc', Thrift.Type.BOOL, 4);
    output.writeBool(this.dropSrc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUpdateTableInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.unixTS = null;
  this.dropSrc = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.dest !== undefined && args.dest !== null) {
      this.dest = args.dest;
    }
    if (args.unixTS !== undefined && args.unixTS !== null) {
      this.unixTS = args.unixTS;
    }
    if (args.dropSrc !== undefined && args.dropSrc !== null) {
      this.dropSrc = args.dropSrc;
    }
  }
};
XcalarApiUpdateTableInputT.prototype = {};
XcalarApiUpdateTableInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.unixTS = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.dropSrc = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUpdateTableInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUpdateTableInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.unixTS !== null && this.unixTS !== undefined) {
    output.writeFieldBegin('unixTS', Thrift.Type.I64, 3);
    output.writeI64(this.unixTS);
    output.writeFieldEnd();
  }
  if (this.dropSrc !== null && this.dropSrc !== undefined) {
    output.writeFieldBegin('dropSrc', Thrift.Type.BOOL, 4);
    output.writeBool(this.dropSrc);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUpdateInputT = function(args) {
  this.updates = null;
  if (args) {
    if (args.updates !== undefined && args.updates !== null) {
      this.updates = Thrift.copyList(args.updates, [XcalarApiUpdateTableInputT]);
    }
  }
};
XcalarApiUpdateInputT.prototype = {};
XcalarApiUpdateInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size424 = 0;
        var _rtmp3428;
        this.updates = [];
        var _etype427 = 0;
        _rtmp3428 = input.readListBegin();
        _etype427 = _rtmp3428.etype;
        _size424 = _rtmp3428.size;
        for (var _i429 = 0; _i429 < _size424; ++_i429)
        {
          var elem430 = null;
          elem430 = new XcalarApiUpdateTableInputT();
          elem430.read(input);
          this.updates.push(elem430);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUpdateInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUpdateInputT');
  if (this.updates !== null && this.updates !== undefined) {
    output.writeFieldBegin('updates', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.updates.length);
    for (var iter431 in this.updates)
    {
      if (this.updates.hasOwnProperty(iter431))
      {
        iter431 = this.updates[iter431];
        iter431.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSelectInputT = function(args) {
  this.source = null;
  this.dest = null;
  this.minBatchId = null;
  this.maxBatchId = null;
  this.filterString = null;
  this.columns = null;
  this.limitRows = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.dest !== undefined && args.dest !== null) {
      this.dest = args.dest;
    }
    if (args.minBatchId !== undefined && args.minBatchId !== null) {
      this.minBatchId = args.minBatchId;
    }
    if (args.maxBatchId !== undefined && args.maxBatchId !== null) {
      this.maxBatchId = args.maxBatchId;
    }
    if (args.filterString !== undefined && args.filterString !== null) {
      this.filterString = args.filterString;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [XcalarApiColumnT]);
    }
    if (args.limitRows !== undefined && args.limitRows !== null) {
      this.limitRows = args.limitRows;
    }
  }
};
XcalarApiSelectInputT.prototype = {};
XcalarApiSelectInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dest = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.minBatchId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.maxBatchId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.filterString = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size432 = 0;
        var _rtmp3436;
        this.columns = [];
        var _etype435 = 0;
        _rtmp3436 = input.readListBegin();
        _etype435 = _rtmp3436.etype;
        _size432 = _rtmp3436.size;
        for (var _i437 = 0; _i437 < _size432; ++_i437)
        {
          var elem438 = null;
          elem438 = new XcalarApiColumnT();
          elem438.read(input);
          this.columns.push(elem438);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.limitRows = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSelectInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSelectInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.dest !== null && this.dest !== undefined) {
    output.writeFieldBegin('dest', Thrift.Type.STRING, 2);
    output.writeString(this.dest);
    output.writeFieldEnd();
  }
  if (this.minBatchId !== null && this.minBatchId !== undefined) {
    output.writeFieldBegin('minBatchId', Thrift.Type.I64, 3);
    output.writeI64(this.minBatchId);
    output.writeFieldEnd();
  }
  if (this.maxBatchId !== null && this.maxBatchId !== undefined) {
    output.writeFieldBegin('maxBatchId', Thrift.Type.I64, 4);
    output.writeI64(this.maxBatchId);
    output.writeFieldEnd();
  }
  if (this.filterString !== null && this.filterString !== undefined) {
    output.writeFieldBegin('filterString', Thrift.Type.STRING, 5);
    output.writeString(this.filterString);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.columns.length);
    for (var iter439 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter439))
      {
        iter439 = this.columns[iter439];
        iter439.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.limitRows !== null && this.limitRows !== undefined) {
    output.writeFieldBegin('limitRows', Thrift.Type.I64, 7);
    output.writeI64(this.limitRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUnpublishInputT = function(args) {
  this.source = null;
  this.inactivateOnly = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.inactivateOnly !== undefined && args.inactivateOnly !== null) {
      this.inactivateOnly = args.inactivateOnly;
    }
  }
};
XcalarApiUnpublishInputT.prototype = {};
XcalarApiUnpublishInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.inactivateOnly = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUnpublishInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUnpublishInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.inactivateOnly !== null && this.inactivateOnly !== undefined) {
    output.writeFieldBegin('inactivateOnly', Thrift.Type.BOOL, 2);
    output.writeBool(this.inactivateOnly);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiRestoreTableInputT = function(args) {
  this.publishedTableName = null;
  if (args) {
    if (args.publishedTableName !== undefined && args.publishedTableName !== null) {
      this.publishedTableName = args.publishedTableName;
    }
  }
};
XcalarApiRestoreTableInputT.prototype = {};
XcalarApiRestoreTableInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.publishedTableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiRestoreTableInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiRestoreTableInputT');
  if (this.publishedTableName !== null && this.publishedTableName !== undefined) {
    output.writeFieldBegin('publishedTableName', Thrift.Type.STRING, 1);
    output.writeString(this.publishedTableName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiCoalesceInputT = function(args) {
  this.source = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
  }
};
XcalarApiCoalesceInputT.prototype = {};
XcalarApiCoalesceInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiCoalesceInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiCoalesceInputT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListTablesInputT = function(args) {
  this.namePattern = null;
  this.getUpdates = null;
  this.getSelects = null;
  this.updateStartBatchId = null;
  if (args) {
    if (args.namePattern !== undefined && args.namePattern !== null) {
      this.namePattern = args.namePattern;
    }
    if (args.getUpdates !== undefined && args.getUpdates !== null) {
      this.getUpdates = args.getUpdates;
    }
    if (args.getSelects !== undefined && args.getSelects !== null) {
      this.getSelects = args.getSelects;
    }
    if (args.updateStartBatchId !== undefined && args.updateStartBatchId !== null) {
      this.updateStartBatchId = args.updateStartBatchId;
    }
  }
};
XcalarApiListTablesInputT.prototype = {};
XcalarApiListTablesInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.namePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.getUpdates = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.getSelects = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.updateStartBatchId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListTablesInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListTablesInputT');
  if (this.namePattern !== null && this.namePattern !== undefined) {
    output.writeFieldBegin('namePattern', Thrift.Type.STRING, 1);
    output.writeString(this.namePattern);
    output.writeFieldEnd();
  }
  if (this.getUpdates !== null && this.getUpdates !== undefined) {
    output.writeFieldBegin('getUpdates', Thrift.Type.BOOL, 2);
    output.writeBool(this.getUpdates);
    output.writeFieldEnd();
  }
  if (this.getSelects !== null && this.getSelects !== undefined) {
    output.writeFieldBegin('getSelects', Thrift.Type.BOOL, 3);
    output.writeBool(this.getSelects);
    output.writeFieldEnd();
  }
  if (this.updateStartBatchId !== null && this.updateStartBatchId !== undefined) {
    output.writeFieldBegin('updateStartBatchId', Thrift.Type.I32, 4);
    output.writeI32(this.updateStartBatchId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListRetinasInputT = function(args) {
  this.namePattern = null;
  if (args) {
    if (args.namePattern !== undefined && args.namePattern !== null) {
      this.namePattern = args.namePattern;
    }
  }
};
XcalarApiListRetinasInputT.prototype = {};
XcalarApiListRetinasInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.namePattern = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListRetinasInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListRetinasInputT');
  if (this.namePattern !== null && this.namePattern !== undefined) {
    output.writeFieldBegin('namePattern', Thrift.Type.STRING, 1);
    output.writeString(this.namePattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiIndexRequestInputT = function(args) {
  this.tableName = null;
  this.keyName = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.keyName !== undefined && args.keyName !== null) {
      this.keyName = args.keyName;
    }
  }
};
XcalarApiIndexRequestInputT.prototype = {};
XcalarApiIndexRequestInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.keyName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiIndexRequestInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiIndexRequestInputT');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.keyName !== null && this.keyName !== undefined) {
    output.writeFieldBegin('keyName', Thrift.Type.STRING, 2);
    output.writeString(this.keyName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiInputT = function(args) {
  this.loadInput = null;
  this.indexInput = null;
  this.statInput = null;
  this.getTableMetaInput = null;
  this.resultSetNextInput = null;
  this.joinInput = null;
  this.filterInput = null;
  this.groupByInput = null;
  this.resultSetAbsoluteInput = null;
  this.freeResultSetInput = null;
  this.getTableRefCountInput = null;
  this.listDagNodesInput = null;
  this.deleteDagNodeInput = null;
  this.queryInput = null;
  this.makeResultSetInput = null;
  this.mapInput = null;
  this.aggregateInput = null;
  this.queryStateInput = null;
  this.addTargetInput = null;
  this.listTargetsInput = null;
  this.exportInput = null;
  this.dagTableNameInput = null;
  this.listFilesInput = null;
  this.makeRetinaInput = null;
  this.getRetinaInput = null;
  this.executeRetinaInput = null;
  this.updateRetinaInput = null;
  this.listParametersInRetinaInput = null;
  this.keyLookupInput = null;
  this.keyAddOrReplaceInput = null;
  this.keyDeleteInput = null;
  this.topInput = null;
  this.shutdownInput = null;
  this.listXdfsInput = null;
  this.renameNodeInput = null;
  this.sessionNewInput = null;
  this.sessionDeleteInput = null;
  this.sessionListInput = null;
  this.sessionRenameInput = null;
  this.createDhtInput = null;
  this.keyAppendInput = null;
  this.keySetIfEqualInput = null;
  this.deleteDhtInput = null;
  this.deleteRetinaInput = null;
  this.projectInput = null;
  this.getRowNumInput = null;
  this.udfAddUpdateInput = null;
  this.udfGetInput = null;
  this.udfDeleteInput = null;
  this.previewInput = null;
  this.importRetinaInput = null;
  this.exportRetinaInput = null;
  this.startFuncTestInput = null;
  this.listFuncTestInput = null;
  this.setConfigParamInput = null;
  this.removeTargetInput = null;
  this.appSetInput = null;
  this.appRunInput = null;
  this.appReapInput = null;
  this.memoryUsageInput = null;
  this.logLevelSetInput = null;
  this.getIpAddrInput = null;
  this.supportGenerateInput = null;
  this.tagDagNodesInput = null;
  this.commentDagNodesInput = null;
  this.listDatasetUsersInput = null;
  this.keyListInput = null;
  this.listUserDatasetsInput = null;
  this.unionInput = null;
  this.targetInput = null;
  this.synthesizeInput = null;
  this.getRetinaJsonInput = null;
  this.getDatasetsInfoInput = null;
  this.archiveTablesInput = null;
  this.sessionDownloadInput = null;
  this.sessionUploadInput = null;
  this.publishInput = null;
  this.updateInput = null;
  this.selectInput = null;
  this.unpublishInput = null;
  this.listTablesInput = null;
  this.restoreTableInput = null;
  this.coalesceInput = null;
  this.sessionActivateInput = null;
  this.ptChangeOwnerInput = null;
  this.driverInput = null;
  this.runtimeSetParamInput = null;
  this.datasetCreateInput = null;
  this.datasetDeleteInput = null;
  this.datasetUnloadInput = null;
  this.datasetGetMetaInput = null;
  this.udfGetResInput = null;
  this.queryListInput = null;
  this.listRetinasInput = null;
  this.indexRequestInput = null;
  if (args) {
    if (args.loadInput !== undefined && args.loadInput !== null) {
      this.loadInput = new XcalarApiBulkLoadInputT(args.loadInput);
    }
    if (args.indexInput !== undefined && args.indexInput !== null) {
      this.indexInput = new XcalarApiIndexInputT(args.indexInput);
    }
    if (args.statInput !== undefined && args.statInput !== null) {
      this.statInput = new XcalarApiStatInputT(args.statInput);
    }
    if (args.getTableMetaInput !== undefined && args.getTableMetaInput !== null) {
      this.getTableMetaInput = new XcalarApiGetTableMetaInputT(args.getTableMetaInput);
    }
    if (args.resultSetNextInput !== undefined && args.resultSetNextInput !== null) {
      this.resultSetNextInput = new XcalarApiResultSetNextInputT(args.resultSetNextInput);
    }
    if (args.joinInput !== undefined && args.joinInput !== null) {
      this.joinInput = new XcalarApiJoinInputT(args.joinInput);
    }
    if (args.filterInput !== undefined && args.filterInput !== null) {
      this.filterInput = new XcalarApiFilterInputT(args.filterInput);
    }
    if (args.groupByInput !== undefined && args.groupByInput !== null) {
      this.groupByInput = new XcalarApiGroupByInputT(args.groupByInput);
    }
    if (args.resultSetAbsoluteInput !== undefined && args.resultSetAbsoluteInput !== null) {
      this.resultSetAbsoluteInput = new XcalarApiResultSetAbsoluteInputT(args.resultSetAbsoluteInput);
    }
    if (args.freeResultSetInput !== undefined && args.freeResultSetInput !== null) {
      this.freeResultSetInput = new XcalarApiFreeResultSetInputT(args.freeResultSetInput);
    }
    if (args.getTableRefCountInput !== undefined && args.getTableRefCountInput !== null) {
      this.getTableRefCountInput = new XcalarApiTableInputT(args.getTableRefCountInput);
    }
    if (args.listDagNodesInput !== undefined && args.listDagNodesInput !== null) {
      this.listDagNodesInput = new XcalarApiDagNodeNamePatternInputT(args.listDagNodesInput);
    }
    if (args.deleteDagNodeInput !== undefined && args.deleteDagNodeInput !== null) {
      this.deleteDagNodeInput = new XcalarApiDagNodeNamePatternInputT(args.deleteDagNodeInput);
    }
    if (args.queryInput !== undefined && args.queryInput !== null) {
      this.queryInput = new XcalarApiQueryInputT(args.queryInput);
    }
    if (args.makeResultSetInput !== undefined && args.makeResultSetInput !== null) {
      this.makeResultSetInput = new XcalarApiMakeResultSetInputT(args.makeResultSetInput);
    }
    if (args.mapInput !== undefined && args.mapInput !== null) {
      this.mapInput = new XcalarApiMapInputT(args.mapInput);
    }
    if (args.aggregateInput !== undefined && args.aggregateInput !== null) {
      this.aggregateInput = new XcalarApiAggregateInputT(args.aggregateInput);
    }
    if (args.queryStateInput !== undefined && args.queryStateInput !== null) {
      this.queryStateInput = new XcalarApiQueryNameInputT(args.queryStateInput);
    }
    if (args.addTargetInput !== undefined && args.addTargetInput !== null) {
      this.addTargetInput = new ExExportTargetT(args.addTargetInput);
    }
    if (args.listTargetsInput !== undefined && args.listTargetsInput !== null) {
      this.listTargetsInput = new XcalarApiListExportTargetsInputT(args.listTargetsInput);
    }
    if (args.exportInput !== undefined && args.exportInput !== null) {
      this.exportInput = new XcalarApiExportInputT(args.exportInput);
    }
    if (args.dagTableNameInput !== undefined && args.dagTableNameInput !== null) {
      this.dagTableNameInput = new XcalarApiDagTableNameInputT(args.dagTableNameInput);
    }
    if (args.listFilesInput !== undefined && args.listFilesInput !== null) {
      this.listFilesInput = new XcalarApiListFilesInputT(args.listFilesInput);
    }
    if (args.makeRetinaInput !== undefined && args.makeRetinaInput !== null) {
      this.makeRetinaInput = new XcalarApiMakeRetinaInputT(args.makeRetinaInput);
    }
    if (args.getRetinaInput !== undefined && args.getRetinaInput !== null) {
      this.getRetinaInput = new XcalarApiGetRetinaInputT(args.getRetinaInput);
    }
    if (args.executeRetinaInput !== undefined && args.executeRetinaInput !== null) {
      this.executeRetinaInput = new XcalarApiExecuteRetinaInputT(args.executeRetinaInput);
    }
    if (args.updateRetinaInput !== undefined && args.updateRetinaInput !== null) {
      this.updateRetinaInput = new XcalarApiUpdateRetinaInputT(args.updateRetinaInput);
    }
    if (args.listParametersInRetinaInput !== undefined && args.listParametersInRetinaInput !== null) {
      this.listParametersInRetinaInput = new XcalarApiListParametersInRetinaInputT(args.listParametersInRetinaInput);
    }
    if (args.keyLookupInput !== undefined && args.keyLookupInput !== null) {
      this.keyLookupInput = new XcalarApiKeyLookupInputT(args.keyLookupInput);
    }
    if (args.keyAddOrReplaceInput !== undefined && args.keyAddOrReplaceInput !== null) {
      this.keyAddOrReplaceInput = new XcalarApiKeyAddOrReplaceInputT(args.keyAddOrReplaceInput);
    }
    if (args.keyDeleteInput !== undefined && args.keyDeleteInput !== null) {
      this.keyDeleteInput = new XcalarApiKeyDeleteInputT(args.keyDeleteInput);
    }
    if (args.topInput !== undefined && args.topInput !== null) {
      this.topInput = new XcalarApiTopInputT(args.topInput);
    }
    if (args.shutdownInput !== undefined && args.shutdownInput !== null) {
      this.shutdownInput = new XcalarApiShutdownInputT(args.shutdownInput);
    }
    if (args.listXdfsInput !== undefined && args.listXdfsInput !== null) {
      this.listXdfsInput = new XcalarApiListXdfsInputT(args.listXdfsInput);
    }
    if (args.renameNodeInput !== undefined && args.renameNodeInput !== null) {
      this.renameNodeInput = new XcalarApiRenameNodeInputT(args.renameNodeInput);
    }
    if (args.sessionNewInput !== undefined && args.sessionNewInput !== null) {
      this.sessionNewInput = new XcalarApiSessionNewInputT(args.sessionNewInput);
    }
    if (args.sessionDeleteInput !== undefined && args.sessionDeleteInput !== null) {
      this.sessionDeleteInput = new XcalarApiSessionDeleteInputT(args.sessionDeleteInput);
    }
    if (args.sessionListInput !== undefined && args.sessionListInput !== null) {
      this.sessionListInput = new XcalarApiSessionListArrayInputT(args.sessionListInput);
    }
    if (args.sessionRenameInput !== undefined && args.sessionRenameInput !== null) {
      this.sessionRenameInput = new XcalarApiSessionRenameInputT(args.sessionRenameInput);
    }
    if (args.createDhtInput !== undefined && args.createDhtInput !== null) {
      this.createDhtInput = new XcalarApiCreateDhtInputT(args.createDhtInput);
    }
    if (args.keyAppendInput !== undefined && args.keyAppendInput !== null) {
      this.keyAppendInput = new XcalarApiKeyAppendInputT(args.keyAppendInput);
    }
    if (args.keySetIfEqualInput !== undefined && args.keySetIfEqualInput !== null) {
      this.keySetIfEqualInput = new XcalarApiKeySetIfEqualInputT(args.keySetIfEqualInput);
    }
    if (args.deleteDhtInput !== undefined && args.deleteDhtInput !== null) {
      this.deleteDhtInput = new XcalarApiDeleteDhtInputT(args.deleteDhtInput);
    }
    if (args.deleteRetinaInput !== undefined && args.deleteRetinaInput !== null) {
      this.deleteRetinaInput = new XcalarApiDeleteRetinaInputT(args.deleteRetinaInput);
    }
    if (args.projectInput !== undefined && args.projectInput !== null) {
      this.projectInput = new XcalarApiProjectInputT(args.projectInput);
    }
    if (args.getRowNumInput !== undefined && args.getRowNumInput !== null) {
      this.getRowNumInput = new XcalarApiGetRowNumInputT(args.getRowNumInput);
    }
    if (args.udfAddUpdateInput !== undefined && args.udfAddUpdateInput !== null) {
      this.udfAddUpdateInput = new UdfModuleSrcT(args.udfAddUpdateInput);
    }
    if (args.udfGetInput !== undefined && args.udfGetInput !== null) {
      this.udfGetInput = new XcalarApiUdfGetInputT(args.udfGetInput);
    }
    if (args.udfDeleteInput !== undefined && args.udfDeleteInput !== null) {
      this.udfDeleteInput = new XcalarApiUdfDeleteInputT(args.udfDeleteInput);
    }
    if (args.previewInput !== undefined && args.previewInput !== null) {
      this.previewInput = new XcalarApiPreviewInputT(args.previewInput);
    }
    if (args.importRetinaInput !== undefined && args.importRetinaInput !== null) {
      this.importRetinaInput = new XcalarApiImportRetinaInputT(args.importRetinaInput);
    }
    if (args.exportRetinaInput !== undefined && args.exportRetinaInput !== null) {
      this.exportRetinaInput = new XcalarApiExportRetinaInputT(args.exportRetinaInput);
    }
    if (args.startFuncTestInput !== undefined && args.startFuncTestInput !== null) {
      this.startFuncTestInput = new XcalarApiStartFuncTestInputT(args.startFuncTestInput);
    }
    if (args.listFuncTestInput !== undefined && args.listFuncTestInput !== null) {
      this.listFuncTestInput = new XcalarApiListFuncTestInputT(args.listFuncTestInput);
    }
    if (args.setConfigParamInput !== undefined && args.setConfigParamInput !== null) {
      this.setConfigParamInput = new XcalarApiSetConfigParamInputT(args.setConfigParamInput);
    }
    if (args.removeTargetInput !== undefined && args.removeTargetInput !== null) {
      this.removeTargetInput = new ExExportTargetHdrT(args.removeTargetInput);
    }
    if (args.appSetInput !== undefined && args.appSetInput !== null) {
      this.appSetInput = new XcalarApiAppSetInputT(args.appSetInput);
    }
    if (args.appRunInput !== undefined && args.appRunInput !== null) {
      this.appRunInput = new XcalarApiAppRunInputT(args.appRunInput);
    }
    if (args.appReapInput !== undefined && args.appReapInput !== null) {
      this.appReapInput = new XcalarApiAppReapInputT(args.appReapInput);
    }
    if (args.memoryUsageInput !== undefined && args.memoryUsageInput !== null) {
      this.memoryUsageInput = new XcalarApiGetMemoryUsageInputT(args.memoryUsageInput);
    }
    if (args.logLevelSetInput !== undefined && args.logLevelSetInput !== null) {
      this.logLevelSetInput = new XcalarApiLogLevelSetInputT(args.logLevelSetInput);
    }
    if (args.getIpAddrInput !== undefined && args.getIpAddrInput !== null) {
      this.getIpAddrInput = new XcalarApiGetIpAddrInputT(args.getIpAddrInput);
    }
    if (args.supportGenerateInput !== undefined && args.supportGenerateInput !== null) {
      this.supportGenerateInput = new XcalarApiSupportGenerateInputT(args.supportGenerateInput);
    }
    if (args.tagDagNodesInput !== undefined && args.tagDagNodesInput !== null) {
      this.tagDagNodesInput = new XcalarApiTagDagNodesInputT(args.tagDagNodesInput);
    }
    if (args.commentDagNodesInput !== undefined && args.commentDagNodesInput !== null) {
      this.commentDagNodesInput = new XcalarApiCommentDagNodesInputT(args.commentDagNodesInput);
    }
    if (args.listDatasetUsersInput !== undefined && args.listDatasetUsersInput !== null) {
      this.listDatasetUsersInput = new XcalarApiListDatasetUsersInputT(args.listDatasetUsersInput);
    }
    if (args.keyListInput !== undefined && args.keyListInput !== null) {
      this.keyListInput = new XcalarApiKeyListInputT(args.keyListInput);
    }
    if (args.listUserDatasetsInput !== undefined && args.listUserDatasetsInput !== null) {
      this.listUserDatasetsInput = new XcalarApiListUserDatasetsInputT(args.listUserDatasetsInput);
    }
    if (args.unionInput !== undefined && args.unionInput !== null) {
      this.unionInput = new XcalarApiUnionInputT(args.unionInput);
    }
    if (args.targetInput !== undefined && args.targetInput !== null) {
      this.targetInput = new XcalarApiTargetInputT(args.targetInput);
    }
    if (args.synthesizeInput !== undefined && args.synthesizeInput !== null) {
      this.synthesizeInput = new XcalarApiSynthesizeInputT(args.synthesizeInput);
    }
    if (args.getRetinaJsonInput !== undefined && args.getRetinaJsonInput !== null) {
      this.getRetinaJsonInput = new XcalarApiGetRetinaJsonInputT(args.getRetinaJsonInput);
    }
    if (args.getDatasetsInfoInput !== undefined && args.getDatasetsInfoInput !== null) {
      this.getDatasetsInfoInput = new XcalarApiGetDatasetsInfoInputT(args.getDatasetsInfoInput);
    }
    if (args.archiveTablesInput !== undefined && args.archiveTablesInput !== null) {
      this.archiveTablesInput = new XcalarApiArchiveTablesInputT(args.archiveTablesInput);
    }
    if (args.sessionDownloadInput !== undefined && args.sessionDownloadInput !== null) {
      this.sessionDownloadInput = new XcalarApiSessionDownloadInputT(args.sessionDownloadInput);
    }
    if (args.sessionUploadInput !== undefined && args.sessionUploadInput !== null) {
      this.sessionUploadInput = new XcalarApiSessionUploadInputT(args.sessionUploadInput);
    }
    if (args.publishInput !== undefined && args.publishInput !== null) {
      this.publishInput = new XcalarApiPublishInputT(args.publishInput);
    }
    if (args.updateInput !== undefined && args.updateInput !== null) {
      this.updateInput = new XcalarApiUpdateInputT(args.updateInput);
    }
    if (args.selectInput !== undefined && args.selectInput !== null) {
      this.selectInput = new XcalarApiSelectInputT(args.selectInput);
    }
    if (args.unpublishInput !== undefined && args.unpublishInput !== null) {
      this.unpublishInput = new XcalarApiUnpublishInputT(args.unpublishInput);
    }
    if (args.listTablesInput !== undefined && args.listTablesInput !== null) {
      this.listTablesInput = new XcalarApiListTablesInputT(args.listTablesInput);
    }
    if (args.restoreTableInput !== undefined && args.restoreTableInput !== null) {
      this.restoreTableInput = new XcalarApiRestoreTableInputT(args.restoreTableInput);
    }
    if (args.coalesceInput !== undefined && args.coalesceInput !== null) {
      this.coalesceInput = new XcalarApiCoalesceInputT(args.coalesceInput);
    }
    if (args.sessionActivateInput !== undefined && args.sessionActivateInput !== null) {
      this.sessionActivateInput = new XcalarApiSessionActivateInputT(args.sessionActivateInput);
    }
    if (args.ptChangeOwnerInput !== undefined && args.ptChangeOwnerInput !== null) {
      this.ptChangeOwnerInput = new XcalarApiPtChangeOwnerInputT(args.ptChangeOwnerInput);
    }
    if (args.driverInput !== undefined && args.driverInput !== null) {
      this.driverInput = new XcalarApiDriverInputT(args.driverInput);
    }
    if (args.runtimeSetParamInput !== undefined && args.runtimeSetParamInput !== null) {
      this.runtimeSetParamInput = new XcalarApiRuntimeSetParamInputT(args.runtimeSetParamInput);
    }
    if (args.datasetCreateInput !== undefined && args.datasetCreateInput !== null) {
      this.datasetCreateInput = new XcalarApiDatasetCreateInputT(args.datasetCreateInput);
    }
    if (args.datasetDeleteInput !== undefined && args.datasetDeleteInput !== null) {
      this.datasetDeleteInput = new XcalarApiDatasetDeleteInputT(args.datasetDeleteInput);
    }
    if (args.datasetUnloadInput !== undefined && args.datasetUnloadInput !== null) {
      this.datasetUnloadInput = new XcalarApiDatasetUnloadInputT(args.datasetUnloadInput);
    }
    if (args.datasetGetMetaInput !== undefined && args.datasetGetMetaInput !== null) {
      this.datasetGetMetaInput = new XcalarApiDatasetGetMetaInputT(args.datasetGetMetaInput);
    }
    if (args.udfGetResInput !== undefined && args.udfGetResInput !== null) {
      this.udfGetResInput = new XcalarApiUdfGetResInputT(args.udfGetResInput);
    }
    if (args.queryListInput !== undefined && args.queryListInput !== null) {
      this.queryListInput = new XcalarApiQueryListInputT(args.queryListInput);
    }
    if (args.listRetinasInput !== undefined && args.listRetinasInput !== null) {
      this.listRetinasInput = new XcalarApiListRetinasInputT(args.listRetinasInput);
    }
    if (args.indexRequestInput !== undefined && args.indexRequestInput !== null) {
      this.indexRequestInput = new XcalarApiIndexRequestInputT(args.indexRequestInput);
    }
  }
};
XcalarApiInputT.prototype = {};
XcalarApiInputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.loadInput = new XcalarApiBulkLoadInputT();
        this.loadInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.indexInput = new XcalarApiIndexInputT();
        this.indexInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.statInput = new XcalarApiStatInputT();
        this.statInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.getTableMetaInput = new XcalarApiGetTableMetaInputT();
        this.getTableMetaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSetNextInput = new XcalarApiResultSetNextInputT();
        this.resultSetNextInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.joinInput = new XcalarApiJoinInputT();
        this.joinInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.filterInput = new XcalarApiFilterInputT();
        this.filterInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.groupByInput = new XcalarApiGroupByInputT();
        this.groupByInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSetAbsoluteInput = new XcalarApiResultSetAbsoluteInputT();
        this.resultSetAbsoluteInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.freeResultSetInput = new XcalarApiFreeResultSetInputT();
        this.freeResultSetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.getTableRefCountInput = new XcalarApiTableInputT();
        this.getTableRefCountInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.listDagNodesInput = new XcalarApiDagNodeNamePatternInputT();
        this.listDagNodesInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteDagNodeInput = new XcalarApiDagNodeNamePatternInputT();
        this.deleteDagNodeInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryInput = new XcalarApiQueryInputT();
        this.queryInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.makeResultSetInput = new XcalarApiMakeResultSetInputT();
        this.makeResultSetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.mapInput = new XcalarApiMapInputT();
        this.mapInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.aggregateInput = new XcalarApiAggregateInputT();
        this.aggregateInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryStateInput = new XcalarApiQueryNameInputT();
        this.queryStateInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.addTargetInput = new ExExportTargetT();
        this.addTargetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.listTargetsInput = new XcalarApiListExportTargetsInputT();
        this.listTargetsInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRUCT) {
        this.exportInput = new XcalarApiExportInputT();
        this.exportInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRUCT) {
        this.dagTableNameInput = new XcalarApiDagTableNameInputT();
        this.dagTableNameInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRUCT) {
        this.listFilesInput = new XcalarApiListFilesInputT();
        this.listFilesInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRUCT) {
        this.makeRetinaInput = new XcalarApiMakeRetinaInputT();
        this.makeRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRUCT) {
        this.getRetinaInput = new XcalarApiGetRetinaInputT();
        this.getRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRUCT) {
        this.executeRetinaInput = new XcalarApiExecuteRetinaInputT();
        this.executeRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRUCT) {
        this.updateRetinaInput = new XcalarApiUpdateRetinaInputT();
        this.updateRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRUCT) {
        this.listParametersInRetinaInput = new XcalarApiListParametersInRetinaInputT();
        this.listParametersInRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyLookupInput = new XcalarApiKeyLookupInputT();
        this.keyLookupInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 33:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyAddOrReplaceInput = new XcalarApiKeyAddOrReplaceInputT();
        this.keyAddOrReplaceInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyDeleteInput = new XcalarApiKeyDeleteInputT();
        this.keyDeleteInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.STRUCT) {
        this.topInput = new XcalarApiTopInputT();
        this.topInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.STRUCT) {
        this.shutdownInput = new XcalarApiShutdownInputT();
        this.shutdownInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRUCT) {
        this.listXdfsInput = new XcalarApiListXdfsInputT();
        this.listXdfsInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.STRUCT) {
        this.renameNodeInput = new XcalarApiRenameNodeInputT();
        this.renameNodeInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionNewInput = new XcalarApiSessionNewInputT();
        this.sessionNewInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionDeleteInput = new XcalarApiSessionDeleteInputT();
        this.sessionDeleteInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionListInput = new XcalarApiSessionListArrayInputT();
        this.sessionListInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionRenameInput = new XcalarApiSessionRenameInputT();
        this.sessionRenameInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 45:
      if (ftype == Thrift.Type.STRUCT) {
        this.createDhtInput = new XcalarApiCreateDhtInputT();
        this.createDhtInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 46:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyAppendInput = new XcalarApiKeyAppendInputT();
        this.keyAppendInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 47:
      if (ftype == Thrift.Type.STRUCT) {
        this.keySetIfEqualInput = new XcalarApiKeySetIfEqualInputT();
        this.keySetIfEqualInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 48:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteDhtInput = new XcalarApiDeleteDhtInputT();
        this.deleteDhtInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 49:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteRetinaInput = new XcalarApiDeleteRetinaInputT();
        this.deleteRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 53:
      if (ftype == Thrift.Type.STRUCT) {
        this.projectInput = new XcalarApiProjectInputT();
        this.projectInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 54:
      if (ftype == Thrift.Type.STRUCT) {
        this.getRowNumInput = new XcalarApiGetRowNumInputT();
        this.getRowNumInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 55:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfAddUpdateInput = new UdfModuleSrcT();
        this.udfAddUpdateInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 56:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfGetInput = new XcalarApiUdfGetInputT();
        this.udfGetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 57:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfDeleteInput = new XcalarApiUdfDeleteInputT();
        this.udfDeleteInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 58:
      if (ftype == Thrift.Type.STRUCT) {
        this.previewInput = new XcalarApiPreviewInputT();
        this.previewInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 59:
      if (ftype == Thrift.Type.STRUCT) {
        this.importRetinaInput = new XcalarApiImportRetinaInputT();
        this.importRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.STRUCT) {
        this.exportRetinaInput = new XcalarApiExportRetinaInputT();
        this.exportRetinaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 61:
      if (ftype == Thrift.Type.STRUCT) {
        this.startFuncTestInput = new XcalarApiStartFuncTestInputT();
        this.startFuncTestInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 62:
      if (ftype == Thrift.Type.STRUCT) {
        this.listFuncTestInput = new XcalarApiListFuncTestInputT();
        this.listFuncTestInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 64:
      if (ftype == Thrift.Type.STRUCT) {
        this.setConfigParamInput = new XcalarApiSetConfigParamInputT();
        this.setConfigParamInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 65:
      if (ftype == Thrift.Type.STRUCT) {
        this.removeTargetInput = new ExExportTargetHdrT();
        this.removeTargetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 66:
      if (ftype == Thrift.Type.STRUCT) {
        this.appSetInput = new XcalarApiAppSetInputT();
        this.appSetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 68:
      if (ftype == Thrift.Type.STRUCT) {
        this.appRunInput = new XcalarApiAppRunInputT();
        this.appRunInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 69:
      if (ftype == Thrift.Type.STRUCT) {
        this.appReapInput = new XcalarApiAppReapInputT();
        this.appReapInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 72:
      if (ftype == Thrift.Type.STRUCT) {
        this.memoryUsageInput = new XcalarApiGetMemoryUsageInputT();
        this.memoryUsageInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 73:
      if (ftype == Thrift.Type.STRUCT) {
        this.logLevelSetInput = new XcalarApiLogLevelSetInputT();
        this.logLevelSetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 74:
      if (ftype == Thrift.Type.STRUCT) {
        this.getIpAddrInput = new XcalarApiGetIpAddrInputT();
        this.getIpAddrInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 75:
      if (ftype == Thrift.Type.STRUCT) {
        this.supportGenerateInput = new XcalarApiSupportGenerateInputT();
        this.supportGenerateInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 76:
      if (ftype == Thrift.Type.STRUCT) {
        this.tagDagNodesInput = new XcalarApiTagDagNodesInputT();
        this.tagDagNodesInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 77:
      if (ftype == Thrift.Type.STRUCT) {
        this.commentDagNodesInput = new XcalarApiCommentDagNodesInputT();
        this.commentDagNodesInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 78:
      if (ftype == Thrift.Type.STRUCT) {
        this.listDatasetUsersInput = new XcalarApiListDatasetUsersInputT();
        this.listDatasetUsersInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 80:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyListInput = new XcalarApiKeyListInputT();
        this.keyListInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 81:
      if (ftype == Thrift.Type.STRUCT) {
        this.listUserDatasetsInput = new XcalarApiListUserDatasetsInputT();
        this.listUserDatasetsInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 82:
      if (ftype == Thrift.Type.STRUCT) {
        this.unionInput = new XcalarApiUnionInputT();
        this.unionInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 83:
      if (ftype == Thrift.Type.STRUCT) {
        this.targetInput = new XcalarApiTargetInputT();
        this.targetInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 84:
      if (ftype == Thrift.Type.STRUCT) {
        this.synthesizeInput = new XcalarApiSynthesizeInputT();
        this.synthesizeInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 85:
      if (ftype == Thrift.Type.STRUCT) {
        this.getRetinaJsonInput = new XcalarApiGetRetinaJsonInputT();
        this.getRetinaJsonInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 86:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDatasetsInfoInput = new XcalarApiGetDatasetsInfoInputT();
        this.getDatasetsInfoInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 87:
      if (ftype == Thrift.Type.STRUCT) {
        this.archiveTablesInput = new XcalarApiArchiveTablesInputT();
        this.archiveTablesInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 88:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionDownloadInput = new XcalarApiSessionDownloadInputT();
        this.sessionDownloadInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 89:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionUploadInput = new XcalarApiSessionUploadInputT();
        this.sessionUploadInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 90:
      if (ftype == Thrift.Type.STRUCT) {
        this.publishInput = new XcalarApiPublishInputT();
        this.publishInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 91:
      if (ftype == Thrift.Type.STRUCT) {
        this.updateInput = new XcalarApiUpdateInputT();
        this.updateInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 92:
      if (ftype == Thrift.Type.STRUCT) {
        this.selectInput = new XcalarApiSelectInputT();
        this.selectInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 93:
      if (ftype == Thrift.Type.STRUCT) {
        this.unpublishInput = new XcalarApiUnpublishInputT();
        this.unpublishInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 94:
      if (ftype == Thrift.Type.STRUCT) {
        this.listTablesInput = new XcalarApiListTablesInputT();
        this.listTablesInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 95:
      if (ftype == Thrift.Type.STRUCT) {
        this.restoreTableInput = new XcalarApiRestoreTableInputT();
        this.restoreTableInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 96:
      if (ftype == Thrift.Type.STRUCT) {
        this.coalesceInput = new XcalarApiCoalesceInputT();
        this.coalesceInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 98:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionActivateInput = new XcalarApiSessionActivateInputT();
        this.sessionActivateInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 99:
      if (ftype == Thrift.Type.STRUCT) {
        this.ptChangeOwnerInput = new XcalarApiPtChangeOwnerInputT();
        this.ptChangeOwnerInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.STRUCT) {
        this.driverInput = new XcalarApiDriverInputT();
        this.driverInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 101:
      if (ftype == Thrift.Type.STRUCT) {
        this.runtimeSetParamInput = new XcalarApiRuntimeSetParamInputT();
        this.runtimeSetParamInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 103:
      if (ftype == Thrift.Type.STRUCT) {
        this.datasetCreateInput = new XcalarApiDatasetCreateInputT();
        this.datasetCreateInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 104:
      if (ftype == Thrift.Type.STRUCT) {
        this.datasetDeleteInput = new XcalarApiDatasetDeleteInputT();
        this.datasetDeleteInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 105:
      if (ftype == Thrift.Type.STRUCT) {
        this.datasetUnloadInput = new XcalarApiDatasetUnloadInputT();
        this.datasetUnloadInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 108:
      if (ftype == Thrift.Type.STRUCT) {
        this.datasetGetMetaInput = new XcalarApiDatasetGetMetaInputT();
        this.datasetGetMetaInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 109:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfGetResInput = new XcalarApiUdfGetResInputT();
        this.udfGetResInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 111:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryListInput = new XcalarApiQueryListInputT();
        this.queryListInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 112:
      if (ftype == Thrift.Type.STRUCT) {
        this.listRetinasInput = new XcalarApiListRetinasInputT();
        this.listRetinasInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 113:
      if (ftype == Thrift.Type.STRUCT) {
        this.indexRequestInput = new XcalarApiIndexRequestInputT();
        this.indexRequestInput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiInputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiInputT');
  if (this.loadInput !== null && this.loadInput !== undefined) {
    output.writeFieldBegin('loadInput', Thrift.Type.STRUCT, 1);
    this.loadInput.write(output);
    output.writeFieldEnd();
  }
  if (this.indexInput !== null && this.indexInput !== undefined) {
    output.writeFieldBegin('indexInput', Thrift.Type.STRUCT, 2);
    this.indexInput.write(output);
    output.writeFieldEnd();
  }
  if (this.statInput !== null && this.statInput !== undefined) {
    output.writeFieldBegin('statInput', Thrift.Type.STRUCT, 3);
    this.statInput.write(output);
    output.writeFieldEnd();
  }
  if (this.getTableMetaInput !== null && this.getTableMetaInput !== undefined) {
    output.writeFieldBegin('getTableMetaInput', Thrift.Type.STRUCT, 4);
    this.getTableMetaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSetNextInput !== null && this.resultSetNextInput !== undefined) {
    output.writeFieldBegin('resultSetNextInput', Thrift.Type.STRUCT, 5);
    this.resultSetNextInput.write(output);
    output.writeFieldEnd();
  }
  if (this.joinInput !== null && this.joinInput !== undefined) {
    output.writeFieldBegin('joinInput', Thrift.Type.STRUCT, 6);
    this.joinInput.write(output);
    output.writeFieldEnd();
  }
  if (this.filterInput !== null && this.filterInput !== undefined) {
    output.writeFieldBegin('filterInput', Thrift.Type.STRUCT, 7);
    this.filterInput.write(output);
    output.writeFieldEnd();
  }
  if (this.groupByInput !== null && this.groupByInput !== undefined) {
    output.writeFieldBegin('groupByInput', Thrift.Type.STRUCT, 8);
    this.groupByInput.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSetAbsoluteInput !== null && this.resultSetAbsoluteInput !== undefined) {
    output.writeFieldBegin('resultSetAbsoluteInput', Thrift.Type.STRUCT, 9);
    this.resultSetAbsoluteInput.write(output);
    output.writeFieldEnd();
  }
  if (this.freeResultSetInput !== null && this.freeResultSetInput !== undefined) {
    output.writeFieldBegin('freeResultSetInput', Thrift.Type.STRUCT, 10);
    this.freeResultSetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.getTableRefCountInput !== null && this.getTableRefCountInput !== undefined) {
    output.writeFieldBegin('getTableRefCountInput', Thrift.Type.STRUCT, 11);
    this.getTableRefCountInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listDagNodesInput !== null && this.listDagNodesInput !== undefined) {
    output.writeFieldBegin('listDagNodesInput', Thrift.Type.STRUCT, 12);
    this.listDagNodesInput.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteDagNodeInput !== null && this.deleteDagNodeInput !== undefined) {
    output.writeFieldBegin('deleteDagNodeInput', Thrift.Type.STRUCT, 13);
    this.deleteDagNodeInput.write(output);
    output.writeFieldEnd();
  }
  if (this.queryInput !== null && this.queryInput !== undefined) {
    output.writeFieldBegin('queryInput', Thrift.Type.STRUCT, 14);
    this.queryInput.write(output);
    output.writeFieldEnd();
  }
  if (this.makeResultSetInput !== null && this.makeResultSetInput !== undefined) {
    output.writeFieldBegin('makeResultSetInput', Thrift.Type.STRUCT, 16);
    this.makeResultSetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.mapInput !== null && this.mapInput !== undefined) {
    output.writeFieldBegin('mapInput', Thrift.Type.STRUCT, 17);
    this.mapInput.write(output);
    output.writeFieldEnd();
  }
  if (this.aggregateInput !== null && this.aggregateInput !== undefined) {
    output.writeFieldBegin('aggregateInput', Thrift.Type.STRUCT, 18);
    this.aggregateInput.write(output);
    output.writeFieldEnd();
  }
  if (this.queryStateInput !== null && this.queryStateInput !== undefined) {
    output.writeFieldBegin('queryStateInput', Thrift.Type.STRUCT, 19);
    this.queryStateInput.write(output);
    output.writeFieldEnd();
  }
  if (this.addTargetInput !== null && this.addTargetInput !== undefined) {
    output.writeFieldBegin('addTargetInput', Thrift.Type.STRUCT, 20);
    this.addTargetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listTargetsInput !== null && this.listTargetsInput !== undefined) {
    output.writeFieldBegin('listTargetsInput', Thrift.Type.STRUCT, 21);
    this.listTargetsInput.write(output);
    output.writeFieldEnd();
  }
  if (this.exportInput !== null && this.exportInput !== undefined) {
    output.writeFieldBegin('exportInput', Thrift.Type.STRUCT, 22);
    this.exportInput.write(output);
    output.writeFieldEnd();
  }
  if (this.dagTableNameInput !== null && this.dagTableNameInput !== undefined) {
    output.writeFieldBegin('dagTableNameInput', Thrift.Type.STRUCT, 23);
    this.dagTableNameInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listFilesInput !== null && this.listFilesInput !== undefined) {
    output.writeFieldBegin('listFilesInput', Thrift.Type.STRUCT, 24);
    this.listFilesInput.write(output);
    output.writeFieldEnd();
  }
  if (this.makeRetinaInput !== null && this.makeRetinaInput !== undefined) {
    output.writeFieldBegin('makeRetinaInput', Thrift.Type.STRUCT, 26);
    this.makeRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.getRetinaInput !== null && this.getRetinaInput !== undefined) {
    output.writeFieldBegin('getRetinaInput', Thrift.Type.STRUCT, 27);
    this.getRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.executeRetinaInput !== null && this.executeRetinaInput !== undefined) {
    output.writeFieldBegin('executeRetinaInput', Thrift.Type.STRUCT, 28);
    this.executeRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.updateRetinaInput !== null && this.updateRetinaInput !== undefined) {
    output.writeFieldBegin('updateRetinaInput', Thrift.Type.STRUCT, 29);
    this.updateRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listParametersInRetinaInput !== null && this.listParametersInRetinaInput !== undefined) {
    output.writeFieldBegin('listParametersInRetinaInput', Thrift.Type.STRUCT, 31);
    this.listParametersInRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyLookupInput !== null && this.keyLookupInput !== undefined) {
    output.writeFieldBegin('keyLookupInput', Thrift.Type.STRUCT, 32);
    this.keyLookupInput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyAddOrReplaceInput !== null && this.keyAddOrReplaceInput !== undefined) {
    output.writeFieldBegin('keyAddOrReplaceInput', Thrift.Type.STRUCT, 33);
    this.keyAddOrReplaceInput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyDeleteInput !== null && this.keyDeleteInput !== undefined) {
    output.writeFieldBegin('keyDeleteInput', Thrift.Type.STRUCT, 34);
    this.keyDeleteInput.write(output);
    output.writeFieldEnd();
  }
  if (this.topInput !== null && this.topInput !== undefined) {
    output.writeFieldBegin('topInput', Thrift.Type.STRUCT, 35);
    this.topInput.write(output);
    output.writeFieldEnd();
  }
  if (this.shutdownInput !== null && this.shutdownInput !== undefined) {
    output.writeFieldBegin('shutdownInput', Thrift.Type.STRUCT, 36);
    this.shutdownInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listXdfsInput !== null && this.listXdfsInput !== undefined) {
    output.writeFieldBegin('listXdfsInput', Thrift.Type.STRUCT, 37);
    this.listXdfsInput.write(output);
    output.writeFieldEnd();
  }
  if (this.renameNodeInput !== null && this.renameNodeInput !== undefined) {
    output.writeFieldBegin('renameNodeInput', Thrift.Type.STRUCT, 38);
    this.renameNodeInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionNewInput !== null && this.sessionNewInput !== undefined) {
    output.writeFieldBegin('sessionNewInput', Thrift.Type.STRUCT, 40);
    this.sessionNewInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionDeleteInput !== null && this.sessionDeleteInput !== undefined) {
    output.writeFieldBegin('sessionDeleteInput', Thrift.Type.STRUCT, 41);
    this.sessionDeleteInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionListInput !== null && this.sessionListInput !== undefined) {
    output.writeFieldBegin('sessionListInput', Thrift.Type.STRUCT, 43);
    this.sessionListInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionRenameInput !== null && this.sessionRenameInput !== undefined) {
    output.writeFieldBegin('sessionRenameInput', Thrift.Type.STRUCT, 44);
    this.sessionRenameInput.write(output);
    output.writeFieldEnd();
  }
  if (this.createDhtInput !== null && this.createDhtInput !== undefined) {
    output.writeFieldBegin('createDhtInput', Thrift.Type.STRUCT, 45);
    this.createDhtInput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyAppendInput !== null && this.keyAppendInput !== undefined) {
    output.writeFieldBegin('keyAppendInput', Thrift.Type.STRUCT, 46);
    this.keyAppendInput.write(output);
    output.writeFieldEnd();
  }
  if (this.keySetIfEqualInput !== null && this.keySetIfEqualInput !== undefined) {
    output.writeFieldBegin('keySetIfEqualInput', Thrift.Type.STRUCT, 47);
    this.keySetIfEqualInput.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteDhtInput !== null && this.deleteDhtInput !== undefined) {
    output.writeFieldBegin('deleteDhtInput', Thrift.Type.STRUCT, 48);
    this.deleteDhtInput.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteRetinaInput !== null && this.deleteRetinaInput !== undefined) {
    output.writeFieldBegin('deleteRetinaInput', Thrift.Type.STRUCT, 49);
    this.deleteRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.projectInput !== null && this.projectInput !== undefined) {
    output.writeFieldBegin('projectInput', Thrift.Type.STRUCT, 53);
    this.projectInput.write(output);
    output.writeFieldEnd();
  }
  if (this.getRowNumInput !== null && this.getRowNumInput !== undefined) {
    output.writeFieldBegin('getRowNumInput', Thrift.Type.STRUCT, 54);
    this.getRowNumInput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfAddUpdateInput !== null && this.udfAddUpdateInput !== undefined) {
    output.writeFieldBegin('udfAddUpdateInput', Thrift.Type.STRUCT, 55);
    this.udfAddUpdateInput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfGetInput !== null && this.udfGetInput !== undefined) {
    output.writeFieldBegin('udfGetInput', Thrift.Type.STRUCT, 56);
    this.udfGetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfDeleteInput !== null && this.udfDeleteInput !== undefined) {
    output.writeFieldBegin('udfDeleteInput', Thrift.Type.STRUCT, 57);
    this.udfDeleteInput.write(output);
    output.writeFieldEnd();
  }
  if (this.previewInput !== null && this.previewInput !== undefined) {
    output.writeFieldBegin('previewInput', Thrift.Type.STRUCT, 58);
    this.previewInput.write(output);
    output.writeFieldEnd();
  }
  if (this.importRetinaInput !== null && this.importRetinaInput !== undefined) {
    output.writeFieldBegin('importRetinaInput', Thrift.Type.STRUCT, 59);
    this.importRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.exportRetinaInput !== null && this.exportRetinaInput !== undefined) {
    output.writeFieldBegin('exportRetinaInput', Thrift.Type.STRUCT, 60);
    this.exportRetinaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.startFuncTestInput !== null && this.startFuncTestInput !== undefined) {
    output.writeFieldBegin('startFuncTestInput', Thrift.Type.STRUCT, 61);
    this.startFuncTestInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listFuncTestInput !== null && this.listFuncTestInput !== undefined) {
    output.writeFieldBegin('listFuncTestInput', Thrift.Type.STRUCT, 62);
    this.listFuncTestInput.write(output);
    output.writeFieldEnd();
  }
  if (this.setConfigParamInput !== null && this.setConfigParamInput !== undefined) {
    output.writeFieldBegin('setConfigParamInput', Thrift.Type.STRUCT, 64);
    this.setConfigParamInput.write(output);
    output.writeFieldEnd();
  }
  if (this.removeTargetInput !== null && this.removeTargetInput !== undefined) {
    output.writeFieldBegin('removeTargetInput', Thrift.Type.STRUCT, 65);
    this.removeTargetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.appSetInput !== null && this.appSetInput !== undefined) {
    output.writeFieldBegin('appSetInput', Thrift.Type.STRUCT, 66);
    this.appSetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.appRunInput !== null && this.appRunInput !== undefined) {
    output.writeFieldBegin('appRunInput', Thrift.Type.STRUCT, 68);
    this.appRunInput.write(output);
    output.writeFieldEnd();
  }
  if (this.appReapInput !== null && this.appReapInput !== undefined) {
    output.writeFieldBegin('appReapInput', Thrift.Type.STRUCT, 69);
    this.appReapInput.write(output);
    output.writeFieldEnd();
  }
  if (this.memoryUsageInput !== null && this.memoryUsageInput !== undefined) {
    output.writeFieldBegin('memoryUsageInput', Thrift.Type.STRUCT, 72);
    this.memoryUsageInput.write(output);
    output.writeFieldEnd();
  }
  if (this.logLevelSetInput !== null && this.logLevelSetInput !== undefined) {
    output.writeFieldBegin('logLevelSetInput', Thrift.Type.STRUCT, 73);
    this.logLevelSetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.getIpAddrInput !== null && this.getIpAddrInput !== undefined) {
    output.writeFieldBegin('getIpAddrInput', Thrift.Type.STRUCT, 74);
    this.getIpAddrInput.write(output);
    output.writeFieldEnd();
  }
  if (this.supportGenerateInput !== null && this.supportGenerateInput !== undefined) {
    output.writeFieldBegin('supportGenerateInput', Thrift.Type.STRUCT, 75);
    this.supportGenerateInput.write(output);
    output.writeFieldEnd();
  }
  if (this.tagDagNodesInput !== null && this.tagDagNodesInput !== undefined) {
    output.writeFieldBegin('tagDagNodesInput', Thrift.Type.STRUCT, 76);
    this.tagDagNodesInput.write(output);
    output.writeFieldEnd();
  }
  if (this.commentDagNodesInput !== null && this.commentDagNodesInput !== undefined) {
    output.writeFieldBegin('commentDagNodesInput', Thrift.Type.STRUCT, 77);
    this.commentDagNodesInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listDatasetUsersInput !== null && this.listDatasetUsersInput !== undefined) {
    output.writeFieldBegin('listDatasetUsersInput', Thrift.Type.STRUCT, 78);
    this.listDatasetUsersInput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyListInput !== null && this.keyListInput !== undefined) {
    output.writeFieldBegin('keyListInput', Thrift.Type.STRUCT, 80);
    this.keyListInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listUserDatasetsInput !== null && this.listUserDatasetsInput !== undefined) {
    output.writeFieldBegin('listUserDatasetsInput', Thrift.Type.STRUCT, 81);
    this.listUserDatasetsInput.write(output);
    output.writeFieldEnd();
  }
  if (this.unionInput !== null && this.unionInput !== undefined) {
    output.writeFieldBegin('unionInput', Thrift.Type.STRUCT, 82);
    this.unionInput.write(output);
    output.writeFieldEnd();
  }
  if (this.targetInput !== null && this.targetInput !== undefined) {
    output.writeFieldBegin('targetInput', Thrift.Type.STRUCT, 83);
    this.targetInput.write(output);
    output.writeFieldEnd();
  }
  if (this.synthesizeInput !== null && this.synthesizeInput !== undefined) {
    output.writeFieldBegin('synthesizeInput', Thrift.Type.STRUCT, 84);
    this.synthesizeInput.write(output);
    output.writeFieldEnd();
  }
  if (this.getRetinaJsonInput !== null && this.getRetinaJsonInput !== undefined) {
    output.writeFieldBegin('getRetinaJsonInput', Thrift.Type.STRUCT, 85);
    this.getRetinaJsonInput.write(output);
    output.writeFieldEnd();
  }
  if (this.getDatasetsInfoInput !== null && this.getDatasetsInfoInput !== undefined) {
    output.writeFieldBegin('getDatasetsInfoInput', Thrift.Type.STRUCT, 86);
    this.getDatasetsInfoInput.write(output);
    output.writeFieldEnd();
  }
  if (this.archiveTablesInput !== null && this.archiveTablesInput !== undefined) {
    output.writeFieldBegin('archiveTablesInput', Thrift.Type.STRUCT, 87);
    this.archiveTablesInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionDownloadInput !== null && this.sessionDownloadInput !== undefined) {
    output.writeFieldBegin('sessionDownloadInput', Thrift.Type.STRUCT, 88);
    this.sessionDownloadInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionUploadInput !== null && this.sessionUploadInput !== undefined) {
    output.writeFieldBegin('sessionUploadInput', Thrift.Type.STRUCT, 89);
    this.sessionUploadInput.write(output);
    output.writeFieldEnd();
  }
  if (this.publishInput !== null && this.publishInput !== undefined) {
    output.writeFieldBegin('publishInput', Thrift.Type.STRUCT, 90);
    this.publishInput.write(output);
    output.writeFieldEnd();
  }
  if (this.updateInput !== null && this.updateInput !== undefined) {
    output.writeFieldBegin('updateInput', Thrift.Type.STRUCT, 91);
    this.updateInput.write(output);
    output.writeFieldEnd();
  }
  if (this.selectInput !== null && this.selectInput !== undefined) {
    output.writeFieldBegin('selectInput', Thrift.Type.STRUCT, 92);
    this.selectInput.write(output);
    output.writeFieldEnd();
  }
  if (this.unpublishInput !== null && this.unpublishInput !== undefined) {
    output.writeFieldBegin('unpublishInput', Thrift.Type.STRUCT, 93);
    this.unpublishInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listTablesInput !== null && this.listTablesInput !== undefined) {
    output.writeFieldBegin('listTablesInput', Thrift.Type.STRUCT, 94);
    this.listTablesInput.write(output);
    output.writeFieldEnd();
  }
  if (this.restoreTableInput !== null && this.restoreTableInput !== undefined) {
    output.writeFieldBegin('restoreTableInput', Thrift.Type.STRUCT, 95);
    this.restoreTableInput.write(output);
    output.writeFieldEnd();
  }
  if (this.coalesceInput !== null && this.coalesceInput !== undefined) {
    output.writeFieldBegin('coalesceInput', Thrift.Type.STRUCT, 96);
    this.coalesceInput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionActivateInput !== null && this.sessionActivateInput !== undefined) {
    output.writeFieldBegin('sessionActivateInput', Thrift.Type.STRUCT, 98);
    this.sessionActivateInput.write(output);
    output.writeFieldEnd();
  }
  if (this.ptChangeOwnerInput !== null && this.ptChangeOwnerInput !== undefined) {
    output.writeFieldBegin('ptChangeOwnerInput', Thrift.Type.STRUCT, 99);
    this.ptChangeOwnerInput.write(output);
    output.writeFieldEnd();
  }
  if (this.driverInput !== null && this.driverInput !== undefined) {
    output.writeFieldBegin('driverInput', Thrift.Type.STRUCT, 100);
    this.driverInput.write(output);
    output.writeFieldEnd();
  }
  if (this.runtimeSetParamInput !== null && this.runtimeSetParamInput !== undefined) {
    output.writeFieldBegin('runtimeSetParamInput', Thrift.Type.STRUCT, 101);
    this.runtimeSetParamInput.write(output);
    output.writeFieldEnd();
  }
  if (this.datasetCreateInput !== null && this.datasetCreateInput !== undefined) {
    output.writeFieldBegin('datasetCreateInput', Thrift.Type.STRUCT, 103);
    this.datasetCreateInput.write(output);
    output.writeFieldEnd();
  }
  if (this.datasetDeleteInput !== null && this.datasetDeleteInput !== undefined) {
    output.writeFieldBegin('datasetDeleteInput', Thrift.Type.STRUCT, 104);
    this.datasetDeleteInput.write(output);
    output.writeFieldEnd();
  }
  if (this.datasetUnloadInput !== null && this.datasetUnloadInput !== undefined) {
    output.writeFieldBegin('datasetUnloadInput', Thrift.Type.STRUCT, 105);
    this.datasetUnloadInput.write(output);
    output.writeFieldEnd();
  }
  if (this.datasetGetMetaInput !== null && this.datasetGetMetaInput !== undefined) {
    output.writeFieldBegin('datasetGetMetaInput', Thrift.Type.STRUCT, 108);
    this.datasetGetMetaInput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfGetResInput !== null && this.udfGetResInput !== undefined) {
    output.writeFieldBegin('udfGetResInput', Thrift.Type.STRUCT, 109);
    this.udfGetResInput.write(output);
    output.writeFieldEnd();
  }
  if (this.queryListInput !== null && this.queryListInput !== undefined) {
    output.writeFieldBegin('queryListInput', Thrift.Type.STRUCT, 111);
    this.queryListInput.write(output);
    output.writeFieldEnd();
  }
  if (this.listRetinasInput !== null && this.listRetinasInput !== undefined) {
    output.writeFieldBegin('listRetinasInput', Thrift.Type.STRUCT, 112);
    this.listRetinasInput.write(output);
    output.writeFieldEnd();
  }
  if (this.indexRequestInput !== null && this.indexRequestInput !== undefined) {
    output.writeFieldBegin('indexRequestInput', Thrift.Type.STRUCT, 113);
    this.indexRequestInput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OpFailureInfoT = function(args) {
  this.numRowsFailedTotal = null;
  this.opFailureSummary = null;
  if (args) {
    if (args.numRowsFailedTotal !== undefined && args.numRowsFailedTotal !== null) {
      this.numRowsFailedTotal = args.numRowsFailedTotal;
    }
    if (args.opFailureSummary !== undefined && args.opFailureSummary !== null) {
      this.opFailureSummary = Thrift.copyList(args.opFailureSummary, [FailureSummaryT]);
    }
  }
};
OpFailureInfoT.prototype = {};
OpFailureInfoT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numRowsFailedTotal = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size440 = 0;
        var _rtmp3444;
        this.opFailureSummary = [];
        var _etype443 = 0;
        _rtmp3444 = input.readListBegin();
        _etype443 = _rtmp3444.etype;
        _size440 = _rtmp3444.size;
        for (var _i445 = 0; _i445 < _size440; ++_i445)
        {
          var elem446 = null;
          elem446 = new FailureSummaryT();
          elem446.read(input);
          this.opFailureSummary.push(elem446);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OpFailureInfoT.prototype.write = function(output) {
  output.writeStructBegin('OpFailureInfoT');
  if (this.numRowsFailedTotal !== null && this.numRowsFailedTotal !== undefined) {
    output.writeFieldBegin('numRowsFailedTotal', Thrift.Type.I64, 1);
    output.writeI64(this.numRowsFailedTotal);
    output.writeFieldEnd();
  }
  if (this.opFailureSummary !== null && this.opFailureSummary !== undefined) {
    output.writeFieldBegin('opFailureSummary', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.opFailureSummary.length);
    for (var iter447 in this.opFailureSummary)
    {
      if (this.opFailureSummary.hasOwnProperty(iter447))
      {
        iter447 = this.opFailureSummary[iter447];
        iter447.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SlotInfoT = function(args) {
  this.numRowsPerSlot = null;
  this.numPagesPerSlot = null;
  if (args) {
    if (args.numRowsPerSlot !== undefined && args.numRowsPerSlot !== null) {
      this.numRowsPerSlot = Thrift.copyList(args.numRowsPerSlot, [null]);
    }
    if (args.numPagesPerSlot !== undefined && args.numPagesPerSlot !== null) {
      this.numPagesPerSlot = Thrift.copyList(args.numPagesPerSlot, [null]);
    }
  }
};
SlotInfoT.prototype = {};
SlotInfoT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size448 = 0;
        var _rtmp3452;
        this.numRowsPerSlot = [];
        var _etype451 = 0;
        _rtmp3452 = input.readListBegin();
        _etype451 = _rtmp3452.etype;
        _size448 = _rtmp3452.size;
        for (var _i453 = 0; _i453 < _size448; ++_i453)
        {
          var elem454 = null;
          elem454 = input.readI32().value;
          this.numRowsPerSlot.push(elem454);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size455 = 0;
        var _rtmp3459;
        this.numPagesPerSlot = [];
        var _etype458 = 0;
        _rtmp3459 = input.readListBegin();
        _etype458 = _rtmp3459.etype;
        _size455 = _rtmp3459.size;
        for (var _i460 = 0; _i460 < _size455; ++_i460)
        {
          var elem461 = null;
          elem461 = input.readI32().value;
          this.numPagesPerSlot.push(elem461);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SlotInfoT.prototype.write = function(output) {
  output.writeStructBegin('SlotInfoT');
  if (this.numRowsPerSlot !== null && this.numRowsPerSlot !== undefined) {
    output.writeFieldBegin('numRowsPerSlot', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.numRowsPerSlot.length);
    for (var iter462 in this.numRowsPerSlot)
    {
      if (this.numRowsPerSlot.hasOwnProperty(iter462))
      {
        iter462 = this.numRowsPerSlot[iter462];
        output.writeI32(iter462);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numPagesPerSlot !== null && this.numPagesPerSlot !== undefined) {
    output.writeFieldBegin('numPagesPerSlot', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.numPagesPerSlot.length);
    for (var iter463 in this.numPagesPerSlot)
    {
      if (this.numPagesPerSlot.hasOwnProperty(iter463))
      {
        iter463 = this.numPagesPerSlot[iter463];
        output.writeI32(iter463);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagNodeT = function(args) {
  this.name = null;
  this.tag = null;
  this.comment = null;
  this.dagNodeId = null;
  this.api = null;
  this.state = null;
  this.xdbBytesRequired = null;
  this.xdbBytesConsumed = null;
  this.numTransPageSent = null;
  this.numTransPageRecv = null;
  this.numWorkCompleted = null;
  this.numWorkTotal = null;
  this.elapsed = null;
  this.inputSize = null;
  this.input = null;
  this.numRowsTotal = null;
  this.numNodes = null;
  this.numRowsPerNode = null;
  this.sizeTotal = null;
  this.sizePerNode = null;
  this.numTransPagesReceivedPerNode = null;
  this.numParents = null;
  this.parents = null;
  this.numChildren = null;
  this.children = null;
  this.log = null;
  this.status = null;
  this.pinned = null;
  this.startTime = null;
  this.endTime = null;
  this.opFailureInfo = null;
  this.hashSlotSkewPerNode = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = new XcalarApiDagNameT(args.name);
    }
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = args.tag;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
    if (args.dagNodeId !== undefined && args.dagNodeId !== null) {
      this.dagNodeId = args.dagNodeId;
    }
    if (args.api !== undefined && args.api !== null) {
      this.api = args.api;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.xdbBytesRequired !== undefined && args.xdbBytesRequired !== null) {
      this.xdbBytesRequired = args.xdbBytesRequired;
    }
    if (args.xdbBytesConsumed !== undefined && args.xdbBytesConsumed !== null) {
      this.xdbBytesConsumed = args.xdbBytesConsumed;
    }
    if (args.numTransPageSent !== undefined && args.numTransPageSent !== null) {
      this.numTransPageSent = args.numTransPageSent;
    }
    if (args.numTransPageRecv !== undefined && args.numTransPageRecv !== null) {
      this.numTransPageRecv = args.numTransPageRecv;
    }
    if (args.numWorkCompleted !== undefined && args.numWorkCompleted !== null) {
      this.numWorkCompleted = args.numWorkCompleted;
    }
    if (args.numWorkTotal !== undefined && args.numWorkTotal !== null) {
      this.numWorkTotal = args.numWorkTotal;
    }
    if (args.elapsed !== undefined && args.elapsed !== null) {
      this.elapsed = new XcalarApiTimeT(args.elapsed);
    }
    if (args.inputSize !== undefined && args.inputSize !== null) {
      this.inputSize = args.inputSize;
    }
    if (args.input !== undefined && args.input !== null) {
      this.input = new XcalarApiInputT(args.input);
    }
    if (args.numRowsTotal !== undefined && args.numRowsTotal !== null) {
      this.numRowsTotal = args.numRowsTotal;
    }
    if (args.numNodes !== undefined && args.numNodes !== null) {
      this.numNodes = args.numNodes;
    }
    if (args.numRowsPerNode !== undefined && args.numRowsPerNode !== null) {
      this.numRowsPerNode = Thrift.copyList(args.numRowsPerNode, [null]);
    }
    if (args.sizeTotal !== undefined && args.sizeTotal !== null) {
      this.sizeTotal = args.sizeTotal;
    }
    if (args.sizePerNode !== undefined && args.sizePerNode !== null) {
      this.sizePerNode = Thrift.copyList(args.sizePerNode, [null]);
    }
    if (args.numTransPagesReceivedPerNode !== undefined && args.numTransPagesReceivedPerNode !== null) {
      this.numTransPagesReceivedPerNode = Thrift.copyList(args.numTransPagesReceivedPerNode, [null]);
    }
    if (args.numParents !== undefined && args.numParents !== null) {
      this.numParents = args.numParents;
    }
    if (args.parents !== undefined && args.parents !== null) {
      this.parents = Thrift.copyList(args.parents, [null]);
    }
    if (args.numChildren !== undefined && args.numChildren !== null) {
      this.numChildren = args.numChildren;
    }
    if (args.children !== undefined && args.children !== null) {
      this.children = Thrift.copyList(args.children, [null]);
    }
    if (args.log !== undefined && args.log !== null) {
      this.log = args.log;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.pinned !== undefined && args.pinned !== null) {
      this.pinned = args.pinned;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.opFailureInfo !== undefined && args.opFailureInfo !== null) {
      this.opFailureInfo = new OpFailureInfoT(args.opFailureInfo);
    }
    if (args.hashSlotSkewPerNode !== undefined && args.hashSlotSkewPerNode !== null) {
      this.hashSlotSkewPerNode = Thrift.copyList(args.hashSlotSkewPerNode, [null]);
    }
  }
};
XcalarApiDagNodeT.prototype = {};
XcalarApiDagNodeT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.name = new XcalarApiDagNameT();
        this.name.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dagNodeId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.api = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.state = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.xdbBytesRequired = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.xdbBytesConsumed = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.numTransPageSent = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.numTransPageRecv = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.numWorkCompleted = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.numWorkTotal = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.elapsed = new XcalarApiTimeT();
        this.elapsed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I64) {
        this.inputSize = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.input = new XcalarApiInputT();
        this.input.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I64) {
        this.numRowsTotal = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.numNodes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.LIST) {
        var _size464 = 0;
        var _rtmp3468;
        this.numRowsPerNode = [];
        var _etype467 = 0;
        _rtmp3468 = input.readListBegin();
        _etype467 = _rtmp3468.etype;
        _size464 = _rtmp3468.size;
        for (var _i469 = 0; _i469 < _size464; ++_i469)
        {
          var elem470 = null;
          elem470 = input.readI64().value;
          this.numRowsPerNode.push(elem470);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I64) {
        this.sizeTotal = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.LIST) {
        var _size471 = 0;
        var _rtmp3475;
        this.sizePerNode = [];
        var _etype474 = 0;
        _rtmp3475 = input.readListBegin();
        _etype474 = _rtmp3475.etype;
        _size471 = _rtmp3475.size;
        for (var _i476 = 0; _i476 < _size471; ++_i476)
        {
          var elem477 = null;
          elem477 = input.readI64().value;
          this.sizePerNode.push(elem477);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.LIST) {
        var _size478 = 0;
        var _rtmp3482;
        this.numTransPagesReceivedPerNode = [];
        var _etype481 = 0;
        _rtmp3482 = input.readListBegin();
        _etype481 = _rtmp3482.etype;
        _size478 = _rtmp3482.size;
        for (var _i483 = 0; _i483 < _size478; ++_i483)
        {
          var elem484 = null;
          elem484 = input.readI64().value;
          this.numTransPagesReceivedPerNode.push(elem484);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I64) {
        this.numParents = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.LIST) {
        var _size485 = 0;
        var _rtmp3489;
        this.parents = [];
        var _etype488 = 0;
        _rtmp3489 = input.readListBegin();
        _etype488 = _rtmp3489.etype;
        _size485 = _rtmp3489.size;
        for (var _i490 = 0; _i490 < _size485; ++_i490)
        {
          var elem491 = null;
          elem491 = input.readString().value;
          this.parents.push(elem491);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I64) {
        this.numChildren = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.LIST) {
        var _size492 = 0;
        var _rtmp3496;
        this.children = [];
        var _etype495 = 0;
        _rtmp3496 = input.readListBegin();
        _etype495 = _rtmp3496.etype;
        _size492 = _rtmp3496.size;
        for (var _i497 = 0; _i497 < _size492; ++_i497)
        {
          var elem498 = null;
          elem498 = input.readString().value;
          this.children.push(elem498);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRING) {
        this.log = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.BOOL) {
        this.pinned = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.I64) {
        this.startTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I64) {
        this.endTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRUCT) {
        this.opFailureInfo = new OpFailureInfoT();
        this.opFailureInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.LIST) {
        var _size499 = 0;
        var _rtmp3503;
        this.hashSlotSkewPerNode = [];
        var _etype502 = 0;
        _rtmp3503 = input.readListBegin();
        _etype502 = _rtmp3503.etype;
        _size499 = _rtmp3503.size;
        for (var _i504 = 0; _i504 < _size499; ++_i504)
        {
          var elem505 = null;
          elem505 = input.readByte().value;
          this.hashSlotSkewPerNode.push(elem505);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagNodeT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagNodeT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRUCT, 1);
    this.name.write(output);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 2);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.dagNodeId !== null && this.dagNodeId !== undefined) {
    output.writeFieldBegin('dagNodeId', Thrift.Type.STRING, 4);
    output.writeString(this.dagNodeId);
    output.writeFieldEnd();
  }
  if (this.api !== null && this.api !== undefined) {
    output.writeFieldBegin('api', Thrift.Type.I32, 5);
    output.writeI32(this.api);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.I32, 6);
    output.writeI32(this.state);
    output.writeFieldEnd();
  }
  if (this.xdbBytesRequired !== null && this.xdbBytesRequired !== undefined) {
    output.writeFieldBegin('xdbBytesRequired', Thrift.Type.I64, 7);
    output.writeI64(this.xdbBytesRequired);
    output.writeFieldEnd();
  }
  if (this.xdbBytesConsumed !== null && this.xdbBytesConsumed !== undefined) {
    output.writeFieldBegin('xdbBytesConsumed', Thrift.Type.I64, 8);
    output.writeI64(this.xdbBytesConsumed);
    output.writeFieldEnd();
  }
  if (this.numTransPageSent !== null && this.numTransPageSent !== undefined) {
    output.writeFieldBegin('numTransPageSent', Thrift.Type.I64, 9);
    output.writeI64(this.numTransPageSent);
    output.writeFieldEnd();
  }
  if (this.numTransPageRecv !== null && this.numTransPageRecv !== undefined) {
    output.writeFieldBegin('numTransPageRecv', Thrift.Type.I64, 10);
    output.writeI64(this.numTransPageRecv);
    output.writeFieldEnd();
  }
  if (this.numWorkCompleted !== null && this.numWorkCompleted !== undefined) {
    output.writeFieldBegin('numWorkCompleted', Thrift.Type.I64, 11);
    output.writeI64(this.numWorkCompleted);
    output.writeFieldEnd();
  }
  if (this.numWorkTotal !== null && this.numWorkTotal !== undefined) {
    output.writeFieldBegin('numWorkTotal', Thrift.Type.I64, 12);
    output.writeI64(this.numWorkTotal);
    output.writeFieldEnd();
  }
  if (this.elapsed !== null && this.elapsed !== undefined) {
    output.writeFieldBegin('elapsed', Thrift.Type.STRUCT, 13);
    this.elapsed.write(output);
    output.writeFieldEnd();
  }
  if (this.inputSize !== null && this.inputSize !== undefined) {
    output.writeFieldBegin('inputSize', Thrift.Type.I64, 14);
    output.writeI64(this.inputSize);
    output.writeFieldEnd();
  }
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.STRUCT, 15);
    this.input.write(output);
    output.writeFieldEnd();
  }
  if (this.numRowsTotal !== null && this.numRowsTotal !== undefined) {
    output.writeFieldBegin('numRowsTotal', Thrift.Type.I64, 16);
    output.writeI64(this.numRowsTotal);
    output.writeFieldEnd();
  }
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I32, 17);
    output.writeI32(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.numRowsPerNode !== null && this.numRowsPerNode !== undefined) {
    output.writeFieldBegin('numRowsPerNode', Thrift.Type.LIST, 18);
    output.writeListBegin(Thrift.Type.I64, this.numRowsPerNode.length);
    for (var iter506 in this.numRowsPerNode)
    {
      if (this.numRowsPerNode.hasOwnProperty(iter506))
      {
        iter506 = this.numRowsPerNode[iter506];
        output.writeI64(iter506);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sizeTotal !== null && this.sizeTotal !== undefined) {
    output.writeFieldBegin('sizeTotal', Thrift.Type.I64, 19);
    output.writeI64(this.sizeTotal);
    output.writeFieldEnd();
  }
  if (this.sizePerNode !== null && this.sizePerNode !== undefined) {
    output.writeFieldBegin('sizePerNode', Thrift.Type.LIST, 20);
    output.writeListBegin(Thrift.Type.I64, this.sizePerNode.length);
    for (var iter507 in this.sizePerNode)
    {
      if (this.sizePerNode.hasOwnProperty(iter507))
      {
        iter507 = this.sizePerNode[iter507];
        output.writeI64(iter507);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numTransPagesReceivedPerNode !== null && this.numTransPagesReceivedPerNode !== undefined) {
    output.writeFieldBegin('numTransPagesReceivedPerNode', Thrift.Type.LIST, 21);
    output.writeListBegin(Thrift.Type.I64, this.numTransPagesReceivedPerNode.length);
    for (var iter508 in this.numTransPagesReceivedPerNode)
    {
      if (this.numTransPagesReceivedPerNode.hasOwnProperty(iter508))
      {
        iter508 = this.numTransPagesReceivedPerNode[iter508];
        output.writeI64(iter508);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numParents !== null && this.numParents !== undefined) {
    output.writeFieldBegin('numParents', Thrift.Type.I64, 22);
    output.writeI64(this.numParents);
    output.writeFieldEnd();
  }
  if (this.parents !== null && this.parents !== undefined) {
    output.writeFieldBegin('parents', Thrift.Type.LIST, 23);
    output.writeListBegin(Thrift.Type.STRING, this.parents.length);
    for (var iter509 in this.parents)
    {
      if (this.parents.hasOwnProperty(iter509))
      {
        iter509 = this.parents[iter509];
        output.writeString(iter509);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numChildren !== null && this.numChildren !== undefined) {
    output.writeFieldBegin('numChildren', Thrift.Type.I64, 24);
    output.writeI64(this.numChildren);
    output.writeFieldEnd();
  }
  if (this.children !== null && this.children !== undefined) {
    output.writeFieldBegin('children', Thrift.Type.LIST, 25);
    output.writeListBegin(Thrift.Type.STRING, this.children.length);
    for (var iter510 in this.children)
    {
      if (this.children.hasOwnProperty(iter510))
      {
        iter510 = this.children[iter510];
        output.writeString(iter510);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.log !== null && this.log !== undefined) {
    output.writeFieldBegin('log', Thrift.Type.STRING, 26);
    output.writeString(this.log);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 27);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.pinned !== null && this.pinned !== undefined) {
    output.writeFieldBegin('pinned', Thrift.Type.BOOL, 28);
    output.writeBool(this.pinned);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.I64, 29);
    output.writeI64(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.I64, 30);
    output.writeI64(this.endTime);
    output.writeFieldEnd();
  }
  if (this.opFailureInfo !== null && this.opFailureInfo !== undefined) {
    output.writeFieldBegin('opFailureInfo', Thrift.Type.STRUCT, 31);
    this.opFailureInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.hashSlotSkewPerNode !== null && this.hashSlotSkewPerNode !== undefined) {
    output.writeFieldBegin('hashSlotSkewPerNode', Thrift.Type.LIST, 32);
    output.writeListBegin(Thrift.Type.BYTE, this.hashSlotSkewPerNode.length);
    for (var iter511 in this.hashSlotSkewPerNode)
    {
      if (this.hashSlotSkewPerNode.hasOwnProperty(iter511))
      {
        iter511 = this.hashSlotSkewPerNode[iter511];
        output.writeByte(iter511);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDagOutputT = function(args) {
  this.numNodes = null;
  this.node = null;
  if (args) {
    if (args.numNodes !== undefined && args.numNodes !== null) {
      this.numNodes = args.numNodes;
    }
    if (args.node !== undefined && args.node !== null) {
      this.node = Thrift.copyList(args.node, [XcalarApiDagNodeT]);
    }
  }
};
XcalarApiDagOutputT.prototype = {};
XcalarApiDagOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size512 = 0;
        var _rtmp3516;
        this.node = [];
        var _etype515 = 0;
        _rtmp3516 = input.readListBegin();
        _etype515 = _rtmp3516.etype;
        _size512 = _rtmp3516.size;
        for (var _i517 = 0; _i517 < _size512; ++_i517)
        {
          var elem518 = null;
          elem518 = new XcalarApiDagNodeT();
          elem518.read(input);
          this.node.push(elem518);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDagOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDagOutputT');
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 1);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.node !== null && this.node !== undefined) {
    output.writeFieldBegin('node', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.node.length);
    for (var iter519 in this.node)
    {
      if (this.node.hasOwnProperty(iter519))
      {
        iter519 = this.node[iter519];
        iter519.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DagRetinaDescT = function(args) {
  this.retinaName = null;
  if (args) {
    if (args.retinaName !== undefined && args.retinaName !== null) {
      this.retinaName = args.retinaName;
    }
  }
};
DagRetinaDescT.prototype = {};
DagRetinaDescT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DagRetinaDescT.prototype.write = function(output) {
  output.writeStructBegin('DagRetinaDescT');
  if (this.retinaName !== null && this.retinaName !== undefined) {
    output.writeFieldBegin('retinaName', Thrift.Type.STRING, 1);
    output.writeString(this.retinaName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiRetinaT = function(args) {
  this.retinaDesc = null;
  this.retinaDag = null;
  if (args) {
    if (args.retinaDesc !== undefined && args.retinaDesc !== null) {
      this.retinaDesc = new DagRetinaDescT(args.retinaDesc);
    }
    if (args.retinaDag !== undefined && args.retinaDag !== null) {
      this.retinaDag = new XcalarApiDagOutputT(args.retinaDag);
    }
  }
};
XcalarApiRetinaT.prototype = {};
XcalarApiRetinaT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.retinaDesc = new DagRetinaDescT();
        this.retinaDesc.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.retinaDag = new XcalarApiDagOutputT();
        this.retinaDag.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiRetinaT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiRetinaT');
  if (this.retinaDesc !== null && this.retinaDesc !== undefined) {
    output.writeFieldBegin('retinaDesc', Thrift.Type.STRUCT, 1);
    this.retinaDesc.write(output);
    output.writeFieldEnd();
  }
  if (this.retinaDag !== null && this.retinaDag !== undefined) {
    output.writeFieldBegin('retinaDag', Thrift.Type.STRUCT, 2);
    this.retinaDag.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiQueryStateOutputT = function(args) {
  this.queryState = null;
  this.queryStatus = null;
  this.query = null;
  this.numQueuedWorkItem = null;
  this.numCompletedWorkItem = null;
  this.numFailedWorkItem = null;
  this.elapsed = null;
  this.queryGraph = null;
  this.queryNodeId = null;
  if (args) {
    if (args.queryState !== undefined && args.queryState !== null) {
      this.queryState = args.queryState;
    }
    if (args.queryStatus !== undefined && args.queryStatus !== null) {
      this.queryStatus = args.queryStatus;
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = args.query;
    }
    if (args.numQueuedWorkItem !== undefined && args.numQueuedWorkItem !== null) {
      this.numQueuedWorkItem = args.numQueuedWorkItem;
    }
    if (args.numCompletedWorkItem !== undefined && args.numCompletedWorkItem !== null) {
      this.numCompletedWorkItem = args.numCompletedWorkItem;
    }
    if (args.numFailedWorkItem !== undefined && args.numFailedWorkItem !== null) {
      this.numFailedWorkItem = args.numFailedWorkItem;
    }
    if (args.elapsed !== undefined && args.elapsed !== null) {
      this.elapsed = new XcalarApiTimeT(args.elapsed);
    }
    if (args.queryGraph !== undefined && args.queryGraph !== null) {
      this.queryGraph = new XcalarApiDagOutputT(args.queryGraph);
    }
    if (args.queryNodeId !== undefined && args.queryNodeId !== null) {
      this.queryNodeId = args.queryNodeId;
    }
  }
};
XcalarApiQueryStateOutputT.prototype = {};
XcalarApiQueryStateOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.queryState = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.queryStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.query = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.numQueuedWorkItem = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.numCompletedWorkItem = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.numFailedWorkItem = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.elapsed = new XcalarApiTimeT();
        this.elapsed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryGraph = new XcalarApiDagOutputT();
        this.queryGraph.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.queryNodeId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiQueryStateOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiQueryStateOutputT');
  if (this.queryState !== null && this.queryState !== undefined) {
    output.writeFieldBegin('queryState', Thrift.Type.I32, 1);
    output.writeI32(this.queryState);
    output.writeFieldEnd();
  }
  if (this.queryStatus !== null && this.queryStatus !== undefined) {
    output.writeFieldBegin('queryStatus', Thrift.Type.I32, 2);
    output.writeI32(this.queryStatus);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRING, 3);
    output.writeString(this.query);
    output.writeFieldEnd();
  }
  if (this.numQueuedWorkItem !== null && this.numQueuedWorkItem !== undefined) {
    output.writeFieldBegin('numQueuedWorkItem', Thrift.Type.I64, 4);
    output.writeI64(this.numQueuedWorkItem);
    output.writeFieldEnd();
  }
  if (this.numCompletedWorkItem !== null && this.numCompletedWorkItem !== undefined) {
    output.writeFieldBegin('numCompletedWorkItem', Thrift.Type.I64, 5);
    output.writeI64(this.numCompletedWorkItem);
    output.writeFieldEnd();
  }
  if (this.numFailedWorkItem !== null && this.numFailedWorkItem !== undefined) {
    output.writeFieldBegin('numFailedWorkItem', Thrift.Type.I64, 6);
    output.writeI64(this.numFailedWorkItem);
    output.writeFieldEnd();
  }
  if (this.elapsed !== null && this.elapsed !== undefined) {
    output.writeFieldBegin('elapsed', Thrift.Type.STRUCT, 7);
    this.elapsed.write(output);
    output.writeFieldEnd();
  }
  if (this.queryGraph !== null && this.queryGraph !== undefined) {
    output.writeFieldBegin('queryGraph', Thrift.Type.STRUCT, 8);
    this.queryGraph.write(output);
    output.writeFieldEnd();
  }
  if (this.queryNodeId !== null && this.queryNodeId !== undefined) {
    output.writeFieldBegin('queryNodeId', Thrift.Type.I32, 9);
    output.writeI32(this.queryNodeId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListRetinasOutputT = function(args) {
  this.numRetinas = null;
  this.retinaDescs = null;
  if (args) {
    if (args.numRetinas !== undefined && args.numRetinas !== null) {
      this.numRetinas = args.numRetinas;
    }
    if (args.retinaDescs !== undefined && args.retinaDescs !== null) {
      this.retinaDescs = Thrift.copyList(args.retinaDescs, [DagRetinaDescT]);
    }
  }
};
XcalarApiListRetinasOutputT.prototype = {};
XcalarApiListRetinasOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numRetinas = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size520 = 0;
        var _rtmp3524;
        this.retinaDescs = [];
        var _etype523 = 0;
        _rtmp3524 = input.readListBegin();
        _etype523 = _rtmp3524.etype;
        _size520 = _rtmp3524.size;
        for (var _i525 = 0; _i525 < _size520; ++_i525)
        {
          var elem526 = null;
          elem526 = new DagRetinaDescT();
          elem526.read(input);
          this.retinaDescs.push(elem526);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListRetinasOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListRetinasOutputT');
  if (this.numRetinas !== null && this.numRetinas !== undefined) {
    output.writeFieldBegin('numRetinas', Thrift.Type.I64, 1);
    output.writeI64(this.numRetinas);
    output.writeFieldEnd();
  }
  if (this.retinaDescs !== null && this.retinaDescs !== undefined) {
    output.writeFieldBegin('retinaDescs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.retinaDescs.length);
    for (var iter527 in this.retinaDescs)
    {
      if (this.retinaDescs.hasOwnProperty(iter527))
      {
        iter527 = this.retinaDescs[iter527];
        iter527.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetRetinaOutputT = function(args) {
  this.retina = null;
  if (args) {
    if (args.retina !== undefined && args.retina !== null) {
      this.retina = new XcalarApiRetinaT(args.retina);
    }
  }
};
XcalarApiGetRetinaOutputT.prototype = {};
XcalarApiGetRetinaOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.retina = new XcalarApiRetinaT();
        this.retina.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetRetinaOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetRetinaOutputT');
  if (this.retina !== null && this.retina !== undefined) {
    output.writeFieldBegin('retina', Thrift.Type.STRUCT, 1);
    this.retina.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetRetinaJsonOutputT = function(args) {
  this.retinaJson = null;
  if (args) {
    if (args.retinaJson !== undefined && args.retinaJson !== null) {
      this.retinaJson = args.retinaJson;
    }
  }
};
XcalarApiGetRetinaJsonOutputT.prototype = {};
XcalarApiGetRetinaJsonOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.retinaJson = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetRetinaJsonOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetRetinaJsonOutputT');
  if (this.retinaJson !== null && this.retinaJson !== undefined) {
    output.writeFieldBegin('retinaJson', Thrift.Type.STRING, 1);
    output.writeString(this.retinaJson);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionT = function(args) {
  this.name = null;
  this.state = null;
  this.info = null;
  this.activeNode = null;
  this.sessionId = null;
  this.description = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.info !== undefined && args.info !== null) {
      this.info = args.info;
    }
    if (args.activeNode !== undefined && args.activeNode !== null) {
      this.activeNode = args.activeNode;
    }
    if (args.sessionId !== undefined && args.sessionId !== null) {
      this.sessionId = args.sessionId;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
XcalarApiSessionT.prototype = {};
XcalarApiSessionT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.info = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.activeNode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.sessionId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 2);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRING, 3);
    output.writeString(this.info);
    output.writeFieldEnd();
  }
  if (this.activeNode !== null && this.activeNode !== undefined) {
    output.writeFieldBegin('activeNode', Thrift.Type.I32, 4);
    output.writeI32(this.activeNode);
    output.writeFieldEnd();
  }
  if (this.sessionId !== null && this.sessionId !== undefined) {
    output.writeFieldBegin('sessionId', Thrift.Type.STRING, 5);
    output.writeString(this.sessionId);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 6);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionListOutputT = function(args) {
  this.numSessions = null;
  this.sessions = null;
  this.sessionGenericOutput = null;
  if (args) {
    if (args.numSessions !== undefined && args.numSessions !== null) {
      this.numSessions = args.numSessions;
    }
    if (args.sessions !== undefined && args.sessions !== null) {
      this.sessions = Thrift.copyList(args.sessions, [XcalarApiSessionT]);
    }
    if (args.sessionGenericOutput !== undefined && args.sessionGenericOutput !== null) {
      this.sessionGenericOutput = new XcalarApiSessionGenericOutputT(args.sessionGenericOutput);
    }
  }
};
XcalarApiSessionListOutputT.prototype = {};
XcalarApiSessionListOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numSessions = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size528 = 0;
        var _rtmp3532;
        this.sessions = [];
        var _etype531 = 0;
        _rtmp3532 = input.readListBegin();
        _etype531 = _rtmp3532.etype;
        _size528 = _rtmp3532.size;
        for (var _i533 = 0; _i533 < _size528; ++_i533)
        {
          var elem534 = null;
          elem534 = new XcalarApiSessionT();
          elem534.read(input);
          this.sessions.push(elem534);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionGenericOutput = new XcalarApiSessionGenericOutputT();
        this.sessionGenericOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionListOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionListOutputT');
  if (this.numSessions !== null && this.numSessions !== undefined) {
    output.writeFieldBegin('numSessions', Thrift.Type.I64, 1);
    output.writeI64(this.numSessions);
    output.writeFieldEnd();
  }
  if (this.sessions !== null && this.sessions !== undefined) {
    output.writeFieldBegin('sessions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.sessions.length);
    for (var iter535 in this.sessions)
    {
      if (this.sessions.hasOwnProperty(iter535))
      {
        iter535 = this.sessions[iter535];
        iter535.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sessionGenericOutput !== null && this.sessionGenericOutput !== undefined) {
    output.writeFieldBegin('sessionGenericOutput', Thrift.Type.STRUCT, 3);
    this.sessionGenericOutput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiImportRetinaOutputT = function(args) {
  this.numUdfModules = null;
  this.udfModuleStatuses = null;
  if (args) {
    if (args.numUdfModules !== undefined && args.numUdfModules !== null) {
      this.numUdfModules = args.numUdfModules;
    }
    if (args.udfModuleStatuses !== undefined && args.udfModuleStatuses !== null) {
      this.udfModuleStatuses = Thrift.copyList(args.udfModuleStatuses, [XcalarApiUdfAddUpdateOutputT]);
    }
  }
};
XcalarApiImportRetinaOutputT.prototype = {};
XcalarApiImportRetinaOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numUdfModules = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size536 = 0;
        var _rtmp3540;
        this.udfModuleStatuses = [];
        var _etype539 = 0;
        _rtmp3540 = input.readListBegin();
        _etype539 = _rtmp3540.etype;
        _size536 = _rtmp3540.size;
        for (var _i541 = 0; _i541 < _size536; ++_i541)
        {
          var elem542 = null;
          elem542 = new XcalarApiUdfAddUpdateOutputT();
          elem542.read(input);
          this.udfModuleStatuses.push(elem542);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiImportRetinaOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiImportRetinaOutputT');
  if (this.numUdfModules !== null && this.numUdfModules !== undefined) {
    output.writeFieldBegin('numUdfModules', Thrift.Type.I64, 1);
    output.writeI64(this.numUdfModules);
    output.writeFieldEnd();
  }
  if (this.udfModuleStatuses !== null && this.udfModuleStatuses !== undefined) {
    output.writeFieldBegin('udfModuleStatuses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.udfModuleStatuses.length);
    for (var iter543 in this.udfModuleStatuses)
    {
      if (this.udfModuleStatuses.hasOwnProperty(iter543))
      {
        iter543 = this.udfModuleStatuses[iter543];
        iter543.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiExportRetinaOutputT = function(args) {
  this.retinaCount = null;
  this.retina = null;
  if (args) {
    if (args.retinaCount !== undefined && args.retinaCount !== null) {
      this.retinaCount = args.retinaCount;
    }
    if (args.retina !== undefined && args.retina !== null) {
      this.retina = args.retina;
    }
  }
};
XcalarApiExportRetinaOutputT.prototype = {};
XcalarApiExportRetinaOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.retinaCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.retina = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiExportRetinaOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiExportRetinaOutputT');
  if (this.retinaCount !== null && this.retinaCount !== undefined) {
    output.writeFieldBegin('retinaCount', Thrift.Type.I64, 1);
    output.writeI64(this.retinaCount);
    output.writeFieldEnd();
  }
  if (this.retina !== null && this.retina !== undefined) {
    output.writeFieldBegin('retina', Thrift.Type.STRING, 2);
    output.writeString(this.retina);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiFuncTestOutputT = function(args) {
  this.testName = null;
  this.status = null;
  if (args) {
    if (args.testName !== undefined && args.testName !== null) {
      this.testName = args.testName;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
XcalarApiFuncTestOutputT.prototype = {};
XcalarApiFuncTestOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.testName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiFuncTestOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiFuncTestOutputT');
  if (this.testName !== null && this.testName !== undefined) {
    output.writeFieldBegin('testName', Thrift.Type.STRING, 1);
    output.writeString(this.testName);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 2);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiStartFuncTestOutputT = function(args) {
  this.numTests = null;
  this.testOutputs = null;
  if (args) {
    if (args.numTests !== undefined && args.numTests !== null) {
      this.numTests = args.numTests;
    }
    if (args.testOutputs !== undefined && args.testOutputs !== null) {
      this.testOutputs = Thrift.copyList(args.testOutputs, [XcalarApiFuncTestOutputT]);
    }
  }
};
XcalarApiStartFuncTestOutputT.prototype = {};
XcalarApiStartFuncTestOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numTests = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size544 = 0;
        var _rtmp3548;
        this.testOutputs = [];
        var _etype547 = 0;
        _rtmp3548 = input.readListBegin();
        _etype547 = _rtmp3548.etype;
        _size544 = _rtmp3548.size;
        for (var _i549 = 0; _i549 < _size544; ++_i549)
        {
          var elem550 = null;
          elem550 = new XcalarApiFuncTestOutputT();
          elem550.read(input);
          this.testOutputs.push(elem550);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiStartFuncTestOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiStartFuncTestOutputT');
  if (this.numTests !== null && this.numTests !== undefined) {
    output.writeFieldBegin('numTests', Thrift.Type.I32, 1);
    output.writeI32(this.numTests);
    output.writeFieldEnd();
  }
  if (this.testOutputs !== null && this.testOutputs !== undefined) {
    output.writeFieldBegin('testOutputs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.testOutputs.length);
    for (var iter551 in this.testOutputs)
    {
      if (this.testOutputs.hasOwnProperty(iter551))
      {
        iter551 = this.testOutputs[iter551];
        iter551.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListFuncTestOutputT = function(args) {
  this.numTests = null;
  this.testNames = null;
  if (args) {
    if (args.numTests !== undefined && args.numTests !== null) {
      this.numTests = args.numTests;
    }
    if (args.testNames !== undefined && args.testNames !== null) {
      this.testNames = Thrift.copyList(args.testNames, [null]);
    }
  }
};
XcalarApiListFuncTestOutputT.prototype = {};
XcalarApiListFuncTestOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numTests = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size552 = 0;
        var _rtmp3556;
        this.testNames = [];
        var _etype555 = 0;
        _rtmp3556 = input.readListBegin();
        _etype555 = _rtmp3556.etype;
        _size552 = _rtmp3556.size;
        for (var _i557 = 0; _i557 < _size552; ++_i557)
        {
          var elem558 = null;
          elem558 = input.readString().value;
          this.testNames.push(elem558);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListFuncTestOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListFuncTestOutputT');
  if (this.numTests !== null && this.numTests !== undefined) {
    output.writeFieldBegin('numTests', Thrift.Type.I32, 1);
    output.writeI32(this.numTests);
    output.writeFieldEnd();
  }
  if (this.testNames !== null && this.testNames !== undefined) {
    output.writeFieldBegin('testNames', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.testNames.length);
    for (var iter559 in this.testNames)
    {
      if (this.testNames.hasOwnProperty(iter559))
      {
        iter559 = this.testNames[iter559];
        output.writeString(iter559);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetMemoryUsageT = function(args) {
  this.datasetName = null;
  this.datsetId = null;
  this.totalBytes = null;
  this.numNodes = null;
  this.bytesPerNode = null;
  if (args) {
    if (args.datasetName !== undefined && args.datasetName !== null) {
      this.datasetName = args.datasetName;
    }
    if (args.datsetId !== undefined && args.datsetId !== null) {
      this.datsetId = args.datsetId;
    }
    if (args.totalBytes !== undefined && args.totalBytes !== null) {
      this.totalBytes = args.totalBytes;
    }
    if (args.numNodes !== undefined && args.numNodes !== null) {
      this.numNodes = args.numNodes;
    }
    if (args.bytesPerNode !== undefined && args.bytesPerNode !== null) {
      this.bytesPerNode = Thrift.copyList(args.bytesPerNode, [null]);
    }
  }
};
XcalarApiDatasetMemoryUsageT.prototype = {};
XcalarApiDatasetMemoryUsageT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.datasetName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.datsetId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.totalBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.numNodes = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size560 = 0;
        var _rtmp3564;
        this.bytesPerNode = [];
        var _etype563 = 0;
        _rtmp3564 = input.readListBegin();
        _etype563 = _rtmp3564.etype;
        _size560 = _rtmp3564.size;
        for (var _i565 = 0; _i565 < _size560; ++_i565)
        {
          var elem566 = null;
          elem566 = input.readI64().value;
          this.bytesPerNode.push(elem566);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDatasetMemoryUsageT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDatasetMemoryUsageT');
  if (this.datasetName !== null && this.datasetName !== undefined) {
    output.writeFieldBegin('datasetName', Thrift.Type.STRING, 1);
    output.writeString(this.datasetName);
    output.writeFieldEnd();
  }
  if (this.datsetId !== null && this.datsetId !== undefined) {
    output.writeFieldBegin('datsetId', Thrift.Type.STRING, 2);
    output.writeString(this.datsetId);
    output.writeFieldEnd();
  }
  if (this.totalBytes !== null && this.totalBytes !== undefined) {
    output.writeFieldBegin('totalBytes', Thrift.Type.I64, 3);
    output.writeI64(this.totalBytes);
    output.writeFieldEnd();
  }
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I32, 4);
    output.writeI32(this.numNodes);
    output.writeFieldEnd();
  }
  if (this.bytesPerNode !== null && this.bytesPerNode !== undefined) {
    output.writeFieldBegin('bytesPerNode', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.bytesPerNode.length);
    for (var iter567 in this.bytesPerNode)
    {
      if (this.bytesPerNode.hasOwnProperty(iter567))
      {
        iter567 = this.bytesPerNode[iter567];
        output.writeI64(iter567);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTableMemoryUsageT = function(args) {
  this.tableName = null;
  this.tableId = null;
  this.totalBytes = null;
  if (args) {
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.tableId !== undefined && args.tableId !== null) {
      this.tableId = args.tableId;
    }
    if (args.totalBytes !== undefined && args.totalBytes !== null) {
      this.totalBytes = args.totalBytes;
    }
  }
};
XcalarApiTableMemoryUsageT.prototype = {};
XcalarApiTableMemoryUsageT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.totalBytes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTableMemoryUsageT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTableMemoryUsageT');
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 1);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.tableId !== null && this.tableId !== undefined) {
    output.writeFieldBegin('tableId', Thrift.Type.STRING, 2);
    output.writeString(this.tableId);
    output.writeFieldEnd();
  }
  if (this.totalBytes !== null && this.totalBytes !== undefined) {
    output.writeFieldBegin('totalBytes', Thrift.Type.I64, 3);
    output.writeI64(this.totalBytes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiSessionMemoryUsageT = function(args) {
  this.sessionName = null;
  this.numTables = null;
  this.tableMemory = null;
  if (args) {
    if (args.sessionName !== undefined && args.sessionName !== null) {
      this.sessionName = args.sessionName;
    }
    if (args.numTables !== undefined && args.numTables !== null) {
      this.numTables = args.numTables;
    }
    if (args.tableMemory !== undefined && args.tableMemory !== null) {
      this.tableMemory = Thrift.copyList(args.tableMemory, [XcalarApiTableMemoryUsageT]);
    }
  }
};
XcalarApiSessionMemoryUsageT.prototype = {};
XcalarApiSessionMemoryUsageT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.numTables = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size568 = 0;
        var _rtmp3572;
        this.tableMemory = [];
        var _etype571 = 0;
        _rtmp3572 = input.readListBegin();
        _etype571 = _rtmp3572.etype;
        _size568 = _rtmp3572.size;
        for (var _i573 = 0; _i573 < _size568; ++_i573)
        {
          var elem574 = null;
          elem574 = new XcalarApiTableMemoryUsageT();
          elem574.read(input);
          this.tableMemory.push(elem574);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiSessionMemoryUsageT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiSessionMemoryUsageT');
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 1);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  if (this.numTables !== null && this.numTables !== undefined) {
    output.writeFieldBegin('numTables', Thrift.Type.I32, 2);
    output.writeI32(this.numTables);
    output.writeFieldEnd();
  }
  if (this.tableMemory !== null && this.tableMemory !== undefined) {
    output.writeFieldBegin('tableMemory', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.tableMemory.length);
    for (var iter575 in this.tableMemory)
    {
      if (this.tableMemory.hasOwnProperty(iter575))
      {
        iter575 = this.tableMemory[iter575];
        iter575.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUserMemoryUsageT = function(args) {
  this.userName = null;
  this.userId = null;
  this.numSessions = null;
  this.sessionMemory = null;
  if (args) {
    if (args.userName !== undefined && args.userName !== null) {
      this.userName = args.userName;
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.numSessions !== undefined && args.numSessions !== null) {
      this.numSessions = args.numSessions;
    }
    if (args.sessionMemory !== undefined && args.sessionMemory !== null) {
      this.sessionMemory = Thrift.copyList(args.sessionMemory, [XcalarApiSessionMemoryUsageT]);
    }
  }
};
XcalarApiUserMemoryUsageT.prototype = {};
XcalarApiUserMemoryUsageT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.userName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numSessions = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size576 = 0;
        var _rtmp3580;
        this.sessionMemory = [];
        var _etype579 = 0;
        _rtmp3580 = input.readListBegin();
        _etype579 = _rtmp3580.etype;
        _size576 = _rtmp3580.size;
        for (var _i581 = 0; _i581 < _size576; ++_i581)
        {
          var elem582 = null;
          elem582 = new XcalarApiSessionMemoryUsageT();
          elem582.read(input);
          this.sessionMemory.push(elem582);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUserMemoryUsageT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUserMemoryUsageT');
  if (this.userName !== null && this.userName !== undefined) {
    output.writeFieldBegin('userName', Thrift.Type.STRING, 1);
    output.writeString(this.userName);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 2);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.numSessions !== null && this.numSessions !== undefined) {
    output.writeFieldBegin('numSessions', Thrift.Type.I32, 3);
    output.writeI32(this.numSessions);
    output.writeFieldEnd();
  }
  if (this.sessionMemory !== null && this.sessionMemory !== undefined) {
    output.writeFieldBegin('sessionMemory', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.sessionMemory.length);
    for (var iter583 in this.sessionMemory)
    {
      if (this.sessionMemory.hasOwnProperty(iter583))
      {
        iter583 = this.sessionMemory[iter583];
        iter583.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XemClientConfigParamsT = function(args) {
  this.enableStatsShipment = null;
  this.isMultipleNodesPerHost = null;
  this.xemHostPortNumber = null;
  this.statsPushHeartBeat = null;
  this.xemHostAddress = null;
  this.clusterName = null;
  if (args) {
    if (args.enableStatsShipment !== undefined && args.enableStatsShipment !== null) {
      this.enableStatsShipment = args.enableStatsShipment;
    }
    if (args.isMultipleNodesPerHost !== undefined && args.isMultipleNodesPerHost !== null) {
      this.isMultipleNodesPerHost = args.isMultipleNodesPerHost;
    }
    if (args.xemHostPortNumber !== undefined && args.xemHostPortNumber !== null) {
      this.xemHostPortNumber = args.xemHostPortNumber;
    }
    if (args.statsPushHeartBeat !== undefined && args.statsPushHeartBeat !== null) {
      this.statsPushHeartBeat = args.statsPushHeartBeat;
    }
    if (args.xemHostAddress !== undefined && args.xemHostAddress !== null) {
      this.xemHostAddress = args.xemHostAddress;
    }
    if (args.clusterName !== undefined && args.clusterName !== null) {
      this.clusterName = args.clusterName;
    }
  }
};
XemClientConfigParamsT.prototype = {};
XemClientConfigParamsT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.enableStatsShipment = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isMultipleNodesPerHost = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.xemHostPortNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.statsPushHeartBeat = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.xemHostAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.clusterName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XemClientConfigParamsT.prototype.write = function(output) {
  output.writeStructBegin('XemClientConfigParamsT');
  if (this.enableStatsShipment !== null && this.enableStatsShipment !== undefined) {
    output.writeFieldBegin('enableStatsShipment', Thrift.Type.BOOL, 1);
    output.writeBool(this.enableStatsShipment);
    output.writeFieldEnd();
  }
  if (this.isMultipleNodesPerHost !== null && this.isMultipleNodesPerHost !== undefined) {
    output.writeFieldBegin('isMultipleNodesPerHost', Thrift.Type.BOOL, 2);
    output.writeBool(this.isMultipleNodesPerHost);
    output.writeFieldEnd();
  }
  if (this.xemHostPortNumber !== null && this.xemHostPortNumber !== undefined) {
    output.writeFieldBegin('xemHostPortNumber', Thrift.Type.I64, 3);
    output.writeI64(this.xemHostPortNumber);
    output.writeFieldEnd();
  }
  if (this.statsPushHeartBeat !== null && this.statsPushHeartBeat !== undefined) {
    output.writeFieldBegin('statsPushHeartBeat', Thrift.Type.I64, 4);
    output.writeI64(this.statsPushHeartBeat);
    output.writeFieldEnd();
  }
  if (this.xemHostAddress !== null && this.xemHostAddress !== undefined) {
    output.writeFieldBegin('xemHostAddress', Thrift.Type.STRING, 5);
    output.writeString(this.xemHostAddress);
    output.writeFieldEnd();
  }
  if (this.clusterName !== null && this.clusterName !== undefined) {
    output.writeFieldBegin('clusterName', Thrift.Type.STRING, 6);
    output.writeString(this.clusterName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiRuntimeGetParamOutputT = function(args) {
  this.schedParams = null;
  if (args) {
    if (args.schedParams !== undefined && args.schedParams !== null) {
      this.schedParams = Thrift.copyList(args.schedParams, [XcalarApiSchedParamT]);
    }
  }
};
XcalarApiRuntimeGetParamOutputT.prototype = {};
XcalarApiRuntimeGetParamOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size584 = 0;
        var _rtmp3588;
        this.schedParams = [];
        var _etype587 = 0;
        _rtmp3588 = input.readListBegin();
        _etype587 = _rtmp3588.etype;
        _size584 = _rtmp3588.size;
        for (var _i589 = 0; _i589 < _size584; ++_i589)
        {
          var elem590 = null;
          elem590 = new XcalarApiSchedParamT();
          elem590.read(input);
          this.schedParams.push(elem590);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiRuntimeGetParamOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiRuntimeGetParamOutputT');
  if (this.schedParams !== null && this.schedParams !== undefined) {
    output.writeFieldBegin('schedParams', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.schedParams.length);
    for (var iter591 in this.schedParams)
    {
      if (this.schedParams.hasOwnProperty(iter591))
      {
        iter591 = this.schedParams[iter591];
        iter591.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetMemoryUsageOutputT = function(args) {
  this.userMemory = null;
  if (args) {
    if (args.userMemory !== undefined && args.userMemory !== null) {
      this.userMemory = new XcalarApiUserMemoryUsageT(args.userMemory);
    }
  }
};
XcalarApiGetMemoryUsageOutputT.prototype = {};
XcalarApiGetMemoryUsageOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userMemory = new XcalarApiUserMemoryUsageT();
        this.userMemory.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetMemoryUsageOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetMemoryUsageOutputT');
  if (this.userMemory !== null && this.userMemory !== undefined) {
    output.writeFieldBegin('userMemory', Thrift.Type.STRUCT, 1);
    this.userMemory.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetIpAddrOutputT = function(args) {
  this.ipAddr = null;
  if (args) {
    if (args.ipAddr !== undefined && args.ipAddr !== null) {
      this.ipAddr = args.ipAddr;
    }
  }
};
XcalarApiGetIpAddrOutputT.prototype = {};
XcalarApiGetIpAddrOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ipAddr = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetIpAddrOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetIpAddrOutputT');
  if (this.ipAddr !== null && this.ipAddr !== undefined) {
    output.writeFieldBegin('ipAddr', Thrift.Type.STRING, 1);
    output.writeString(this.ipAddr);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiGetNumNodesOutputT = function(args) {
  this.numNodes = null;
  if (args) {
    if (args.numNodes !== undefined && args.numNodes !== null) {
      this.numNodes = args.numNodes;
    }
  }
};
XcalarApiGetNumNodesOutputT.prototype = {};
XcalarApiGetNumNodesOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numNodes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiGetNumNodesOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiGetNumNodesOutputT');
  if (this.numNodes !== null && this.numNodes !== undefined) {
    output.writeFieldBegin('numNodes', Thrift.Type.I64, 1);
    output.writeI64(this.numNodes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetUserT = function(args) {
  this.userId = null;
  this.referenceCount = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = new XcalarApiUserIdT(args.userId);
    }
    if (args.referenceCount !== undefined && args.referenceCount !== null) {
      this.referenceCount = args.referenceCount;
    }
  }
};
XcalarApiDatasetUserT.prototype = {};
XcalarApiDatasetUserT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userId = new XcalarApiUserIdT();
        this.userId.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.referenceCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDatasetUserT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDatasetUserT');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRUCT, 1);
    this.userId.write(output);
    output.writeFieldEnd();
  }
  if (this.referenceCount !== null && this.referenceCount !== undefined) {
    output.writeFieldBegin('referenceCount', Thrift.Type.I64, 2);
    output.writeI64(this.referenceCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListDatasetUsersOutputT = function(args) {
  this.usersCount = null;
  this.user = null;
  if (args) {
    if (args.usersCount !== undefined && args.usersCount !== null) {
      this.usersCount = args.usersCount;
    }
    if (args.user !== undefined && args.user !== null) {
      this.user = Thrift.copyList(args.user, [XcalarApiDatasetUserT]);
    }
  }
};
XcalarApiListDatasetUsersOutputT.prototype = {};
XcalarApiListDatasetUsersOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.usersCount = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size592 = 0;
        var _rtmp3596;
        this.user = [];
        var _etype595 = 0;
        _rtmp3596 = input.readListBegin();
        _etype595 = _rtmp3596.etype;
        _size592 = _rtmp3596.size;
        for (var _i597 = 0; _i597 < _size592; ++_i597)
        {
          var elem598 = null;
          elem598 = new XcalarApiDatasetUserT();
          elem598.read(input);
          this.user.push(elem598);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListDatasetUsersOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListDatasetUsersOutputT');
  if (this.usersCount !== null && this.usersCount !== undefined) {
    output.writeFieldBegin('usersCount', Thrift.Type.I64, 1);
    output.writeI64(this.usersCount);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.user.length);
    for (var iter599 in this.user)
    {
      if (this.user.hasOwnProperty(iter599))
      {
        iter599 = this.user[iter599];
        iter599.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUserDatasetT = function(args) {
  this.datasetName = null;
  this.isLocked = null;
  if (args) {
    if (args.datasetName !== undefined && args.datasetName !== null) {
      this.datasetName = args.datasetName;
    }
    if (args.isLocked !== undefined && args.isLocked !== null) {
      this.isLocked = args.isLocked;
    }
  }
};
XcalarApiUserDatasetT.prototype = {};
XcalarApiUserDatasetT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.datasetName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isLocked = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUserDatasetT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUserDatasetT');
  if (this.datasetName !== null && this.datasetName !== undefined) {
    output.writeFieldBegin('datasetName', Thrift.Type.STRING, 1);
    output.writeString(this.datasetName);
    output.writeFieldEnd();
  }
  if (this.isLocked !== null && this.isLocked !== undefined) {
    output.writeFieldBegin('isLocked', Thrift.Type.BOOL, 2);
    output.writeBool(this.isLocked);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListUserDatasetsOutputT = function(args) {
  this.numDatasets = null;
  this.datasets = null;
  if (args) {
    if (args.numDatasets !== undefined && args.numDatasets !== null) {
      this.numDatasets = args.numDatasets;
    }
    if (args.datasets !== undefined && args.datasets !== null) {
      this.datasets = Thrift.copyList(args.datasets, [XcalarApiUserDatasetT]);
    }
  }
};
XcalarApiListUserDatasetsOutputT.prototype = {};
XcalarApiListUserDatasetsOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numDatasets = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size600 = 0;
        var _rtmp3604;
        this.datasets = [];
        var _etype603 = 0;
        _rtmp3604 = input.readListBegin();
        _etype603 = _rtmp3604.etype;
        _size600 = _rtmp3604.size;
        for (var _i605 = 0; _i605 < _size600; ++_i605)
        {
          var elem606 = null;
          elem606 = new XcalarApiUserDatasetT();
          elem606.read(input);
          this.datasets.push(elem606);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListUserDatasetsOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListUserDatasetsOutputT');
  if (this.numDatasets !== null && this.numDatasets !== undefined) {
    output.writeFieldBegin('numDatasets', Thrift.Type.I64, 1);
    output.writeI64(this.numDatasets);
    output.writeFieldEnd();
  }
  if (this.datasets !== null && this.datasets !== undefined) {
    output.writeFieldBegin('datasets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.datasets.length);
    for (var iter607 in this.datasets)
    {
      if (this.datasets.hasOwnProperty(iter607))
      {
        iter607 = this.datasets[iter607];
        iter607.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiDatasetGetMetaOutputT = function(args) {
  this.datasetMeta = null;
  if (args) {
    if (args.datasetMeta !== undefined && args.datasetMeta !== null) {
      this.datasetMeta = args.datasetMeta;
    }
  }
};
XcalarApiDatasetGetMetaOutputT.prototype = {};
XcalarApiDatasetGetMetaOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.datasetMeta = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiDatasetGetMetaOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiDatasetGetMetaOutputT');
  if (this.datasetMeta !== null && this.datasetMeta !== undefined) {
    output.writeFieldBegin('datasetMeta', Thrift.Type.STRING, 1);
    output.writeString(this.datasetMeta);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiLogLevelGetOutputT = function(args) {
  this.logLevel = null;
  this.logFlushPeriod = null;
  if (args) {
    if (args.logLevel !== undefined && args.logLevel !== null) {
      this.logLevel = args.logLevel;
    }
    if (args.logFlushPeriod !== undefined && args.logFlushPeriod !== null) {
      this.logFlushPeriod = args.logFlushPeriod;
    }
  }
};
XcalarApiLogLevelGetOutputT.prototype = {};
XcalarApiLogLevelGetOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.logLevel = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.logFlushPeriod = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiLogLevelGetOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiLogLevelGetOutputT');
  if (this.logLevel !== null && this.logLevel !== undefined) {
    output.writeFieldBegin('logLevel', Thrift.Type.I32, 1);
    output.writeI32(this.logLevel);
    output.writeFieldEnd();
  }
  if (this.logFlushPeriod !== null && this.logFlushPeriod !== undefined) {
    output.writeFieldBegin('logFlushPeriod', Thrift.Type.I32, 2);
    output.writeI32(this.logFlushPeriod);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUpdateInfoT = function(args) {
  this.source = null;
  this.startTS = null;
  this.batchId = null;
  this.size = null;
  this.numRows = null;
  this.numInserts = null;
  this.numUpdates = null;
  this.numDeletes = null;
  if (args) {
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.startTS !== undefined && args.startTS !== null) {
      this.startTS = args.startTS;
    }
    if (args.batchId !== undefined && args.batchId !== null) {
      this.batchId = args.batchId;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    }
    if (args.numInserts !== undefined && args.numInserts !== null) {
      this.numInserts = args.numInserts;
    }
    if (args.numUpdates !== undefined && args.numUpdates !== null) {
      this.numUpdates = args.numUpdates;
    }
    if (args.numDeletes !== undefined && args.numDeletes !== null) {
      this.numDeletes = args.numDeletes;
    }
  }
};
XcalarApiUpdateInfoT.prototype = {};
XcalarApiUpdateInfoT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.startTS = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.batchId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.numRows = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.numInserts = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.numUpdates = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.numDeletes = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUpdateInfoT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUpdateInfoT');
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 1);
    output.writeString(this.source);
    output.writeFieldEnd();
  }
  if (this.startTS !== null && this.startTS !== undefined) {
    output.writeFieldBegin('startTS', Thrift.Type.I64, 2);
    output.writeI64(this.startTS);
    output.writeFieldEnd();
  }
  if (this.batchId !== null && this.batchId !== undefined) {
    output.writeFieldBegin('batchId', Thrift.Type.I64, 3);
    output.writeI64(this.batchId);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 4);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I64, 5);
    output.writeI64(this.numRows);
    output.writeFieldEnd();
  }
  if (this.numInserts !== null && this.numInserts !== undefined) {
    output.writeFieldBegin('numInserts', Thrift.Type.I64, 6);
    output.writeI64(this.numInserts);
    output.writeFieldEnd();
  }
  if (this.numUpdates !== null && this.numUpdates !== undefined) {
    output.writeFieldBegin('numUpdates', Thrift.Type.I64, 7);
    output.writeI64(this.numUpdates);
    output.writeFieldEnd();
  }
  if (this.numDeletes !== null && this.numDeletes !== undefined) {
    output.writeFieldBegin('numDeletes', Thrift.Type.I64, 8);
    output.writeI64(this.numDeletes);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiIndexInfoT = function(args) {
  this.key = null;
  this.sizeEstimate = null;
  this.uptime = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = new XcalarApiColumnInfoT(args.key);
    }
    if (args.sizeEstimate !== undefined && args.sizeEstimate !== null) {
      this.sizeEstimate = args.sizeEstimate;
    }
    if (args.uptime !== undefined && args.uptime !== null) {
      this.uptime = new XcalarApiTimeT(args.uptime);
    }
  }
};
XcalarApiIndexInfoT.prototype = {};
XcalarApiIndexInfoT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new XcalarApiColumnInfoT();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.sizeEstimate = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.uptime = new XcalarApiTimeT();
        this.uptime.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiIndexInfoT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiIndexInfoT');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 1);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.sizeEstimate !== null && this.sizeEstimate !== undefined) {
    output.writeFieldBegin('sizeEstimate', Thrift.Type.I64, 2);
    output.writeI64(this.sizeEstimate);
    output.writeFieldEnd();
  }
  if (this.uptime !== null && this.uptime !== undefined) {
    output.writeFieldBegin('uptime', Thrift.Type.STRUCT, 3);
    this.uptime.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiTableInfoT = function(args) {
  this.name = null;
  this.numPersistedUpdates = null;
  this.source = null;
  this.updates = null;
  this.selects = null;
  this.oldestBatchId = null;
  this.nextBatchId = null;
  this.keys = null;
  this.values = null;
  this.active = null;
  this.sizeTotal = null;
  this.numRowsTotal = null;
  this.restoring = null;
  this.userIdName = null;
  this.sessionName = null;
  this.indices = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.numPersistedUpdates !== undefined && args.numPersistedUpdates !== null) {
      this.numPersistedUpdates = args.numPersistedUpdates;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = new XcalarApiPublishInputT(args.source);
    }
    if (args.updates !== undefined && args.updates !== null) {
      this.updates = Thrift.copyList(args.updates, [XcalarApiUpdateInfoT]);
    }
    if (args.selects !== undefined && args.selects !== null) {
      this.selects = Thrift.copyList(args.selects, [XcalarApiSelectInputT]);
    }
    if (args.oldestBatchId !== undefined && args.oldestBatchId !== null) {
      this.oldestBatchId = args.oldestBatchId;
    }
    if (args.nextBatchId !== undefined && args.nextBatchId !== null) {
      this.nextBatchId = args.nextBatchId;
    }
    if (args.keys !== undefined && args.keys !== null) {
      this.keys = Thrift.copyList(args.keys, [XcalarApiColumnInfoT]);
    }
    if (args.values !== undefined && args.values !== null) {
      this.values = Thrift.copyList(args.values, [XcalarApiColumnInfoT]);
    }
    if (args.active !== undefined && args.active !== null) {
      this.active = args.active;
    }
    if (args.sizeTotal !== undefined && args.sizeTotal !== null) {
      this.sizeTotal = args.sizeTotal;
    }
    if (args.numRowsTotal !== undefined && args.numRowsTotal !== null) {
      this.numRowsTotal = args.numRowsTotal;
    }
    if (args.restoring !== undefined && args.restoring !== null) {
      this.restoring = args.restoring;
    }
    if (args.userIdName !== undefined && args.userIdName !== null) {
      this.userIdName = args.userIdName;
    }
    if (args.sessionName !== undefined && args.sessionName !== null) {
      this.sessionName = args.sessionName;
    }
    if (args.indices !== undefined && args.indices !== null) {
      this.indices = Thrift.copyList(args.indices, [XcalarApiIndexInfoT]);
    }
  }
};
XcalarApiTableInfoT.prototype = {};
XcalarApiTableInfoT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.numPersistedUpdates = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.source = new XcalarApiPublishInputT();
        this.source.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size608 = 0;
        var _rtmp3612;
        this.updates = [];
        var _etype611 = 0;
        _rtmp3612 = input.readListBegin();
        _etype611 = _rtmp3612.etype;
        _size608 = _rtmp3612.size;
        for (var _i613 = 0; _i613 < _size608; ++_i613)
        {
          var elem614 = null;
          elem614 = new XcalarApiUpdateInfoT();
          elem614.read(input);
          this.updates.push(elem614);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size615 = 0;
        var _rtmp3619;
        this.selects = [];
        var _etype618 = 0;
        _rtmp3619 = input.readListBegin();
        _etype618 = _rtmp3619.etype;
        _size615 = _rtmp3619.size;
        for (var _i620 = 0; _i620 < _size615; ++_i620)
        {
          var elem621 = null;
          elem621 = new XcalarApiSelectInputT();
          elem621.read(input);
          this.selects.push(elem621);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.oldestBatchId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.nextBatchId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size622 = 0;
        var _rtmp3626;
        this.keys = [];
        var _etype625 = 0;
        _rtmp3626 = input.readListBegin();
        _etype625 = _rtmp3626.etype;
        _size622 = _rtmp3626.size;
        for (var _i627 = 0; _i627 < _size622; ++_i627)
        {
          var elem628 = null;
          elem628 = new XcalarApiColumnInfoT();
          elem628.read(input);
          this.keys.push(elem628);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size629 = 0;
        var _rtmp3633;
        this.values = [];
        var _etype632 = 0;
        _rtmp3633 = input.readListBegin();
        _etype632 = _rtmp3633.etype;
        _size629 = _rtmp3633.size;
        for (var _i634 = 0; _i634 < _size629; ++_i634)
        {
          var elem635 = null;
          elem635 = new XcalarApiColumnInfoT();
          elem635.read(input);
          this.values.push(elem635);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.active = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.sizeTotal = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I64) {
        this.numRowsTotal = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.restoring = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.userIdName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.LIST) {
        var _size636 = 0;
        var _rtmp3640;
        this.indices = [];
        var _etype639 = 0;
        _rtmp3640 = input.readListBegin();
        _etype639 = _rtmp3640.etype;
        _size636 = _rtmp3640.size;
        for (var _i641 = 0; _i641 < _size636; ++_i641)
        {
          var elem642 = null;
          elem642 = new XcalarApiIndexInfoT();
          elem642.read(input);
          this.indices.push(elem642);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiTableInfoT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiTableInfoT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.numPersistedUpdates !== null && this.numPersistedUpdates !== undefined) {
    output.writeFieldBegin('numPersistedUpdates', Thrift.Type.I32, 2);
    output.writeI32(this.numPersistedUpdates);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRUCT, 3);
    this.source.write(output);
    output.writeFieldEnd();
  }
  if (this.updates !== null && this.updates !== undefined) {
    output.writeFieldBegin('updates', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.updates.length);
    for (var iter643 in this.updates)
    {
      if (this.updates.hasOwnProperty(iter643))
      {
        iter643 = this.updates[iter643];
        iter643.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.selects !== null && this.selects !== undefined) {
    output.writeFieldBegin('selects', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.selects.length);
    for (var iter644 in this.selects)
    {
      if (this.selects.hasOwnProperty(iter644))
      {
        iter644 = this.selects[iter644];
        iter644.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.oldestBatchId !== null && this.oldestBatchId !== undefined) {
    output.writeFieldBegin('oldestBatchId', Thrift.Type.I64, 6);
    output.writeI64(this.oldestBatchId);
    output.writeFieldEnd();
  }
  if (this.nextBatchId !== null && this.nextBatchId !== undefined) {
    output.writeFieldBegin('nextBatchId', Thrift.Type.I64, 7);
    output.writeI64(this.nextBatchId);
    output.writeFieldEnd();
  }
  if (this.keys !== null && this.keys !== undefined) {
    output.writeFieldBegin('keys', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.keys.length);
    for (var iter645 in this.keys)
    {
      if (this.keys.hasOwnProperty(iter645))
      {
        iter645 = this.keys[iter645];
        iter645.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.values.length);
    for (var iter646 in this.values)
    {
      if (this.values.hasOwnProperty(iter646))
      {
        iter646 = this.values[iter646];
        iter646.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.active !== null && this.active !== undefined) {
    output.writeFieldBegin('active', Thrift.Type.BOOL, 10);
    output.writeBool(this.active);
    output.writeFieldEnd();
  }
  if (this.sizeTotal !== null && this.sizeTotal !== undefined) {
    output.writeFieldBegin('sizeTotal', Thrift.Type.I64, 11);
    output.writeI64(this.sizeTotal);
    output.writeFieldEnd();
  }
  if (this.numRowsTotal !== null && this.numRowsTotal !== undefined) {
    output.writeFieldBegin('numRowsTotal', Thrift.Type.I64, 12);
    output.writeI64(this.numRowsTotal);
    output.writeFieldEnd();
  }
  if (this.restoring !== null && this.restoring !== undefined) {
    output.writeFieldBegin('restoring', Thrift.Type.BOOL, 13);
    output.writeBool(this.restoring);
    output.writeFieldEnd();
  }
  if (this.userIdName !== null && this.userIdName !== undefined) {
    output.writeFieldBegin('userIdName', Thrift.Type.STRING, 14);
    output.writeString(this.userIdName);
    output.writeFieldEnd();
  }
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 15);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  if (this.indices !== null && this.indices !== undefined) {
    output.writeFieldBegin('indices', Thrift.Type.LIST, 16);
    output.writeListBegin(Thrift.Type.STRUCT, this.indices.length);
    for (var iter647 in this.indices)
    {
      if (this.indices.hasOwnProperty(iter647))
      {
        iter647 = this.indices[iter647];
        iter647.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiListTablesOutputT = function(args) {
  this.numTables = null;
  this.tables = null;
  if (args) {
    if (args.numTables !== undefined && args.numTables !== null) {
      this.numTables = args.numTables;
    }
    if (args.tables !== undefined && args.tables !== null) {
      this.tables = Thrift.copyList(args.tables, [XcalarApiTableInfoT]);
    }
  }
};
XcalarApiListTablesOutputT.prototype = {};
XcalarApiListTablesOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.numTables = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size648 = 0;
        var _rtmp3652;
        this.tables = [];
        var _etype651 = 0;
        _rtmp3652 = input.readListBegin();
        _etype651 = _rtmp3652.etype;
        _size648 = _rtmp3652.size;
        for (var _i653 = 0; _i653 < _size648; ++_i653)
        {
          var elem654 = null;
          elem654 = new XcalarApiTableInfoT();
          elem654.read(input);
          this.tables.push(elem654);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiListTablesOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiListTablesOutputT');
  if (this.numTables !== null && this.numTables !== undefined) {
    output.writeFieldBegin('numTables', Thrift.Type.I64, 1);
    output.writeI64(this.numTables);
    output.writeFieldEnd();
  }
  if (this.tables !== null && this.tables !== undefined) {
    output.writeFieldBegin('tables', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.tables.length);
    for (var iter655 in this.tables)
    {
      if (this.tables.hasOwnProperty(iter655))
      {
        iter655 = this.tables[iter655];
        iter655.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiUpdateOutputT = function(args) {
  this.batchIds = null;
  if (args) {
    if (args.batchIds !== undefined && args.batchIds !== null) {
      this.batchIds = Thrift.copyList(args.batchIds, [null]);
    }
  }
};
XcalarApiUpdateOutputT.prototype = {};
XcalarApiUpdateOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size656 = 0;
        var _rtmp3660;
        this.batchIds = [];
        var _etype659 = 0;
        _rtmp3660 = input.readListBegin();
        _etype659 = _rtmp3660.etype;
        _size656 = _rtmp3660.size;
        for (var _i661 = 0; _i661 < _size656; ++_i661)
        {
          var elem662 = null;
          elem662 = input.readI64().value;
          this.batchIds.push(elem662);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiUpdateOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiUpdateOutputT');
  if (this.batchIds !== null && this.batchIds !== undefined) {
    output.writeFieldBegin('batchIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.batchIds.length);
    for (var iter663 in this.batchIds)
    {
      if (this.batchIds.hasOwnProperty(iter663))
      {
        iter663 = this.batchIds[iter663];
        output.writeI64(iter663);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiQueryInfoT = function(args) {
  this.name = null;
  this.elapsed = null;
  this.state = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.elapsed !== undefined && args.elapsed !== null) {
      this.elapsed = new XcalarApiTimeT(args.elapsed);
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
  }
};
XcalarApiQueryInfoT.prototype = {};
XcalarApiQueryInfoT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.elapsed = new XcalarApiTimeT();
        this.elapsed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.state = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiQueryInfoT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiQueryInfoT');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.elapsed !== null && this.elapsed !== undefined) {
    output.writeFieldBegin('elapsed', Thrift.Type.STRUCT, 2);
    this.elapsed.write(output);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.STRING, 3);
    output.writeString(this.state);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiQueryListOutputT = function(args) {
  this.queries = null;
  if (args) {
    if (args.queries !== undefined && args.queries !== null) {
      this.queries = Thrift.copyList(args.queries, [XcalarApiQueryInfoT]);
    }
  }
};
XcalarApiQueryListOutputT.prototype = {};
XcalarApiQueryListOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size664 = 0;
        var _rtmp3668;
        this.queries = [];
        var _etype667 = 0;
        _rtmp3668 = input.readListBegin();
        _etype667 = _rtmp3668.etype;
        _size664 = _rtmp3668.size;
        for (var _i669 = 0; _i669 < _size664; ++_i669)
        {
          var elem670 = null;
          elem670 = new XcalarApiQueryInfoT();
          elem670.read(input);
          this.queries.push(elem670);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiQueryListOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiQueryListOutputT');
  if (this.queries !== null && this.queries !== undefined) {
    output.writeFieldBegin('queries', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.queries.length);
    for (var iter671 in this.queries)
    {
      if (this.queries.hasOwnProperty(iter671))
      {
        iter671 = this.queries[iter671];
        iter671.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiRestoreTableOutputT = function(args) {
  this.dependencies = null;
  if (args) {
    if (args.dependencies !== undefined && args.dependencies !== null) {
      this.dependencies = Thrift.copyList(args.dependencies, [null]);
    }
  }
};
XcalarApiRestoreTableOutputT.prototype = {};
XcalarApiRestoreTableOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size672 = 0;
        var _rtmp3676;
        this.dependencies = [];
        var _etype675 = 0;
        _rtmp3676 = input.readListBegin();
        _etype675 = _rtmp3676.etype;
        _size672 = _rtmp3676.size;
        for (var _i677 = 0; _i677 < _size672; ++_i677)
        {
          var elem678 = null;
          elem678 = input.readString().value;
          this.dependencies.push(elem678);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiRestoreTableOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiRestoreTableOutputT');
  if (this.dependencies !== null && this.dependencies !== undefined) {
    output.writeFieldBegin('dependencies', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.dependencies.length);
    for (var iter679 in this.dependencies)
    {
      if (this.dependencies.hasOwnProperty(iter679))
      {
        iter679 = this.dependencies[iter679];
        output.writeString(iter679);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiOutputResultT = function(args) {
  this.getVersionOutput = null;
  this.statusOutput = null;
  this.statOutput = null;
  this.listNodesOutput = null;
  this.makeResultSetOutput = null;
  this.resultSetNextOutput = null;
  this.getTableMetaOutput = null;
  this.indexOutput = null;
  this.loadOutput = null;
  this.getTableRefCountOutput = null;
  this.deleteDagNodesOutput = null;
  this.joinOutput = null;
  this.statGroupIdMapOutput = null;
  this.listDatasetsOutput = null;
  this.mapOutput = null;
  this.aggregateOutput = null;
  this.filterOutput = null;
  this.queryOutput = null;
  this.queryStateOutput = null;
  this.listTargetsOutput = null;
  this.dagOutput = null;
  this.listFilesOutput = null;
  this.groupByOutput = null;
  this.listRetinasOutput = null;
  this.getRetinaOutput = null;
  this.listParametersInRetinaOutput = null;
  this.keyLookupOutput = null;
  this.topOutput = null;
  this.listXdfsOutput = null;
  this.sessionListOutput = null;
  this.getQueryOutput = null;
  this.supportGenerateOutput = null;
  this.projectOutput = null;
  this.getRowNumOutput = null;
  this.udfAddUpdateOutput = null;
  this.udfGetOutput = null;
  this.perNodeOpStatsOutput = null;
  this.opStatsOutput = null;
  this.importRetinaOutput = null;
  this.previewOutput = null;
  this.exportRetinaOutput = null;
  this.startFuncTestOutput = null;
  this.listFuncTestOutput = null;
  this.executeRetinaOutput = null;
  this.getConfigParamsOutput = null;
  this.appRunOutput = null;
  this.appReapOutput = null;
  this.memoryUsageOutput = null;
  this.getIpAddrOutput = null;
  this.getNumNodesOutput = null;
  this.sessionGenericOutput = null;
  this.sessionNewOutput = null;
  this.listDatasetUsersOutput = null;
  this.logLevelGetOutput = null;
  this.keyListOutput = null;
  this.getCurrentXemConfigOutput = null;
  this.listUserDatasetsOutput = null;
  this.unionOutput = null;
  this.targetOutput = null;
  this.synthesizeOutput = null;
  this.getRetinaJsonOutput = null;
  this.getDatasetsInfoOutput = null;
  this.archiveTablesOutput = null;
  this.sessionDownloadOutput = null;
  this.listTablesOutput = null;
  this.selectOutput = null;
  this.updateOutput = null;
  this.driverOutput = null;
  this.runtimeGetParamOutput = null;
  this.datasetUnloadOutput = null;
  this.datasetGetMetaOutput = null;
  this.udfGetResOutput = null;
  this.queryListOutput = null;
  this.restoreTableOutput = null;
  if (args) {
    if (args.getVersionOutput !== undefined && args.getVersionOutput !== null) {
      this.getVersionOutput = new XcalarApiGetVersionOutputT(args.getVersionOutput);
    }
    if (args.statusOutput !== undefined && args.statusOutput !== null) {
      this.statusOutput = args.statusOutput;
    }
    if (args.statOutput !== undefined && args.statOutput !== null) {
      this.statOutput = new XcalarApiGetStatOutputT(args.statOutput);
    }
    if (args.listNodesOutput !== undefined && args.listNodesOutput !== null) {
      this.listNodesOutput = new XcalarApiListDagNodesOutputT(args.listNodesOutput);
    }
    if (args.makeResultSetOutput !== undefined && args.makeResultSetOutput !== null) {
      this.makeResultSetOutput = new XcalarApiMakeResultSetOutputT(args.makeResultSetOutput);
    }
    if (args.resultSetNextOutput !== undefined && args.resultSetNextOutput !== null) {
      this.resultSetNextOutput = new XcalarApiResultSetNextOutputT(args.resultSetNextOutput);
    }
    if (args.getTableMetaOutput !== undefined && args.getTableMetaOutput !== null) {
      this.getTableMetaOutput = new XcalarApiGetTableMetaOutputT(args.getTableMetaOutput);
    }
    if (args.indexOutput !== undefined && args.indexOutput !== null) {
      this.indexOutput = new XcalarApiNewTableOutputT(args.indexOutput);
    }
    if (args.loadOutput !== undefined && args.loadOutput !== null) {
      this.loadOutput = new XcalarApiBulkLoadOutputT(args.loadOutput);
    }
    if (args.getTableRefCountOutput !== undefined && args.getTableRefCountOutput !== null) {
      this.getTableRefCountOutput = new XcalarApiGetTableRefCountOutputT(args.getTableRefCountOutput);
    }
    if (args.deleteDagNodesOutput !== undefined && args.deleteDagNodesOutput !== null) {
      this.deleteDagNodesOutput = new XcalarApiDeleteDagNodeOutputT(args.deleteDagNodesOutput);
    }
    if (args.joinOutput !== undefined && args.joinOutput !== null) {
      this.joinOutput = new XcalarApiNewTableOutputT(args.joinOutput);
    }
    if (args.statGroupIdMapOutput !== undefined && args.statGroupIdMapOutput !== null) {
      this.statGroupIdMapOutput = new XcalarApiGetStatGroupIdMapOutputT(args.statGroupIdMapOutput);
    }
    if (args.listDatasetsOutput !== undefined && args.listDatasetsOutput !== null) {
      this.listDatasetsOutput = new XcalarApiListDatasetsOutputT(args.listDatasetsOutput);
    }
    if (args.mapOutput !== undefined && args.mapOutput !== null) {
      this.mapOutput = new XcalarApiNewTableOutputT(args.mapOutput);
    }
    if (args.aggregateOutput !== undefined && args.aggregateOutput !== null) {
      this.aggregateOutput = new XcalarApiAggregateOutputT(args.aggregateOutput);
    }
    if (args.filterOutput !== undefined && args.filterOutput !== null) {
      this.filterOutput = new XcalarApiNewTableOutputT(args.filterOutput);
    }
    if (args.queryOutput !== undefined && args.queryOutput !== null) {
      this.queryOutput = new XcalarApiQueryOutputT(args.queryOutput);
    }
    if (args.queryStateOutput !== undefined && args.queryStateOutput !== null) {
      this.queryStateOutput = new XcalarApiQueryStateOutputT(args.queryStateOutput);
    }
    if (args.listTargetsOutput !== undefined && args.listTargetsOutput !== null) {
      this.listTargetsOutput = new XcalarApiListExportTargetsOutputT(args.listTargetsOutput);
    }
    if (args.dagOutput !== undefined && args.dagOutput !== null) {
      this.dagOutput = new XcalarApiDagOutputT(args.dagOutput);
    }
    if (args.listFilesOutput !== undefined && args.listFilesOutput !== null) {
      this.listFilesOutput = new XcalarApiListFilesOutputT(args.listFilesOutput);
    }
    if (args.groupByOutput !== undefined && args.groupByOutput !== null) {
      this.groupByOutput = new XcalarApiNewTableOutputT(args.groupByOutput);
    }
    if (args.listRetinasOutput !== undefined && args.listRetinasOutput !== null) {
      this.listRetinasOutput = new XcalarApiListRetinasOutputT(args.listRetinasOutput);
    }
    if (args.getRetinaOutput !== undefined && args.getRetinaOutput !== null) {
      this.getRetinaOutput = new XcalarApiGetRetinaOutputT(args.getRetinaOutput);
    }
    if (args.listParametersInRetinaOutput !== undefined && args.listParametersInRetinaOutput !== null) {
      this.listParametersInRetinaOutput = new XcalarApiListParametersInRetinaOutputT(args.listParametersInRetinaOutput);
    }
    if (args.keyLookupOutput !== undefined && args.keyLookupOutput !== null) {
      this.keyLookupOutput = new XcalarApiKeyLookupOutputT(args.keyLookupOutput);
    }
    if (args.topOutput !== undefined && args.topOutput !== null) {
      this.topOutput = new XcalarApiTopOutputT(args.topOutput);
    }
    if (args.listXdfsOutput !== undefined && args.listXdfsOutput !== null) {
      this.listXdfsOutput = new XcalarApiListXdfsOutputT(args.listXdfsOutput);
    }
    if (args.sessionListOutput !== undefined && args.sessionListOutput !== null) {
      this.sessionListOutput = new XcalarApiSessionListOutputT(args.sessionListOutput);
    }
    if (args.getQueryOutput !== undefined && args.getQueryOutput !== null) {
      this.getQueryOutput = new XcalarApiGetQueryOutputT(args.getQueryOutput);
    }
    if (args.supportGenerateOutput !== undefined && args.supportGenerateOutput !== null) {
      this.supportGenerateOutput = new XcalarApiSupportGenerateOutputT(args.supportGenerateOutput);
    }
    if (args.projectOutput !== undefined && args.projectOutput !== null) {
      this.projectOutput = new XcalarApiNewTableOutputT(args.projectOutput);
    }
    if (args.getRowNumOutput !== undefined && args.getRowNumOutput !== null) {
      this.getRowNumOutput = new XcalarApiNewTableOutputT(args.getRowNumOutput);
    }
    if (args.udfAddUpdateOutput !== undefined && args.udfAddUpdateOutput !== null) {
      this.udfAddUpdateOutput = new XcalarApiUdfAddUpdateOutputT(args.udfAddUpdateOutput);
    }
    if (args.udfGetOutput !== undefined && args.udfGetOutput !== null) {
      this.udfGetOutput = new UdfModuleSrcT(args.udfGetOutput);
    }
    if (args.perNodeOpStatsOutput !== undefined && args.perNodeOpStatsOutput !== null) {
      this.perNodeOpStatsOutput = new XcalarApiPerNodeOpStatsT(args.perNodeOpStatsOutput);
    }
    if (args.opStatsOutput !== undefined && args.opStatsOutput !== null) {
      this.opStatsOutput = new XcalarApiOpStatsOutT(args.opStatsOutput);
    }
    if (args.importRetinaOutput !== undefined && args.importRetinaOutput !== null) {
      this.importRetinaOutput = new XcalarApiImportRetinaOutputT(args.importRetinaOutput);
    }
    if (args.previewOutput !== undefined && args.previewOutput !== null) {
      this.previewOutput = new XcalarApiPreviewOutputT(args.previewOutput);
    }
    if (args.exportRetinaOutput !== undefined && args.exportRetinaOutput !== null) {
      this.exportRetinaOutput = new XcalarApiExportRetinaOutputT(args.exportRetinaOutput);
    }
    if (args.startFuncTestOutput !== undefined && args.startFuncTestOutput !== null) {
      this.startFuncTestOutput = new XcalarApiStartFuncTestOutputT(args.startFuncTestOutput);
    }
    if (args.listFuncTestOutput !== undefined && args.listFuncTestOutput !== null) {
      this.listFuncTestOutput = new XcalarApiListFuncTestOutputT(args.listFuncTestOutput);
    }
    if (args.executeRetinaOutput !== undefined && args.executeRetinaOutput !== null) {
      this.executeRetinaOutput = new XcalarApiNewTableOutputT(args.executeRetinaOutput);
    }
    if (args.getConfigParamsOutput !== undefined && args.getConfigParamsOutput !== null) {
      this.getConfigParamsOutput = new XcalarApiGetConfigParamsOutputT(args.getConfigParamsOutput);
    }
    if (args.appRunOutput !== undefined && args.appRunOutput !== null) {
      this.appRunOutput = new XcalarApiAppRunOutputT(args.appRunOutput);
    }
    if (args.appReapOutput !== undefined && args.appReapOutput !== null) {
      this.appReapOutput = new XcalarApiAppReapOutputT(args.appReapOutput);
    }
    if (args.memoryUsageOutput !== undefined && args.memoryUsageOutput !== null) {
      this.memoryUsageOutput = new XcalarApiGetMemoryUsageOutputT(args.memoryUsageOutput);
    }
    if (args.getIpAddrOutput !== undefined && args.getIpAddrOutput !== null) {
      this.getIpAddrOutput = new XcalarApiGetIpAddrOutputT(args.getIpAddrOutput);
    }
    if (args.getNumNodesOutput !== undefined && args.getNumNodesOutput !== null) {
      this.getNumNodesOutput = new XcalarApiGetNumNodesOutputT(args.getNumNodesOutput);
    }
    if (args.sessionGenericOutput !== undefined && args.sessionGenericOutput !== null) {
      this.sessionGenericOutput = new XcalarApiSessionGenericOutputT(args.sessionGenericOutput);
    }
    if (args.sessionNewOutput !== undefined && args.sessionNewOutput !== null) {
      this.sessionNewOutput = new XcalarApiSessionNewOutputT(args.sessionNewOutput);
    }
    if (args.listDatasetUsersOutput !== undefined && args.listDatasetUsersOutput !== null) {
      this.listDatasetUsersOutput = new XcalarApiListDatasetUsersOutputT(args.listDatasetUsersOutput);
    }
    if (args.logLevelGetOutput !== undefined && args.logLevelGetOutput !== null) {
      this.logLevelGetOutput = new XcalarApiLogLevelGetOutputT(args.logLevelGetOutput);
    }
    if (args.keyListOutput !== undefined && args.keyListOutput !== null) {
      this.keyListOutput = new XcalarApiKeyListOutputT(args.keyListOutput);
    }
    if (args.getCurrentXemConfigOutput !== undefined && args.getCurrentXemConfigOutput !== null) {
      this.getCurrentXemConfigOutput = new XemClientConfigParamsT(args.getCurrentXemConfigOutput);
    }
    if (args.listUserDatasetsOutput !== undefined && args.listUserDatasetsOutput !== null) {
      this.listUserDatasetsOutput = new XcalarApiListUserDatasetsOutputT(args.listUserDatasetsOutput);
    }
    if (args.unionOutput !== undefined && args.unionOutput !== null) {
      this.unionOutput = new XcalarApiNewTableOutputT(args.unionOutput);
    }
    if (args.targetOutput !== undefined && args.targetOutput !== null) {
      this.targetOutput = new XcalarApiTargetOutputT(args.targetOutput);
    }
    if (args.synthesizeOutput !== undefined && args.synthesizeOutput !== null) {
      this.synthesizeOutput = new XcalarApiNewTableOutputT(args.synthesizeOutput);
    }
    if (args.getRetinaJsonOutput !== undefined && args.getRetinaJsonOutput !== null) {
      this.getRetinaJsonOutput = new XcalarApiGetRetinaJsonOutputT(args.getRetinaJsonOutput);
    }
    if (args.getDatasetsInfoOutput !== undefined && args.getDatasetsInfoOutput !== null) {
      this.getDatasetsInfoOutput = new XcalarApiGetDatasetsInfoOutputT(args.getDatasetsInfoOutput);
    }
    if (args.archiveTablesOutput !== undefined && args.archiveTablesOutput !== null) {
      this.archiveTablesOutput = new XcalarApiDeleteDagNodeOutputT(args.archiveTablesOutput);
    }
    if (args.sessionDownloadOutput !== undefined && args.sessionDownloadOutput !== null) {
      this.sessionDownloadOutput = new XcalarApiSessionDownloadOutputT(args.sessionDownloadOutput);
    }
    if (args.listTablesOutput !== undefined && args.listTablesOutput !== null) {
      this.listTablesOutput = new XcalarApiListTablesOutputT(args.listTablesOutput);
    }
    if (args.selectOutput !== undefined && args.selectOutput !== null) {
      this.selectOutput = new XcalarApiNewTableOutputT(args.selectOutput);
    }
    if (args.updateOutput !== undefined && args.updateOutput !== null) {
      this.updateOutput = new XcalarApiUpdateOutputT(args.updateOutput);
    }
    if (args.driverOutput !== undefined && args.driverOutput !== null) {
      this.driverOutput = new XcalarApiDriverOutputT(args.driverOutput);
    }
    if (args.runtimeGetParamOutput !== undefined && args.runtimeGetParamOutput !== null) {
      this.runtimeGetParamOutput = new XcalarApiRuntimeGetParamOutputT(args.runtimeGetParamOutput);
    }
    if (args.datasetUnloadOutput !== undefined && args.datasetUnloadOutput !== null) {
      this.datasetUnloadOutput = new XcalarApiDatasetUnloadOutputT(args.datasetUnloadOutput);
    }
    if (args.datasetGetMetaOutput !== undefined && args.datasetGetMetaOutput !== null) {
      this.datasetGetMetaOutput = new XcalarApiDatasetGetMetaOutputT(args.datasetGetMetaOutput);
    }
    if (args.udfGetResOutput !== undefined && args.udfGetResOutput !== null) {
      this.udfGetResOutput = new XcalarApiUdfGetResOutputT(args.udfGetResOutput);
    }
    if (args.queryListOutput !== undefined && args.queryListOutput !== null) {
      this.queryListOutput = new XcalarApiQueryListOutputT(args.queryListOutput);
    }
    if (args.restoreTableOutput !== undefined && args.restoreTableOutput !== null) {
      this.restoreTableOutput = new XcalarApiRestoreTableOutputT(args.restoreTableOutput);
    }
  }
};
XcalarApiOutputResultT.prototype = {};
XcalarApiOutputResultT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.getVersionOutput = new XcalarApiGetVersionOutputT();
        this.getVersionOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.statusOutput = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.statOutput = new XcalarApiGetStatOutputT();
        this.statOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.listNodesOutput = new XcalarApiListDagNodesOutputT();
        this.listNodesOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.makeResultSetOutput = new XcalarApiMakeResultSetOutputT();
        this.makeResultSetOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.resultSetNextOutput = new XcalarApiResultSetNextOutputT();
        this.resultSetNextOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.getTableMetaOutput = new XcalarApiGetTableMetaOutputT();
        this.getTableMetaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.indexOutput = new XcalarApiNewTableOutputT();
        this.indexOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.loadOutput = new XcalarApiBulkLoadOutputT();
        this.loadOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.getTableRefCountOutput = new XcalarApiGetTableRefCountOutputT();
        this.getTableRefCountOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteDagNodesOutput = new XcalarApiDeleteDagNodeOutputT();
        this.deleteDagNodesOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRUCT) {
        this.joinOutput = new XcalarApiNewTableOutputT();
        this.joinOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.statGroupIdMapOutput = new XcalarApiGetStatGroupIdMapOutputT();
        this.statGroupIdMapOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRUCT) {
        this.listDatasetsOutput = new XcalarApiListDatasetsOutputT();
        this.listDatasetsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.mapOutput = new XcalarApiNewTableOutputT();
        this.mapOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRUCT) {
        this.aggregateOutput = new XcalarApiAggregateOutputT();
        this.aggregateOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRUCT) {
        this.filterOutput = new XcalarApiNewTableOutputT();
        this.filterOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryOutput = new XcalarApiQueryOutputT();
        this.queryOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryStateOutput = new XcalarApiQueryStateOutputT();
        this.queryStateOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.listTargetsOutput = new XcalarApiListExportTargetsOutputT();
        this.listTargetsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRUCT) {
        this.dagOutput = new XcalarApiDagOutputT();
        this.dagOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRUCT) {
        this.listFilesOutput = new XcalarApiListFilesOutputT();
        this.listFilesOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRUCT) {
        this.groupByOutput = new XcalarApiNewTableOutputT();
        this.groupByOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.STRUCT) {
        this.listRetinasOutput = new XcalarApiListRetinasOutputT();
        this.listRetinasOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRUCT) {
        this.getRetinaOutput = new XcalarApiGetRetinaOutputT();
        this.getRetinaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.STRUCT) {
        this.listParametersInRetinaOutput = new XcalarApiListParametersInRetinaOutputT();
        this.listParametersInRetinaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 27:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyLookupOutput = new XcalarApiKeyLookupOutputT();
        this.keyLookupOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 28:
      if (ftype == Thrift.Type.STRUCT) {
        this.topOutput = new XcalarApiTopOutputT();
        this.topOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 29:
      if (ftype == Thrift.Type.STRUCT) {
        this.listXdfsOutput = new XcalarApiListXdfsOutputT();
        this.listXdfsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 31:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionListOutput = new XcalarApiSessionListOutputT();
        this.sessionListOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 32:
      if (ftype == Thrift.Type.STRUCT) {
        this.getQueryOutput = new XcalarApiGetQueryOutputT();
        this.getQueryOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 34:
      if (ftype == Thrift.Type.STRUCT) {
        this.supportGenerateOutput = new XcalarApiSupportGenerateOutputT();
        this.supportGenerateOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.STRUCT) {
        this.projectOutput = new XcalarApiNewTableOutputT();
        this.projectOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 36:
      if (ftype == Thrift.Type.STRUCT) {
        this.getRowNumOutput = new XcalarApiNewTableOutputT();
        this.getRowNumOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 37:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfAddUpdateOutput = new XcalarApiUdfAddUpdateOutputT();
        this.udfAddUpdateOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 38:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfGetOutput = new UdfModuleSrcT();
        this.udfGetOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 39:
      if (ftype == Thrift.Type.STRUCT) {
        this.perNodeOpStatsOutput = new XcalarApiPerNodeOpStatsT();
        this.perNodeOpStatsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRUCT) {
        this.opStatsOutput = new XcalarApiOpStatsOutT();
        this.opStatsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 41:
      if (ftype == Thrift.Type.STRUCT) {
        this.importRetinaOutput = new XcalarApiImportRetinaOutputT();
        this.importRetinaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 42:
      if (ftype == Thrift.Type.STRUCT) {
        this.previewOutput = new XcalarApiPreviewOutputT();
        this.previewOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 43:
      if (ftype == Thrift.Type.STRUCT) {
        this.exportRetinaOutput = new XcalarApiExportRetinaOutputT();
        this.exportRetinaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 44:
      if (ftype == Thrift.Type.STRUCT) {
        this.startFuncTestOutput = new XcalarApiStartFuncTestOutputT();
        this.startFuncTestOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 45:
      if (ftype == Thrift.Type.STRUCT) {
        this.listFuncTestOutput = new XcalarApiListFuncTestOutputT();
        this.listFuncTestOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 46:
      if (ftype == Thrift.Type.STRUCT) {
        this.executeRetinaOutput = new XcalarApiNewTableOutputT();
        this.executeRetinaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 48:
      if (ftype == Thrift.Type.STRUCT) {
        this.getConfigParamsOutput = new XcalarApiGetConfigParamsOutputT();
        this.getConfigParamsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRUCT) {
        this.appRunOutput = new XcalarApiAppRunOutputT();
        this.appRunOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 51:
      if (ftype == Thrift.Type.STRUCT) {
        this.appReapOutput = new XcalarApiAppReapOutputT();
        this.appReapOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 53:
      if (ftype == Thrift.Type.STRUCT) {
        this.memoryUsageOutput = new XcalarApiGetMemoryUsageOutputT();
        this.memoryUsageOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 54:
      if (ftype == Thrift.Type.STRUCT) {
        this.getIpAddrOutput = new XcalarApiGetIpAddrOutputT();
        this.getIpAddrOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 55:
      if (ftype == Thrift.Type.STRUCT) {
        this.getNumNodesOutput = new XcalarApiGetNumNodesOutputT();
        this.getNumNodesOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 56:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionGenericOutput = new XcalarApiSessionGenericOutputT();
        this.sessionGenericOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 57:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionNewOutput = new XcalarApiSessionNewOutputT();
        this.sessionNewOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 58:
      if (ftype == Thrift.Type.STRUCT) {
        this.listDatasetUsersOutput = new XcalarApiListDatasetUsersOutputT();
        this.listDatasetUsersOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 59:
      if (ftype == Thrift.Type.STRUCT) {
        this.logLevelGetOutput = new XcalarApiLogLevelGetOutputT();
        this.logLevelGetOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.STRUCT) {
        this.keyListOutput = new XcalarApiKeyListOutputT();
        this.keyListOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 61:
      if (ftype == Thrift.Type.STRUCT) {
        this.getCurrentXemConfigOutput = new XemClientConfigParamsT();
        this.getCurrentXemConfigOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 62:
      if (ftype == Thrift.Type.STRUCT) {
        this.listUserDatasetsOutput = new XcalarApiListUserDatasetsOutputT();
        this.listUserDatasetsOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 63:
      if (ftype == Thrift.Type.STRUCT) {
        this.unionOutput = new XcalarApiNewTableOutputT();
        this.unionOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 64:
      if (ftype == Thrift.Type.STRUCT) {
        this.targetOutput = new XcalarApiTargetOutputT();
        this.targetOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 65:
      if (ftype == Thrift.Type.STRUCT) {
        this.synthesizeOutput = new XcalarApiNewTableOutputT();
        this.synthesizeOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 66:
      if (ftype == Thrift.Type.STRUCT) {
        this.getRetinaJsonOutput = new XcalarApiGetRetinaJsonOutputT();
        this.getRetinaJsonOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 67:
      if (ftype == Thrift.Type.STRUCT) {
        this.getDatasetsInfoOutput = new XcalarApiGetDatasetsInfoOutputT();
        this.getDatasetsInfoOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 68:
      if (ftype == Thrift.Type.STRUCT) {
        this.archiveTablesOutput = new XcalarApiDeleteDagNodeOutputT();
        this.archiveTablesOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 69:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionDownloadOutput = new XcalarApiSessionDownloadOutputT();
        this.sessionDownloadOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 70:
      if (ftype == Thrift.Type.STRUCT) {
        this.listTablesOutput = new XcalarApiListTablesOutputT();
        this.listTablesOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 71:
      if (ftype == Thrift.Type.STRUCT) {
        this.selectOutput = new XcalarApiNewTableOutputT();
        this.selectOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 72:
      if (ftype == Thrift.Type.STRUCT) {
        this.updateOutput = new XcalarApiUpdateOutputT();
        this.updateOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 73:
      if (ftype == Thrift.Type.STRUCT) {
        this.driverOutput = new XcalarApiDriverOutputT();
        this.driverOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 74:
      if (ftype == Thrift.Type.STRUCT) {
        this.runtimeGetParamOutput = new XcalarApiRuntimeGetParamOutputT();
        this.runtimeGetParamOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 76:
      if (ftype == Thrift.Type.STRUCT) {
        this.datasetUnloadOutput = new XcalarApiDatasetUnloadOutputT();
        this.datasetUnloadOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 77:
      if (ftype == Thrift.Type.STRUCT) {
        this.datasetGetMetaOutput = new XcalarApiDatasetGetMetaOutputT();
        this.datasetGetMetaOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 78:
      if (ftype == Thrift.Type.STRUCT) {
        this.udfGetResOutput = new XcalarApiUdfGetResOutputT();
        this.udfGetResOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 80:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryListOutput = new XcalarApiQueryListOutputT();
        this.queryListOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 81:
      if (ftype == Thrift.Type.STRUCT) {
        this.restoreTableOutput = new XcalarApiRestoreTableOutputT();
        this.restoreTableOutput.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiOutputResultT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiOutputResultT');
  if (this.getVersionOutput !== null && this.getVersionOutput !== undefined) {
    output.writeFieldBegin('getVersionOutput', Thrift.Type.STRUCT, 1);
    this.getVersionOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.statusOutput !== null && this.statusOutput !== undefined) {
    output.writeFieldBegin('statusOutput', Thrift.Type.I32, 2);
    output.writeI32(this.statusOutput);
    output.writeFieldEnd();
  }
  if (this.statOutput !== null && this.statOutput !== undefined) {
    output.writeFieldBegin('statOutput', Thrift.Type.STRUCT, 3);
    this.statOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listNodesOutput !== null && this.listNodesOutput !== undefined) {
    output.writeFieldBegin('listNodesOutput', Thrift.Type.STRUCT, 4);
    this.listNodesOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.makeResultSetOutput !== null && this.makeResultSetOutput !== undefined) {
    output.writeFieldBegin('makeResultSetOutput', Thrift.Type.STRUCT, 5);
    this.makeResultSetOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.resultSetNextOutput !== null && this.resultSetNextOutput !== undefined) {
    output.writeFieldBegin('resultSetNextOutput', Thrift.Type.STRUCT, 6);
    this.resultSetNextOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getTableMetaOutput !== null && this.getTableMetaOutput !== undefined) {
    output.writeFieldBegin('getTableMetaOutput', Thrift.Type.STRUCT, 7);
    this.getTableMetaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.indexOutput !== null && this.indexOutput !== undefined) {
    output.writeFieldBegin('indexOutput', Thrift.Type.STRUCT, 8);
    this.indexOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.loadOutput !== null && this.loadOutput !== undefined) {
    output.writeFieldBegin('loadOutput', Thrift.Type.STRUCT, 9);
    this.loadOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getTableRefCountOutput !== null && this.getTableRefCountOutput !== undefined) {
    output.writeFieldBegin('getTableRefCountOutput', Thrift.Type.STRUCT, 10);
    this.getTableRefCountOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteDagNodesOutput !== null && this.deleteDagNodesOutput !== undefined) {
    output.writeFieldBegin('deleteDagNodesOutput', Thrift.Type.STRUCT, 11);
    this.deleteDagNodesOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.joinOutput !== null && this.joinOutput !== undefined) {
    output.writeFieldBegin('joinOutput', Thrift.Type.STRUCT, 12);
    this.joinOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.statGroupIdMapOutput !== null && this.statGroupIdMapOutput !== undefined) {
    output.writeFieldBegin('statGroupIdMapOutput', Thrift.Type.STRUCT, 13);
    this.statGroupIdMapOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listDatasetsOutput !== null && this.listDatasetsOutput !== undefined) {
    output.writeFieldBegin('listDatasetsOutput', Thrift.Type.STRUCT, 14);
    this.listDatasetsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.mapOutput !== null && this.mapOutput !== undefined) {
    output.writeFieldBegin('mapOutput', Thrift.Type.STRUCT, 15);
    this.mapOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.aggregateOutput !== null && this.aggregateOutput !== undefined) {
    output.writeFieldBegin('aggregateOutput', Thrift.Type.STRUCT, 16);
    this.aggregateOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.filterOutput !== null && this.filterOutput !== undefined) {
    output.writeFieldBegin('filterOutput', Thrift.Type.STRUCT, 17);
    this.filterOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.queryOutput !== null && this.queryOutput !== undefined) {
    output.writeFieldBegin('queryOutput', Thrift.Type.STRUCT, 18);
    this.queryOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.queryStateOutput !== null && this.queryStateOutput !== undefined) {
    output.writeFieldBegin('queryStateOutput', Thrift.Type.STRUCT, 19);
    this.queryStateOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listTargetsOutput !== null && this.listTargetsOutput !== undefined) {
    output.writeFieldBegin('listTargetsOutput', Thrift.Type.STRUCT, 20);
    this.listTargetsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.dagOutput !== null && this.dagOutput !== undefined) {
    output.writeFieldBegin('dagOutput', Thrift.Type.STRUCT, 21);
    this.dagOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listFilesOutput !== null && this.listFilesOutput !== undefined) {
    output.writeFieldBegin('listFilesOutput', Thrift.Type.STRUCT, 22);
    this.listFilesOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.groupByOutput !== null && this.groupByOutput !== undefined) {
    output.writeFieldBegin('groupByOutput', Thrift.Type.STRUCT, 23);
    this.groupByOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listRetinasOutput !== null && this.listRetinasOutput !== undefined) {
    output.writeFieldBegin('listRetinasOutput', Thrift.Type.STRUCT, 24);
    this.listRetinasOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getRetinaOutput !== null && this.getRetinaOutput !== undefined) {
    output.writeFieldBegin('getRetinaOutput', Thrift.Type.STRUCT, 25);
    this.getRetinaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listParametersInRetinaOutput !== null && this.listParametersInRetinaOutput !== undefined) {
    output.writeFieldBegin('listParametersInRetinaOutput', Thrift.Type.STRUCT, 26);
    this.listParametersInRetinaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyLookupOutput !== null && this.keyLookupOutput !== undefined) {
    output.writeFieldBegin('keyLookupOutput', Thrift.Type.STRUCT, 27);
    this.keyLookupOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.topOutput !== null && this.topOutput !== undefined) {
    output.writeFieldBegin('topOutput', Thrift.Type.STRUCT, 28);
    this.topOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listXdfsOutput !== null && this.listXdfsOutput !== undefined) {
    output.writeFieldBegin('listXdfsOutput', Thrift.Type.STRUCT, 29);
    this.listXdfsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionListOutput !== null && this.sessionListOutput !== undefined) {
    output.writeFieldBegin('sessionListOutput', Thrift.Type.STRUCT, 31);
    this.sessionListOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getQueryOutput !== null && this.getQueryOutput !== undefined) {
    output.writeFieldBegin('getQueryOutput', Thrift.Type.STRUCT, 32);
    this.getQueryOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.supportGenerateOutput !== null && this.supportGenerateOutput !== undefined) {
    output.writeFieldBegin('supportGenerateOutput', Thrift.Type.STRUCT, 34);
    this.supportGenerateOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.projectOutput !== null && this.projectOutput !== undefined) {
    output.writeFieldBegin('projectOutput', Thrift.Type.STRUCT, 35);
    this.projectOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getRowNumOutput !== null && this.getRowNumOutput !== undefined) {
    output.writeFieldBegin('getRowNumOutput', Thrift.Type.STRUCT, 36);
    this.getRowNumOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfAddUpdateOutput !== null && this.udfAddUpdateOutput !== undefined) {
    output.writeFieldBegin('udfAddUpdateOutput', Thrift.Type.STRUCT, 37);
    this.udfAddUpdateOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfGetOutput !== null && this.udfGetOutput !== undefined) {
    output.writeFieldBegin('udfGetOutput', Thrift.Type.STRUCT, 38);
    this.udfGetOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.perNodeOpStatsOutput !== null && this.perNodeOpStatsOutput !== undefined) {
    output.writeFieldBegin('perNodeOpStatsOutput', Thrift.Type.STRUCT, 39);
    this.perNodeOpStatsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.opStatsOutput !== null && this.opStatsOutput !== undefined) {
    output.writeFieldBegin('opStatsOutput', Thrift.Type.STRUCT, 40);
    this.opStatsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.importRetinaOutput !== null && this.importRetinaOutput !== undefined) {
    output.writeFieldBegin('importRetinaOutput', Thrift.Type.STRUCT, 41);
    this.importRetinaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.previewOutput !== null && this.previewOutput !== undefined) {
    output.writeFieldBegin('previewOutput', Thrift.Type.STRUCT, 42);
    this.previewOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.exportRetinaOutput !== null && this.exportRetinaOutput !== undefined) {
    output.writeFieldBegin('exportRetinaOutput', Thrift.Type.STRUCT, 43);
    this.exportRetinaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.startFuncTestOutput !== null && this.startFuncTestOutput !== undefined) {
    output.writeFieldBegin('startFuncTestOutput', Thrift.Type.STRUCT, 44);
    this.startFuncTestOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listFuncTestOutput !== null && this.listFuncTestOutput !== undefined) {
    output.writeFieldBegin('listFuncTestOutput', Thrift.Type.STRUCT, 45);
    this.listFuncTestOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.executeRetinaOutput !== null && this.executeRetinaOutput !== undefined) {
    output.writeFieldBegin('executeRetinaOutput', Thrift.Type.STRUCT, 46);
    this.executeRetinaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getConfigParamsOutput !== null && this.getConfigParamsOutput !== undefined) {
    output.writeFieldBegin('getConfigParamsOutput', Thrift.Type.STRUCT, 48);
    this.getConfigParamsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.appRunOutput !== null && this.appRunOutput !== undefined) {
    output.writeFieldBegin('appRunOutput', Thrift.Type.STRUCT, 50);
    this.appRunOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.appReapOutput !== null && this.appReapOutput !== undefined) {
    output.writeFieldBegin('appReapOutput', Thrift.Type.STRUCT, 51);
    this.appReapOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.memoryUsageOutput !== null && this.memoryUsageOutput !== undefined) {
    output.writeFieldBegin('memoryUsageOutput', Thrift.Type.STRUCT, 53);
    this.memoryUsageOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getIpAddrOutput !== null && this.getIpAddrOutput !== undefined) {
    output.writeFieldBegin('getIpAddrOutput', Thrift.Type.STRUCT, 54);
    this.getIpAddrOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getNumNodesOutput !== null && this.getNumNodesOutput !== undefined) {
    output.writeFieldBegin('getNumNodesOutput', Thrift.Type.STRUCT, 55);
    this.getNumNodesOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionGenericOutput !== null && this.sessionGenericOutput !== undefined) {
    output.writeFieldBegin('sessionGenericOutput', Thrift.Type.STRUCT, 56);
    this.sessionGenericOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionNewOutput !== null && this.sessionNewOutput !== undefined) {
    output.writeFieldBegin('sessionNewOutput', Thrift.Type.STRUCT, 57);
    this.sessionNewOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listDatasetUsersOutput !== null && this.listDatasetUsersOutput !== undefined) {
    output.writeFieldBegin('listDatasetUsersOutput', Thrift.Type.STRUCT, 58);
    this.listDatasetUsersOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.logLevelGetOutput !== null && this.logLevelGetOutput !== undefined) {
    output.writeFieldBegin('logLevelGetOutput', Thrift.Type.STRUCT, 59);
    this.logLevelGetOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.keyListOutput !== null && this.keyListOutput !== undefined) {
    output.writeFieldBegin('keyListOutput', Thrift.Type.STRUCT, 60);
    this.keyListOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getCurrentXemConfigOutput !== null && this.getCurrentXemConfigOutput !== undefined) {
    output.writeFieldBegin('getCurrentXemConfigOutput', Thrift.Type.STRUCT, 61);
    this.getCurrentXemConfigOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listUserDatasetsOutput !== null && this.listUserDatasetsOutput !== undefined) {
    output.writeFieldBegin('listUserDatasetsOutput', Thrift.Type.STRUCT, 62);
    this.listUserDatasetsOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.unionOutput !== null && this.unionOutput !== undefined) {
    output.writeFieldBegin('unionOutput', Thrift.Type.STRUCT, 63);
    this.unionOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.targetOutput !== null && this.targetOutput !== undefined) {
    output.writeFieldBegin('targetOutput', Thrift.Type.STRUCT, 64);
    this.targetOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.synthesizeOutput !== null && this.synthesizeOutput !== undefined) {
    output.writeFieldBegin('synthesizeOutput', Thrift.Type.STRUCT, 65);
    this.synthesizeOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getRetinaJsonOutput !== null && this.getRetinaJsonOutput !== undefined) {
    output.writeFieldBegin('getRetinaJsonOutput', Thrift.Type.STRUCT, 66);
    this.getRetinaJsonOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.getDatasetsInfoOutput !== null && this.getDatasetsInfoOutput !== undefined) {
    output.writeFieldBegin('getDatasetsInfoOutput', Thrift.Type.STRUCT, 67);
    this.getDatasetsInfoOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.archiveTablesOutput !== null && this.archiveTablesOutput !== undefined) {
    output.writeFieldBegin('archiveTablesOutput', Thrift.Type.STRUCT, 68);
    this.archiveTablesOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionDownloadOutput !== null && this.sessionDownloadOutput !== undefined) {
    output.writeFieldBegin('sessionDownloadOutput', Thrift.Type.STRUCT, 69);
    this.sessionDownloadOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.listTablesOutput !== null && this.listTablesOutput !== undefined) {
    output.writeFieldBegin('listTablesOutput', Thrift.Type.STRUCT, 70);
    this.listTablesOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.selectOutput !== null && this.selectOutput !== undefined) {
    output.writeFieldBegin('selectOutput', Thrift.Type.STRUCT, 71);
    this.selectOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.updateOutput !== null && this.updateOutput !== undefined) {
    output.writeFieldBegin('updateOutput', Thrift.Type.STRUCT, 72);
    this.updateOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.driverOutput !== null && this.driverOutput !== undefined) {
    output.writeFieldBegin('driverOutput', Thrift.Type.STRUCT, 73);
    this.driverOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.runtimeGetParamOutput !== null && this.runtimeGetParamOutput !== undefined) {
    output.writeFieldBegin('runtimeGetParamOutput', Thrift.Type.STRUCT, 74);
    this.runtimeGetParamOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.datasetUnloadOutput !== null && this.datasetUnloadOutput !== undefined) {
    output.writeFieldBegin('datasetUnloadOutput', Thrift.Type.STRUCT, 76);
    this.datasetUnloadOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.datasetGetMetaOutput !== null && this.datasetGetMetaOutput !== undefined) {
    output.writeFieldBegin('datasetGetMetaOutput', Thrift.Type.STRUCT, 77);
    this.datasetGetMetaOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.udfGetResOutput !== null && this.udfGetResOutput !== undefined) {
    output.writeFieldBegin('udfGetResOutput', Thrift.Type.STRUCT, 78);
    this.udfGetResOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.queryListOutput !== null && this.queryListOutput !== undefined) {
    output.writeFieldBegin('queryListOutput', Thrift.Type.STRUCT, 80);
    this.queryListOutput.write(output);
    output.writeFieldEnd();
  }
  if (this.restoreTableOutput !== null && this.restoreTableOutput !== undefined) {
    output.writeFieldBegin('restoreTableOutput', Thrift.Type.STRUCT, 81);
    this.restoreTableOutput.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiOutputHeaderT = function(args) {
  this.status = null;
  this.elapsed = null;
  this.log = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.elapsed !== undefined && args.elapsed !== null) {
      this.elapsed = new XcalarApiTimeT(args.elapsed);
    }
    if (args.log !== undefined && args.log !== null) {
      this.log = args.log;
    }
  }
};
XcalarApiOutputHeaderT.prototype = {};
XcalarApiOutputHeaderT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.elapsed = new XcalarApiTimeT();
        this.elapsed.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.log = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiOutputHeaderT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiOutputHeaderT');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.elapsed !== null && this.elapsed !== undefined) {
    output.writeFieldBegin('elapsed', Thrift.Type.STRUCT, 2);
    this.elapsed.write(output);
    output.writeFieldEnd();
  }
  if (this.log !== null && this.log !== undefined) {
    output.writeFieldBegin('log', Thrift.Type.STRING, 3);
    output.writeString(this.log);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiOutputT = function(args) {
  this.hdr = null;
  this.outputResult = null;
  if (args) {
    if (args.hdr !== undefined && args.hdr !== null) {
      this.hdr = new XcalarApiOutputHeaderT(args.hdr);
    }
    if (args.outputResult !== undefined && args.outputResult !== null) {
      this.outputResult = new XcalarApiOutputResultT(args.outputResult);
    }
  }
};
XcalarApiOutputT.prototype = {};
XcalarApiOutputT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hdr = new XcalarApiOutputHeaderT();
        this.hdr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.outputResult = new XcalarApiOutputResultT();
        this.outputResult.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiOutputT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiOutputT');
  if (this.hdr !== null && this.hdr !== undefined) {
    output.writeFieldBegin('hdr', Thrift.Type.STRUCT, 1);
    this.hdr.write(output);
    output.writeFieldEnd();
  }
  if (this.outputResult !== null && this.outputResult !== undefined) {
    output.writeFieldBegin('outputResult', Thrift.Type.STRUCT, 2);
    this.outputResult.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiWorkItemT = function(args) {
  this.apiVersionSignature = null;
  this.api = null;
  this.input = null;
  this.userId = null;
  this.userIdUnique = null;
  this.origApi = null;
  this.sessionName = null;
  if (args) {
    if (args.apiVersionSignature !== undefined && args.apiVersionSignature !== null) {
      this.apiVersionSignature = args.apiVersionSignature;
    }
    if (args.api !== undefined && args.api !== null) {
      this.api = args.api;
    }
    if (args.input !== undefined && args.input !== null) {
      this.input = new XcalarApiInputT(args.input);
    }
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.userIdUnique !== undefined && args.userIdUnique !== null) {
      this.userIdUnique = args.userIdUnique;
    }
    if (args.origApi !== undefined && args.origApi !== null) {
      this.origApi = args.origApi;
    }
    if (args.sessionName !== undefined && args.sessionName !== null) {
      this.sessionName = args.sessionName;
    }
  }
};
XcalarApiWorkItemT.prototype = {};
XcalarApiWorkItemT.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.apiVersionSignature = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.api = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.input = new XcalarApiInputT();
        this.input.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.userId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.userIdUnique = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.origApi = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.sessionName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiWorkItemT.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiWorkItemT');
  if (this.apiVersionSignature !== null && this.apiVersionSignature !== undefined) {
    output.writeFieldBegin('apiVersionSignature', Thrift.Type.I32, 1);
    output.writeI32(this.apiVersionSignature);
    output.writeFieldEnd();
  }
  if (this.api !== null && this.api !== undefined) {
    output.writeFieldBegin('api', Thrift.Type.I32, 2);
    output.writeI32(this.api);
    output.writeFieldEnd();
  }
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.STRUCT, 3);
    this.input.write(output);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 4);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.userIdUnique !== null && this.userIdUnique !== undefined) {
    output.writeFieldBegin('userIdUnique', Thrift.Type.I64, 5);
    output.writeI64(this.userIdUnique);
    output.writeFieldEnd();
  }
  if (this.origApi !== null && this.origApi !== undefined) {
    output.writeFieldBegin('origApi', Thrift.Type.I32, 6);
    output.writeI32(this.origApi);
    output.writeFieldEnd();
  }
  if (this.sessionName !== null && this.sessionName !== undefined) {
    output.writeFieldBegin('sessionName', Thrift.Type.STRING, 7);
    output.writeString(this.sessionName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarApiWorkItemResult = function(args) {
  this.jobStatus = null;
  this.output = null;
  if (args) {
    if (args.jobStatus !== undefined && args.jobStatus !== null) {
      this.jobStatus = args.jobStatus;
    }
    if (args.output !== undefined && args.output !== null) {
      this.output = new XcalarApiOutputT(args.output);
    }
  }
};
XcalarApiWorkItemResult.prototype = {};
XcalarApiWorkItemResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.jobStatus = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.output = new XcalarApiOutputT();
        this.output.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

XcalarApiWorkItemResult.prototype.write = function(output) {
  output.writeStructBegin('XcalarApiWorkItemResult');
  if (this.jobStatus !== null && this.jobStatus !== undefined) {
    output.writeFieldBegin('jobStatus', Thrift.Type.I32, 1);
    output.writeI32(this.jobStatus);
    output.writeFieldEnd();
  }
  if (this.output !== null && this.output !== undefined) {
    output.writeFieldBegin('output', Thrift.Type.STRUCT, 2);
    this.output.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

XcalarOpCodeColumnNameT = 'XcalarOpCode';
XcalarApiDatasetIdInvalidT = '';
XcalarApiTableIdInvalidT = '';
XcalarApiDagNodeIdInvalidT = '';
XcalarApiMaxKeyLenT = 255;
XcalarApiDefaultRecordDelimT = '\n';
XcalarApiDefaultFieldDelimT = '\t';
XcalarApiDefaultQuoteDelimT = '\"';
XcalarApiDefaultCsvParserNameT = 'default:parseCsv';
XcalarApiDefaultJsonParserNameT = 'default:parseJson';
